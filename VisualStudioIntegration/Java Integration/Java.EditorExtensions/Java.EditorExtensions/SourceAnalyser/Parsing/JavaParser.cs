//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Java.g 2012-08-03 23:20:18

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
// Should be replaced for individual needs.
// Do not forget to add closing } once file has been generated (@treeparser::footer doesn't seem t exist)
//namespace com.habelitz.jsobjectizer.unmarshaller.antlrbridge.generated {


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/**
 * An ANTLRv3 capable Java 1.5 grammar for building ASTs.
 *
 * Note that there's also the tree grammar 'JavaTreeParser.g' that can be fed
 * with this grammer's output.
 *
 *
 * Please report any detected errors or even suggestions regarding this grammar
 * to
 *
 *          dieter [D O T] habelitz [A T] habelitz [D O T] com
 *
 *      with the subject
 *
 *          jsom grammar: [your subject note]
 *
 * To generate a parser based on this grammar you'll need ANTLRv3, which you 
 * can get from 'http://www.antlr.org'.
 *
 * 
 * Change and version log (year-month-day):
 * ----------------------------------------
 * 
 * 2008-04-03	First release version published.
 * 2008-04-16   Bug-fix (not grammar specific!): the flag 'mHasError' will be 
 				set to 'true' now if an error occurs.
 * 2008-04-16   Some changes within the lexer grammar regarding comments; 
 *              furthermore, the flag 'preserveWhitespacesAndComments' has been
 *              replaced by four flags: 'mPreserveWhitespaces', 
 *              'mPreserveJavaDocComments', 'mPreserveBlockComments' and 
 *              'mPreserveLineComments'. I.e., whitespaces and all kinds of
 *				comments can be preserved or thrown away independently.
 * 2008-05-13	Grammar rule 'enumScopeDeclarations' fixed; constants are
 *			    optional not obligatory.
 * 2008-06-11   Resolving of cast expressions fixed; very simple parenthesized
 *              expressions have been recognized as type casts.
 * 2008-08-13	Rule 'switchBlockLabels' fixed.
 * 2008-08-22   New token for new line characters introduces; in previous
 *              versions new line characters have been tokenized as whitespaces.
 * 2010-09-02   Annotation initializers within parentheses are optional not
 *				obligatory (i.e. @AnyAnnotation() is valid).
 * 2011-01-11   Separate sub-rule for each statement type.
 * 2011-01-11   Preserve empty statements.
 * 2011-03-14   Recognize generic type arguments correctly for all kinds of
 *              super constructor calls.
 * 2011-08-27   Problem with the closing brackets of nested generic type 
 *              parameter/argument lists fixed.
 * 2011-10-12   Support of hexadecimal floating point literals.
 *
 * ----------------------------------------------------------------------------
 * license agreement
 * ----------------------------------------------------------------------------
 *
 * This grammar is published under the ...
 *
 * BSD license
 * 
 * Copyright (c) 2007-2011 by HABELITZ Software Developments
 *
 * All rights reserved.
 * 
 * http://www.habelitz.com
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY HABELITZ SOFTWARE DEVELOPMENTS ('HSD') ``AS IS'' 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL 'HSD' BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSERT", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_COMMENT", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "CONST", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_FP_LITERAL", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GOTO", "GREATER_OR_EQUAL", "GREATER_THAN", "HEXADECIMAL_FP_LITERAL", "HEX_DIGIT", "HEX_LITERAL", "HEX_PREFIX", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVADOC_COMMENT", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NL", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "SIGNED_INTEGER", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WS", "XOR", "XOR_ASSIGN"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSERT=20;
	public const int ASSIGN=21;
	public const int AT=22;
	public const int BIT_SHIFT_RIGHT=23;
	public const int BIT_SHIFT_RIGHT_ASSIGN=24;
	public const int BLOCK_COMMENT=25;
	public const int BLOCK_SCOPE=26;
	public const int BOOLEAN=27;
	public const int BREAK=28;
	public const int BYTE=29;
	public const int CASE=30;
	public const int CAST_EXPR=31;
	public const int CATCH=32;
	public const int CATCH_CLAUSE_LIST=33;
	public const int CHAR=34;
	public const int CHARACTER_LITERAL=35;
	public const int CLASS=36;
	public const int CLASS_CONSTRUCTOR_CALL=37;
	public const int CLASS_INSTANCE_INITIALIZER=38;
	public const int CLASS_STATIC_INITIALIZER=39;
	public const int CLASS_TOP_LEVEL_SCOPE=40;
	public const int COLON=41;
	public const int COMMA=42;
	public const int CONST=43;
	public const int CONSTRUCTOR_DECL=44;
	public const int CONTINUE=45;
	public const int DEC=46;
	public const int DECIMAL_FP_LITERAL=47;
	public const int DECIMAL_LITERAL=48;
	public const int DEFAULT=49;
	public const int DIV=50;
	public const int DIV_ASSIGN=51;
	public const int DO=52;
	public const int DOT=53;
	public const int DOTSTAR=54;
	public const int DOUBLE=55;
	public const int ELLIPSIS=56;
	public const int ELSE=57;
	public const int ENUM=58;
	public const int ENUM_TOP_LEVEL_SCOPE=59;
	public const int EQUAL=60;
	public const int ESCAPE_SEQUENCE=61;
	public const int EXPONENT=62;
	public const int EXPR=63;
	public const int EXTENDS=64;
	public const int EXTENDS_BOUND_LIST=65;
	public const int EXTENDS_CLAUSE=66;
	public const int FALSE=67;
	public const int FINAL=68;
	public const int FINALLY=69;
	public const int FLOAT=70;
	public const int FLOATING_POINT_LITERAL=71;
	public const int FLOAT_TYPE_SUFFIX=72;
	public const int FOR=73;
	public const int FORMAL_PARAM_LIST=74;
	public const int FORMAL_PARAM_STD_DECL=75;
	public const int FORMAL_PARAM_VARARG_DECL=76;
	public const int FOR_CONDITION=77;
	public const int FOR_EACH=78;
	public const int FOR_INIT=79;
	public const int FOR_UPDATE=80;
	public const int FUNCTION_METHOD_DECL=81;
	public const int GENERIC_TYPE_ARG_LIST=82;
	public const int GENERIC_TYPE_PARAM_LIST=83;
	public const int GOTO=84;
	public const int GREATER_OR_EQUAL=85;
	public const int GREATER_THAN=86;
	public const int HEXADECIMAL_FP_LITERAL=87;
	public const int HEX_DIGIT=88;
	public const int HEX_LITERAL=89;
	public const int HEX_PREFIX=90;
	public const int IDENT=91;
	public const int IF=92;
	public const int IMPLEMENTS=93;
	public const int IMPLEMENTS_CLAUSE=94;
	public const int IMPORT=95;
	public const int INC=96;
	public const int INSTANCEOF=97;
	public const int INT=98;
	public const int INTEGER_TYPE_SUFFIX=99;
	public const int INTERFACE=100;
	public const int INTERFACE_TOP_LEVEL_SCOPE=101;
	public const int JAVADOC_COMMENT=102;
	public const int JAVA_ID_PART=103;
	public const int JAVA_ID_START=104;
	public const int JAVA_SOURCE=105;
	public const int LABELED_STATEMENT=106;
	public const int LBRACK=107;
	public const int LCURLY=108;
	public const int LESS_OR_EQUAL=109;
	public const int LESS_THAN=110;
	public const int LINE_COMMENT=111;
	public const int LOCAL_MODIFIER_LIST=112;
	public const int LOGICAL_AND=113;
	public const int LOGICAL_NOT=114;
	public const int LOGICAL_OR=115;
	public const int LONG=116;
	public const int LPAREN=117;
	public const int METHOD_CALL=118;
	public const int MINUS=119;
	public const int MINUS_ASSIGN=120;
	public const int MOD=121;
	public const int MODIFIER_LIST=122;
	public const int MOD_ASSIGN=123;
	public const int NATIVE=124;
	public const int NEW=125;
	public const int NL=126;
	public const int NOT=127;
	public const int NOT_EQUAL=128;
	public const int NULL=129;
	public const int OCTAL_ESCAPE=130;
	public const int OCTAL_LITERAL=131;
	public const int OR=132;
	public const int OR_ASSIGN=133;
	public const int PACKAGE=134;
	public const int PARENTESIZED_EXPR=135;
	public const int PLUS=136;
	public const int PLUS_ASSIGN=137;
	public const int POST_DEC=138;
	public const int POST_INC=139;
	public const int PRE_DEC=140;
	public const int PRE_INC=141;
	public const int PRIVATE=142;
	public const int PROTECTED=143;
	public const int PUBLIC=144;
	public const int QUALIFIED_TYPE_IDENT=145;
	public const int QUESTION=146;
	public const int RBRACK=147;
	public const int RCURLY=148;
	public const int RETURN=149;
	public const int RPAREN=150;
	public const int SEMI=151;
	public const int SHIFT_LEFT=152;
	public const int SHIFT_LEFT_ASSIGN=153;
	public const int SHIFT_RIGHT=154;
	public const int SHIFT_RIGHT_ASSIGN=155;
	public const int SHORT=156;
	public const int SIGNED_INTEGER=157;
	public const int STAR=158;
	public const int STAR_ASSIGN=159;
	public const int STATIC=160;
	public const int STATIC_ARRAY_CREATOR=161;
	public const int STRICTFP=162;
	public const int STRING_LITERAL=163;
	public const int SUPER=164;
	public const int SUPER_CONSTRUCTOR_CALL=165;
	public const int SWITCH=166;
	public const int SWITCH_BLOCK_LABEL_LIST=167;
	public const int SYNCHRONIZED=168;
	public const int THIS=169;
	public const int THIS_CONSTRUCTOR_CALL=170;
	public const int THROW=171;
	public const int THROWS=172;
	public const int THROWS_CLAUSE=173;
	public const int TRANSIENT=174;
	public const int TRUE=175;
	public const int TRY=176;
	public const int TYPE=177;
	public const int UNARY_MINUS=178;
	public const int UNARY_PLUS=179;
	public const int UNICODE_ESCAPE=180;
	public const int VAR_DECLARATION=181;
	public const int VAR_DECLARATOR=182;
	public const int VAR_DECLARATOR_LIST=183;
	public const int VOID=184;
	public const int VOID_METHOD_DECL=185;
	public const int VOLATILE=186;
	public const int WHILE=187;
	public const int WS=188;
	public const int XOR=189;
	public const int XOR_ASSIGN=190;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[375+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "Java.g"; } }


	    
	private bool mMessageCollectionEnabled = false;
	private List<String> mMessages;

	// Used by the rule 'genericTypeListClosing' - see the comments stated there.
	private List<int> mGenTypeRewindStack = new List<int>();

	/**
	 * Switches error message collection on or of.
	 * <p>
	 * The standard destination for parser error messages is <code>
	 * System.err</code>. However, if <code>true</code> gets passed to this method 
	 * this default behavior will be switched off and all error messages will be 
	 * collected instead of writing them to an output stream.
	 * <p>
	 * The default value is <code>false</code>.
	 *
	 * @param pNewState  <code>true</code> if error messages should be collected.
	 */
	public void EnableErrorMessageCollection(bool pNewState) {

	    mMessageCollectionEnabled = pNewState;
	    if (mMessages == null && mMessageCollectionEnabled) {
	        mMessages = new List<String>();
	    }
	}

	/**
	 * Collects an error message or passes the error message to <code>
	 * base.EmitErrorMessage(...)</code>.
	 * <p>
	 * The actual behavior depends on whether collecting error messages has been 
	 * enabled or not.
	 *
	 * @param pMessage  The error message.
	 */
	public override void EmitErrorMessage(String pMessage) {

	    if (mMessageCollectionEnabled) {
	        mMessages.Add(pMessage);
	    } else {
	        base.EmitErrorMessage(pMessage);
	    }
	}

	/**
	 * Returns collected error messages.
	 * <p>
	 * This method returns a copy of the internal list of error messages and clears
	 * the internal list.
	 * <p>
	 * Note that calling this method equals to a <code>getMessages(null)</code>
	 * call.
	 *
	 * @see #getMessages(List)
	 *
	 * @return  A list holding collected error messages or <code>null</code> if
	 *          collecting error messages is disabled. Of course, the returned list 
	 *		    may be empty if no error message has been emitted.
	 */
	public List<String> GetMessages() {

		return GetMessages(null);
	}

	/**
	 * Returns collected error messages.
	 *
	 * @param pUserList  If this argument is not <code>null</code> the error
	 *                   messages will be added to this list and it's this list that
	 *                   will be returned. Otherwise a copy of the internal list of 
	 *                   error messages will be created and returned. The internal
	 *                   list will be cleared just before the method returns.
	 *
	 * @return  A list holding collected error messages. If collecting error 
	 *          messages is disabled <code>null</code> will be returned, even if the 
	 *			argument <code>pUserList</code> is not <code>null</code>.
	 */
	public List<String> GetMessages(List<String> pUserList) {

		if (!mMessageCollectionEnabled) {
		    return null;
		}
		List<String> result = pUserList;
		if (result == null) {
			result = new List<String>();
		}
		result.AddRange(mMessages);
	    mMessages.Clear();
	    
	    return result;
	}

	/**
	 * Tells if there is any collected error messages.
	 *
	 * @return  <code>true</code> if there is at least one collected error message.
	 */
	public bool HasErrors() {

	    return mMessages != null && mMessages.Count > 0;
	}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_javaSource();
	partial void LeaveRule_javaSource();
	// $ANTLR start "javaSource"
	// Java.g:544:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
	[GrammarRule("javaSource")]
	private AstParserRuleReturnScope<CommonTree, IToken> javaSource()
	{
		EnterRule_javaSource();
		EnterRule("javaSource", 1);
		TraceIn("javaSource", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int javaSource_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> compilationUnit1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
		try { DebugEnterRule(GrammarFileName, "javaSource");
		DebugLocation(544, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// Java.g:545:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
			DebugEnterAlt(1);
			// Java.g:545:9: compilationUnit
			{
			DebugLocation(545, 9);
			PushFollow(Follow._compilationUnit_in_javaSource4590);
			compilationUnit1=compilationUnit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_compilationUnit.Add(compilationUnit1.Tree);


			{
			// AST REWRITE
			// elements: compilationUnit
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 546:9: -> ^( JAVA_SOURCE compilationUnit )
			{
				DebugLocation(546, 13);
				// Java.g:546:13: ^( JAVA_SOURCE compilationUnit )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(546, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

				DebugLocation(546, 27);
				adaptor.AddChild(root_1, stream_compilationUnit.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("javaSource", 1);
			LeaveRule("javaSource", 1);
			LeaveRule_javaSource();
			if (state.backtracking > 0) { Memoize(input, 1, javaSource_StartIndex); }

		}
		DebugLocation(547, 4);
		} finally { DebugExitRule(GrammarFileName, "javaSource"); }
		return retval;

	}
	// $ANTLR end "javaSource"

	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// Java.g:549:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
	[GrammarRule("compilationUnit")]
	private AstParserRuleReturnScope<CommonTree, IToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 2);
		TraceIn("compilationUnit", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int compilationUnit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationList2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> importDeclaration4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDecls5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(549, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// Java.g:550:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
			DebugEnterAlt(1);
			// Java.g:550:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(550, 9);
			PushFollow(Follow._annotationList_in_compilationUnit4626);
			annotationList2=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList2.Tree);
			DebugLocation(551, 9);
			// Java.g:551:9: ( packageDeclaration )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==PACKAGE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:551:9: packageDeclaration
				{
				DebugLocation(551, 9);
				PushFollow(Follow._packageDeclaration_in_compilationUnit4637);
				packageDeclaration3=packageDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, packageDeclaration3.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(552, 9);
			// Java.g:552:9: ( importDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:552:9: importDeclaration
					{
					DebugLocation(552, 9);
					PushFollow(Follow._importDeclaration_in_compilationUnit4649);
					importDeclaration4=importDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, importDeclaration4.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(553, 9);
			// Java.g:553:9: ( typeDecls )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==ABSTRACT||LA3_1==AT||LA3_1==BOOLEAN||LA3_1==BYTE||LA3_1==CHAR||LA3_1==CLASS||LA3_1==DOUBLE||LA3_1==ENUM||LA3_1==FINAL||LA3_1==FLOAT||LA3_1==IDENT||LA3_1==INT||LA3_1==INTERFACE||LA3_1==LESS_THAN||LA3_1==LONG||LA3_1==NATIVE||(LA3_1>=PRIVATE && LA3_1<=PUBLIC)||LA3_1==SEMI||LA3_1==SHORT||LA3_1==STATIC||LA3_1==STRICTFP||LA3_1==SYNCHRONIZED||LA3_1==TRANSIENT||LA3_1==VOID||LA3_1==VOLATILE))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:553:9: typeDecls
					{
					DebugLocation(553, 9);
					PushFollow(Follow._typeDecls_in_compilationUnit4661);
					typeDecls5=typeDecls();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeDecls5.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilationUnit", 2);
			LeaveRule("compilationUnit", 2);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 2, compilationUnit_StartIndex); }

		}
		DebugLocation(554, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_typeDecls();
	partial void LeaveRule_typeDecls();
	// $ANTLR start "typeDecls"
	// Java.g:556:1: typeDecls : ( typeDeclaration | SEMI !);
	[GrammarRule("typeDecls")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDecls()
	{
		EnterRule_typeDecls();
		EnterRule("typeDecls", 3);
		TraceIn("typeDecls", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDecls_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI7 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration6 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeDecls");
		DebugLocation(556, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// Java.g:557:5: ( typeDeclaration | SEMI !)
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==ABSTRACT||LA4_1==AT||LA4_1==BOOLEAN||LA4_1==BYTE||LA4_1==CHAR||LA4_1==CLASS||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==IDENT||LA4_1==INT||LA4_1==INTERFACE||LA4_1==LESS_THAN||LA4_1==LONG||LA4_1==NATIVE||(LA4_1>=PRIVATE && LA4_1<=PUBLIC)||LA4_1==SHORT||LA4_1==STATIC||LA4_1==STRICTFP||LA4_1==SYNCHRONIZED||LA4_1==TRANSIENT||LA4_1==VOID||LA4_1==VOLATILE))
			{
				alt4 = 1;
			}
			else if ((LA4_1==SEMI))
			{
				alt4 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:557:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(557, 9);
				PushFollow(Follow._typeDeclaration_in_typeDecls4681);
				typeDeclaration6=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:558:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(558, 13);
				SEMI7=(IToken)Match(input,SEMI,Follow._SEMI_in_typeDecls4691); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDecls", 3);
			LeaveRule("typeDecls", 3);
			LeaveRule_typeDecls();
			if (state.backtracking > 0) { Memoize(input, 3, typeDecls_StartIndex); }

		}
		DebugLocation(559, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDecls"); }
		return retval;

	}
	// $ANTLR end "typeDecls"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// Java.g:561:1: packageDeclaration : PACKAGE ^ qualifiedIdentifier SEMI !;
	[GrammarRule("packageDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 4);
		TraceIn("packageDeclaration", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int packageDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PACKAGE8 = default(IToken);
		IToken SEMI10 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier9 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PACKAGE8_tree = default(CommonTree);
		CommonTree SEMI10_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(561, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// Java.g:562:5: ( PACKAGE ^ qualifiedIdentifier SEMI !)
			DebugEnterAlt(1);
			// Java.g:562:9: PACKAGE ^ qualifiedIdentifier SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(562, 16);
			PACKAGE8=(IToken)Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration4711); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PACKAGE8_tree = (CommonTree)adaptor.Create(PACKAGE8);
			root_0 = (CommonTree)adaptor.BecomeRoot(PACKAGE8_tree, root_0);
			}
			DebugLocation(562, 18);
			PushFollow(Follow._qualifiedIdentifier_in_packageDeclaration4714);
			qualifiedIdentifier9=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier9.Tree);
			DebugLocation(562, 42);
			SEMI10=(IToken)Match(input,SEMI,Follow._SEMI_in_packageDeclaration4716); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packageDeclaration", 4);
			LeaveRule("packageDeclaration", 4);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 4, packageDeclaration_StartIndex); }

		}
		DebugLocation(563, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return retval;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// Java.g:565:1: importDeclaration : IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !;
	[GrammarRule("importDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 5);
		TraceIn("importDeclaration", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int importDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPORT11 = default(IToken);
		IToken STATIC12 = default(IToken);
		IToken DOTSTAR14 = default(IToken);
		IToken SEMI15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPORT11_tree = default(CommonTree);
		CommonTree STATIC12_tree = default(CommonTree);
		CommonTree DOTSTAR14_tree = default(CommonTree);
		CommonTree SEMI15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(565, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// Java.g:566:5: ( IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !)
			DebugEnterAlt(1);
			// Java.g:566:9: IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(566, 15);
			IMPORT11=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration4742); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORT11_tree = (CommonTree)adaptor.Create(IMPORT11);
			root_0 = (CommonTree)adaptor.BecomeRoot(IMPORT11_tree, root_0);
			}
			DebugLocation(566, 17);
			// Java.g:566:17: ( STATIC )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==STATIC))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:566:17: STATIC
				{
				DebugLocation(566, 17);
				STATIC12=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration4745); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC12_tree = (CommonTree)adaptor.Create(STATIC12);
				adaptor.AddChild(root_0, STATIC12_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(566, 25);
			PushFollow(Follow._qualifiedIdentifier_in_importDeclaration4748);
			qualifiedIdentifier13=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier13.Tree);
			DebugLocation(566, 45);
			// Java.g:566:45: ( DOTSTAR )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==DOTSTAR))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:566:45: DOTSTAR
				{
				DebugLocation(566, 45);
				DOTSTAR14=(IToken)Match(input,DOTSTAR,Follow._DOTSTAR_in_importDeclaration4750); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTSTAR14_tree = (CommonTree)adaptor.Create(DOTSTAR14);
				adaptor.AddChild(root_0, DOTSTAR14_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(566, 58);
			SEMI15=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration4753); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 5);
			LeaveRule("importDeclaration", 5);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, importDeclaration_StartIndex); }

		}
		DebugLocation(567, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// Java.g:569:1: typeDeclaration : modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
	[GrammarRule("typeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 6);
		TraceIn("typeDeclaration", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifierList16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration20 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(569, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// Java.g:570:5: ( modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
			DebugEnterAlt(1);
			// Java.g:570:9: modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(570, 21);
			PushFollow(Follow._modifierList_in_typeDeclaration4777);
			modifierList16=modifierList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(571, 9);
			// Java.g:571:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			int alt7=4;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt7 = 1;
				}
				break;
			case INTERFACE:
				{
				alt7 = 2;
				}
				break;
			case ENUM:
				{
				alt7 = 3;
				}
				break;
			case AT:
				{
				alt7 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:571:13: classTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(571, 13);
				PushFollow(Follow._classTypeDeclaration_in_typeDeclaration4792);
				classTypeDeclaration17=classTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classTypeDeclaration17.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:572:13: interfaceTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(572, 13);
				PushFollow(Follow._interfaceTypeDeclaration_in_typeDeclaration4807);
				interfaceTypeDeclaration18=interfaceTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceTypeDeclaration18.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:573:13: enumTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(573, 13);
				PushFollow(Follow._enumTypeDeclaration_in_typeDeclaration4822);
				enumTypeDeclaration19=enumTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumTypeDeclaration19.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:574:13: annotationTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(574, 13);
				PushFollow(Follow._annotationTypeDeclaration_in_typeDeclaration4837);
				annotationTypeDeclaration20=annotationTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDeclaration", 6);
			LeaveRule("typeDeclaration", 6);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, typeDeclaration_StartIndex); }

		}
		DebugLocation(576, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return retval;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classTypeDeclaration();
	partial void LeaveRule_classTypeDeclaration();
	// $ANTLR start "classTypeDeclaration"
	// Java.g:578:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
	[GrammarRule("classTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_classTypeDeclaration();
		EnterRule("classTypeDeclaration", 7);
		TraceIn("classTypeDeclaration", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CLASS21 = default(IToken);
		IToken IDENT22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList23 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CLASS21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		try { DebugEnterRule(GrammarFileName, "classTypeDeclaration");
		DebugLocation(578, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// Java.g:579:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
			DebugEnterAlt(1);
			// Java.g:579:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
			{
			DebugLocation(579, 9);
			CLASS21=(IToken)Match(input,CLASS,Follow._CLASS_in_classTypeDeclaration4872); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLASS.Add(CLASS21);

			DebugLocation(579, 15);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_classTypeDeclaration4874); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT22);

			DebugLocation(579, 21);
			// Java.g:579:21: ( genericTypeParameterList )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==LESS_THAN))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:579:21: genericTypeParameterList
				{
				DebugLocation(579, 21);
				PushFollow(Follow._genericTypeParameterList_in_classTypeDeclaration4876);
				genericTypeParameterList23=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(579, 47);
			// Java.g:579:47: ( classExtendsClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==EXTENDS))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:579:47: classExtendsClause
				{
				DebugLocation(579, 47);
				PushFollow(Follow._classExtendsClause_in_classTypeDeclaration4879);
				classExtendsClause24=classExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classExtendsClause.Add(classExtendsClause24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(579, 67);
			// Java.g:579:67: ( implementsClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==IMPLEMENTS))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:579:67: implementsClause
				{
				DebugLocation(579, 67);
				PushFollow(Follow._implementsClause_in_classTypeDeclaration4882);
				implementsClause25=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(579, 85);
			PushFollow(Follow._classBody_in_classTypeDeclaration4885);
			classBody26=classBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classBody.Add(classBody26.Tree);


			{
			// AST REWRITE
			// elements: CLASS, IDENT, genericTypeParameterList, classExtendsClause, implementsClause, classBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 580:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
			{
				DebugLocation(580, 13);
				// Java.g:580:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(580, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_CLASS.NextNode(), root_1);

				DebugLocation(580, 21);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(580, 34);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(580, 40);
				// Java.g:580:40: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(580, 40);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(580, 66);
				// Java.g:580:66: ( classExtendsClause )?
				if (stream_classExtendsClause.HasNext)
				{
					DebugLocation(580, 66);
					adaptor.AddChild(root_1, stream_classExtendsClause.NextTree());

				}
				stream_classExtendsClause.Reset();
				DebugLocation(580, 86);
				// Java.g:580:86: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(580, 86);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(580, 104);
				adaptor.AddChild(root_1, stream_classBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classTypeDeclaration", 7);
			LeaveRule("classTypeDeclaration", 7);
			LeaveRule_classTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 7, classTypeDeclaration_StartIndex); }

		}
		DebugLocation(581, 4);
		} finally { DebugExitRule(GrammarFileName, "classTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "classTypeDeclaration"

	partial void EnterRule_classExtendsClause();
	partial void LeaveRule_classExtendsClause();
	// $ANTLR start "classExtendsClause"
	// Java.g:583:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
	[GrammarRule("classExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause()
	{
		EnterRule_classExtendsClause();
		EnterRule("classExtendsClause", 8);
		TraceIn("classExtendsClause", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS27 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS27_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "classExtendsClause");
		DebugLocation(583, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// Java.g:584:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
			DebugEnterAlt(1);
			// Java.g:584:9: EXTENDS type
			{
			DebugLocation(584, 9);
			EXTENDS27=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_classExtendsClause4938); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS27);

			DebugLocation(584, 17);
			PushFollow(Follow._type_in_classExtendsClause4940);
			type28=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type28.Tree);


			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 585:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
			{
				DebugLocation(585, 13);
				// Java.g:585:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(585, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS27, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(585, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classExtendsClause", 8);
			LeaveRule("classExtendsClause", 8);
			LeaveRule_classExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 8, classExtendsClause_StartIndex); }

		}
		DebugLocation(586, 4);
		} finally { DebugExitRule(GrammarFileName, "classExtendsClause"); }
		return retval;

	}
	// $ANTLR end "classExtendsClause"

	partial void EnterRule_interfaceExtendsClause();
	partial void LeaveRule_interfaceExtendsClause();
	// $ANTLR start "interfaceExtendsClause"
	// Java.g:588:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
	[GrammarRule("interfaceExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause()
	{
		EnterRule_interfaceExtendsClause();
		EnterRule("interfaceExtendsClause", 9);
		TraceIn("interfaceExtendsClause", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS29 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "interfaceExtendsClause");
		DebugLocation(588, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// Java.g:589:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// Java.g:589:9: EXTENDS typeList
			{
			DebugLocation(589, 9);
			EXTENDS29=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_interfaceExtendsClause4984); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS29);

			DebugLocation(589, 17);
			PushFollow(Follow._typeList_in_interfaceExtendsClause4986);
			typeList30=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList30.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 590:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
			{
				DebugLocation(590, 13);
				// Java.g:590:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(590, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS29, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(590, 58);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtendsClause", 9);
			LeaveRule("interfaceExtendsClause", 9);
			LeaveRule_interfaceExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceExtendsClause_StartIndex); }

		}
		DebugLocation(591, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtendsClause"); }
		return retval;

	}
	// $ANTLR end "interfaceExtendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// Java.g:593:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
	[GrammarRule("implementsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 10);
		TraceIn("implementsClause", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int implementsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPLEMENTS31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPLEMENTS31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IMPLEMENTS=new RewriteRuleITokenStream(adaptor,"token IMPLEMENTS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(593, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// Java.g:594:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// Java.g:594:9: IMPLEMENTS typeList
			{
			DebugLocation(594, 9);
			IMPLEMENTS31=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_implementsClause5030); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IMPLEMENTS.Add(IMPLEMENTS31);

			DebugLocation(594, 20);
			PushFollow(Follow._typeList_in_implementsClause5032);
			typeList32=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList32.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 595:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
			{
				DebugLocation(595, 13);
				// Java.g:595:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(595, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPLEMENTS_CLAUSE, IMPLEMENTS31, "IMPLEMENTS_CLAUSE"), root_1);

				DebugLocation(595, 67);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implementsClause", 10);
			LeaveRule("implementsClause", 10);
			LeaveRule_implementsClause();
			if (state.backtracking > 0) { Memoize(input, 10, implementsClause_StartIndex); }

		}
		DebugLocation(596, 4);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return retval;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_genericTypeParameterList();
	partial void LeaveRule_genericTypeParameterList();
	// $ANTLR start "genericTypeParameterList"
	// Java.g:598:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
	[GrammarRule("genericTypeParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList()
	{
		EnterRule_genericTypeParameterList();
		EnterRule("genericTypeParameterList", 11);
		TraceIn("genericTypeParameterList", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN33 = default(IToken);
		IToken COMMA35 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		JavaParser.genericTypeListClosing_return genericTypeListClosing37 = default(JavaParser.genericTypeListClosing_return);

		CommonTree LESS_THAN33_tree = default(CommonTree);
		CommonTree COMMA35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameterList");
		DebugLocation(598, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// Java.g:599:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
			DebugEnterAlt(1);
			// Java.g:599:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
			{
			DebugLocation(599, 9);
			LESS_THAN33=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeParameterList5077); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN33);

			DebugLocation(599, 19);
			PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5079);
			genericTypeParameter34=genericTypeParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter34.Tree);
			DebugLocation(599, 40);
			// Java.g:599:40: ( COMMA genericTypeParameter )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMA))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:599:41: COMMA genericTypeParameter
					{
					DebugLocation(599, 41);
					COMMA35=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeParameterList5082); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA35);

					DebugLocation(599, 47);
					PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5084);
					genericTypeParameter36=genericTypeParameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter36.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(599, 70);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeParameterList5088);
			genericTypeListClosing37=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing37.Tree);


			{
			// AST REWRITE
			// elements: genericTypeParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 600:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
			{
				DebugLocation(600, 13);
				// Java.g:600:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(600, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33, "GENERIC_TYPE_PARAM_LIST"), root_1);

				DebugLocation(600, 78);
				if (!(stream_genericTypeParameter.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeParameter.HasNext )
				{
					DebugLocation(600, 78);
					adaptor.AddChild(root_1, stream_genericTypeParameter.NextTree());

				}
				stream_genericTypeParameter.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameterList", 11);
			LeaveRule("genericTypeParameterList", 11);
			LeaveRule_genericTypeParameterList();
			if (state.backtracking > 0) { Memoize(input, 11, genericTypeParameterList_StartIndex); }

		}
		DebugLocation(601, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameterList"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameterList"

	private sealed partial class genericTypeListClosing_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public int closingBracketsCount;
		public genericTypeListClosing_return(JavaParser grammar) {OnCreated(grammar);}
		partial void OnCreated(JavaParser grammar);
	}

	partial void EnterRule_genericTypeListClosing();
	partial void LeaveRule_genericTypeListClosing();
	// $ANTLR start "genericTypeListClosing"
	// Java.g:603:1: genericTypeListClosing returns [int closingBracketsCount] : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |) ;
	[GrammarRule("genericTypeListClosing")]
	private JavaParser.genericTypeListClosing_return genericTypeListClosing()
	{
		EnterRule_genericTypeListClosing();
		EnterRule("genericTypeListClosing", 12);
		TraceIn("genericTypeListClosing", 12);
		JavaParser.genericTypeListClosing_return retval = new JavaParser.genericTypeListClosing_return(this);
		retval.Start = (IToken)input.LT(1);
		int genericTypeListClosing_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken GREATER_THAN38 = default(IToken);
		IToken SHIFT_RIGHT39 = default(IToken);
		IToken BIT_SHIFT_RIGHT40 = default(IToken);
		JavaParser.genericTypeListClosing_return count = default(JavaParser.genericTypeListClosing_return);

		CommonTree GREATER_THAN38_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT39_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT40_tree = default(CommonTree);

		        retval.closingBracketsCount = 0;
		    
		try { DebugEnterRule(GrammarFileName, "genericTypeListClosing");
		DebugLocation(603, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// Java.g:626:5: ( ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |) )
			DebugEnterAlt(1);
			// Java.g:626:9: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |)
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(626, 9);
			// Java.g:626:9: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |)
			int alt13=4;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case GREATER_THAN:
				{
				int LA13_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_Java_fragment)))
				{
					alt13 = 1;
				}
				else if ((true))
				{
					alt13 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SHIFT_RIGHT:
				{
				int LA13_2 = input.LA(2);

				if ((EvaluatePredicate(synpred15_Java_fragment)))
				{
					alt13 = 2;
				}
				else if ((true))
				{
					alt13 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BIT_SHIFT_RIGHT:
				{
				int LA13_2 = input.LA(2);

				if ((EvaluatePredicate(synpred17_Java_fragment)))
				{
					alt13 = 3;
				}
				else if ((true))
				{
					alt13 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case EOF:
			case AND:
			case AND_ASSIGN:
			case ASSIGN:
			case BIT_SHIFT_RIGHT_ASSIGN:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case COLON:
			case COMMA:
			case DIV_ASSIGN:
			case DOT:
			case DOUBLE:
			case ELLIPSIS:
			case EQUAL:
			case EXTENDS:
			case FLOAT:
			case IDENT:
			case IMPLEMENTS:
			case INT:
			case LBRACK:
			case LCURLY:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case LONG:
			case LPAREN:
			case MINUS_ASSIGN:
			case MOD_ASSIGN:
			case NOT_EQUAL:
			case OR:
			case OR_ASSIGN:
			case PLUS_ASSIGN:
			case QUESTION:
			case RBRACK:
			case RCURLY:
			case RPAREN:
			case SEMI:
			case SHIFT_LEFT_ASSIGN:
			case SHIFT_RIGHT_ASSIGN:
			case SHORT:
			case STAR_ASSIGN:
			case SUPER:
			case THIS:
			case VOID:
			case XOR:
			case XOR_ASSIGN:
				{
				alt13 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:626:13: GREATER_THAN
				{
				DebugLocation(626, 13);
				GREATER_THAN38=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_genericTypeListClosing5240); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GREATER_THAN38_tree = (CommonTree)adaptor.Create(GREATER_THAN38);
				adaptor.AddChild(root_0, GREATER_THAN38_tree);
				}
				DebugLocation(626, 26);
				if (state.backtracking == 0)
				{

					                retval.closingBracketsCount++;
					            
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:629:13: SHIFT_RIGHT
				{
				DebugLocation(629, 13);
				SHIFT_RIGHT39=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_genericTypeListClosing5256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SHIFT_RIGHT39_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT39);
				adaptor.AddChild(root_0, SHIFT_RIGHT39_tree);
				}
				DebugLocation(629, 25);
				if (state.backtracking == 0)
				{
					 
					                retval.closingBracketsCount = 2;
					            
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:632:13: BIT_SHIFT_RIGHT (count= genericTypeListClosing )?
				{
				DebugLocation(632, 13);
				BIT_SHIFT_RIGHT40=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_genericTypeListClosing5272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BIT_SHIFT_RIGHT40_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT40);
				adaptor.AddChild(root_0, BIT_SHIFT_RIGHT40_tree);
				}
				DebugLocation(632, 29);
				if (state.backtracking == 0)
				{
					 
					                retval.closingBracketsCount = 3; 
					            
				}
				DebugLocation(636, 13);
				// Java.g:636:13: (count= genericTypeListClosing )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				switch (input.LA(1))
				{
				case GREATER_THAN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case SHIFT_RIGHT:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case BIT_SHIFT_RIGHT:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case EXTENDS:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case IMPLEMENTS:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case LCURLY:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case IDENT:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case VOID:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case EOF:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case DOT:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case LBRACK:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case AND:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case COMMA:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case LPAREN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case SUPER:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case THIS:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case ELLIPSIS:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case EQUAL:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case NOT_EQUAL:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case XOR:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case OR:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case LOGICAL_AND:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case LOGICAL_OR:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case QUESTION:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case RPAREN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case RCURLY:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case SEMI:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case PLUS_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case MINUS_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case STAR_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case DIV_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case AND_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case OR_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case XOR_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case MOD_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case SHIFT_LEFT_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case SHIFT_RIGHT_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case BIT_SHIFT_RIGHT_ASSIGN:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case COLON:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				case RBRACK:
					{
					int LA12_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_Java_fragment)))
					{
						alt12 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:636:17: count= genericTypeListClosing
					{
					DebugLocation(636, 23);
					PushFollow(Follow._genericTypeListClosing_in_genericTypeListClosing5309);
					count=genericTypeListClosing();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, count.Tree);
					DebugLocation(636, 48);
					if (state.backtracking == 0)
					{
						 
						                    retval.closingBracketsCount += (count!=null?count.closingBracketsCount:default(int));
						                
					}

					}
					break;

				}
				} finally { DebugExitSubRule(12); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:643:9: 
				{
				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(644, 9);
			if (state.backtracking == 0)
			{

				            // If necessary update the token stream position; there's nothing to
				            // do if 'closingBracketsCount == 1'.
				    		
				            if (retval.closingBracketsCount == 0) {
				                // Rewind the token stream to the position of the last 
				                // remembered closing bracket.
				                int size = mGenTypeRewindStack.Count;
				                if (size > 0) {
				                    int lastPos = mGenTypeRewindStack[size - 1];
				                    mGenTypeRewindStack.Remove(size - 1);
				                    TokenStream.Rewind(lastPos);
				                }
				            } else if (retval.closingBracketsCount > 1) {
				                // Remember the current token stream position for more than one
				                // closing brackets.
				                int position = TokenStream.Mark();
				                while (retval.closingBracketsCount > 1) {
				                	mGenTypeRewindStack.Add(position);
				                	retval.closingBracketsCount--;
				                }
				            }
				        
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeListClosing", 12);
			LeaveRule("genericTypeListClosing", 12);
			LeaveRule_genericTypeListClosing();
			if (state.backtracking > 0) { Memoize(input, 12, genericTypeListClosing_StartIndex); }

		}
		DebugLocation(667, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeListClosing"); }
		return retval;

	}
	// $ANTLR end "genericTypeListClosing"

	partial void EnterRule_genericTypeParameter();
	partial void LeaveRule_genericTypeParameter();
	// $ANTLR start "genericTypeParameter"
	// Java.g:669:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
	[GrammarRule("genericTypeParameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter()
	{
		EnterRule_genericTypeParameter();
		EnterRule("genericTypeParameter", 13);
		TraceIn("genericTypeParameter", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> bound42 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameter");
		DebugLocation(669, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// Java.g:670:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
			DebugEnterAlt(1);
			// Java.g:670:9: IDENT ( bound )?
			{
			DebugLocation(670, 9);
			IDENT41=(IToken)Match(input,IDENT,Follow._IDENT_in_genericTypeParameter5398); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT41);

			DebugLocation(670, 15);
			// Java.g:670:15: ( bound )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==EXTENDS))
			{
				int LA14_2 = input.LA(2);

				if ((LA14_2==BOOLEAN||LA14_2==BYTE||LA14_2==CHAR||LA14_2==DOUBLE||LA14_2==FLOAT||LA14_2==INT||LA14_2==LONG||LA14_2==SHORT))
				{
					int LA14_3 = input.LA(3);

					if ((EvaluatePredicate(synpred18_Java_fragment)))
					{
						alt14 = 1;
					}
				}
				else if ((LA14_2==IDENT))
				{
					int LA14_3 = input.LA(3);

					if ((EvaluatePredicate(synpred18_Java_fragment)))
					{
						alt14 = 1;
					}
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:670:15: bound
				{
				DebugLocation(670, 15);
				PushFollow(Follow._bound_in_genericTypeParameter5400);
				bound42=bound();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bound.Add(bound42.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }



			{
			// AST REWRITE
			// elements: IDENT, bound
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 671:9: -> ^( IDENT ( bound )? )
			{
				DebugLocation(671, 13);
				// Java.g:671:13: ^( IDENT ( bound )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(671, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IDENT.NextNode(), root_1);

				DebugLocation(671, 21);
				// Java.g:671:21: ( bound )?
				if (stream_bound.HasNext)
				{
					DebugLocation(671, 21);
					adaptor.AddChild(root_1, stream_bound.NextTree());

				}
				stream_bound.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameter", 13);
			LeaveRule("genericTypeParameter", 13);
			LeaveRule_genericTypeParameter();
			if (state.backtracking > 0) { Memoize(input, 13, genericTypeParameter_StartIndex); }

		}
		DebugLocation(672, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameter"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameter"

	partial void EnterRule_bound();
	partial void LeaveRule_bound();
	// $ANTLR start "bound"
	// Java.g:674:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
	[GrammarRule("bound")]
	private AstParserRuleReturnScope<CommonTree, IToken> bound()
	{
		EnterRule_bound();
		EnterRule("bound", 14);
		TraceIn("bound", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bound_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS43 = default(IToken);
		IToken AND45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS43_tree = default(CommonTree);
		CommonTree AND45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "bound");
		DebugLocation(674, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// Java.g:675:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
			DebugEnterAlt(1);
			// Java.g:675:9: EXTENDS type ( AND type )*
			{
			DebugLocation(675, 9);
			EXTENDS43=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_bound5446); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS43);

			DebugLocation(675, 17);
			PushFollow(Follow._type_in_bound5448);
			type44=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type44.Tree);
			DebugLocation(675, 22);
			// Java.g:675:22: ( AND type )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==AND))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:675:23: AND type
					{
					DebugLocation(675, 23);
					AND45=(IToken)Match(input,AND,Follow._AND_in_bound5451); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AND.Add(AND45);

					DebugLocation(675, 27);
					PushFollow(Follow._type_in_bound5453);
					type46=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type46.Tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }



			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 676:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
			{
				DebugLocation(676, 13);
				// Java.g:676:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(676, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_BOUND_LIST, EXTENDS43, "EXTENDS_BOUND_LIST"), root_1);

				DebugLocation(676, 66);
				if (!(stream_type.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_type.HasNext )
				{
					DebugLocation(676, 66);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bound", 14);
			LeaveRule("bound", 14);
			LeaveRule_bound();
			if (state.backtracking > 0) { Memoize(input, 14, bound_StartIndex); }

		}
		DebugLocation(677, 4);
		} finally { DebugExitRule(GrammarFileName, "bound"); }
		return retval;

	}
	// $ANTLR end "bound"

	partial void EnterRule_enumTypeDeclaration();
	partial void LeaveRule_enumTypeDeclaration();
	// $ANTLR start "enumTypeDeclaration"
	// Java.g:679:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
	[GrammarRule("enumTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_enumTypeDeclaration();
		EnterRule("enumTypeDeclaration", 15);
		TraceIn("enumTypeDeclaration", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ENUM47 = default(IToken);
		IToken IDENT48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumBody50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ENUM47_tree = default(CommonTree);
		CommonTree IDENT48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ENUM=new RewriteRuleITokenStream(adaptor,"token ENUM");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
		try { DebugEnterRule(GrammarFileName, "enumTypeDeclaration");
		DebugLocation(679, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// Java.g:680:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
			DebugEnterAlt(1);
			// Java.g:680:9: ENUM IDENT ( implementsClause )? enumBody
			{
			DebugLocation(680, 9);
			ENUM47=(IToken)Match(input,ENUM,Follow._ENUM_in_enumTypeDeclaration5494); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ENUM.Add(ENUM47);

			DebugLocation(680, 14);
			IDENT48=(IToken)Match(input,IDENT,Follow._IDENT_in_enumTypeDeclaration5496); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT48);

			DebugLocation(680, 20);
			// Java.g:680:20: ( implementsClause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==IMPLEMENTS))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:680:20: implementsClause
				{
				DebugLocation(680, 20);
				PushFollow(Follow._implementsClause_in_enumTypeDeclaration5498);
				implementsClause49=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(680, 38);
			PushFollow(Follow._enumBody_in_enumTypeDeclaration5501);
			enumBody50=enumBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumBody.Add(enumBody50.Tree);


			{
			// AST REWRITE
			// elements: ENUM, IDENT, implementsClause, enumBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 681:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
			{
				DebugLocation(681, 13);
				// Java.g:681:13: ^( ENUM IDENT ( implementsClause )? enumBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(681, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_ENUM.NextNode(), root_1);

				DebugLocation(681, 20);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(681, 33);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(681, 39);
				// Java.g:681:39: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(681, 39);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(681, 57);
				adaptor.AddChild(root_1, stream_enumBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumTypeDeclaration", 15);
			LeaveRule("enumTypeDeclaration", 15);
			LeaveRule_enumTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 15, enumTypeDeclaration_StartIndex); }

		}
		DebugLocation(682, 4);
		} finally { DebugExitRule(GrammarFileName, "enumTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumTypeDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();
	// $ANTLR start "enumBody"
	// Java.g:684:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* ) ;
	[GrammarRule("enumBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 16);
		TraceIn("enumBody", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY51 = default(IToken);
		IToken RCURLY53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY51_tree = default(CommonTree);
		CommonTree RCURLY53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(684, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// Java.g:685:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:685:9: LCURLY enumScopeDeclarations RCURLY
			{
			DebugLocation(685, 9);
			LCURLY51=(IToken)Match(input,LCURLY,Follow._LCURLY_in_enumBody5548); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY51);

			DebugLocation(685, 16);
			PushFollow(Follow._enumScopeDeclarations_in_enumBody5550);
			enumScopeDeclarations52=enumScopeDeclarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumScopeDeclarations.Add(enumScopeDeclarations52.Tree);
			DebugLocation(685, 38);
			RCURLY53=(IToken)Match(input,RCURLY,Follow._RCURLY_in_enumBody5552); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY53);



			{
			// AST REWRITE
			// elements: enumScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 686:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* )
			{
				DebugLocation(686, 13);
				// Java.g:686:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(686, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ENUM_TOP_LEVEL_SCOPE, LCURLY51, "ENUM_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(686, 69);
				// Java.g:686:69: ( enumScopeDeclarations )*
				while ( stream_enumScopeDeclarations.HasNext )
				{
					DebugLocation(686, 69);
					adaptor.AddChild(root_1, stream_enumScopeDeclarations.NextTree());

				}
				stream_enumScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBody", 16);
			LeaveRule("enumBody", 16);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 16, enumBody_StartIndex); }

		}
		DebugLocation(687, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return retval;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumScopeDeclarations();
	partial void LeaveRule_enumScopeDeclarations();
	// $ANTLR start "enumScopeDeclarations"
	// Java.g:689:1: enumScopeDeclarations : ( enumConstants )? ( COMMA !)? ( enumClassScopeDeclarations )? ;
	[GrammarRule("enumScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations()
	{
		EnterRule_enumScopeDeclarations();
		EnterRule("enumScopeDeclarations", 17);
		TraceIn("enumScopeDeclarations", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstants54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA55_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumScopeDeclarations");
		DebugLocation(689, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// Java.g:690:5: ( ( enumConstants )? ( COMMA !)? ( enumClassScopeDeclarations )? )
			DebugEnterAlt(1);
			// Java.g:690:9: ( enumConstants )? ( COMMA !)? ( enumClassScopeDeclarations )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(690, 9);
			// Java.g:690:9: ( enumConstants )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==AT||LA17_1==IDENT))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:690:9: enumConstants
				{
				DebugLocation(690, 9);
				PushFollow(Follow._enumConstants_in_enumScopeDeclarations5590);
				enumConstants54=enumConstants();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstants54.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(690, 24);
			// Java.g:690:24: ( COMMA !)?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==COMMA))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:690:25: COMMA !
				{
				DebugLocation(690, 30);
				COMMA55=(IToken)Match(input,COMMA,Follow._COMMA_in_enumScopeDeclarations5594); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(690, 34);
			// Java.g:690:34: ( enumClassScopeDeclarations )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==SEMI))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:690:34: enumClassScopeDeclarations
				{
				DebugLocation(690, 34);
				PushFollow(Follow._enumClassScopeDeclarations_in_enumScopeDeclarations5599);
				enumClassScopeDeclarations56=enumClassScopeDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumClassScopeDeclarations56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumScopeDeclarations", 17);
			LeaveRule("enumScopeDeclarations", 17);
			LeaveRule_enumScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 17, enumScopeDeclarations_StartIndex); }

		}
		DebugLocation(691, 4);
		} finally { DebugExitRule(GrammarFileName, "enumScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumScopeDeclarations"

	partial void EnterRule_enumClassScopeDeclarations();
	partial void LeaveRule_enumClassScopeDeclarations();
	// $ANTLR start "enumClassScopeDeclarations"
	// Java.g:693:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("enumClassScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations()
	{
		EnterRule_enumClassScopeDeclarations();
		EnterRule("enumClassScopeDeclarations", 18);
		TraceIn("enumClassScopeDeclarations", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumClassScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI57 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI57_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumClassScopeDeclarations");
		DebugLocation(693, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// Java.g:694:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:694:9: SEMI ( classScopeDeclarations )*
			{
			DebugLocation(694, 9);
			SEMI57=(IToken)Match(input,SEMI,Follow._SEMI_in_enumClassScopeDeclarations5619); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI57);

			DebugLocation(694, 14);
			// Java.g:694:14: ( classScopeDeclarations )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ABSTRACT||LA20_1==AT||LA20_1==BOOLEAN||LA20_1==BYTE||LA20_1==CHAR||LA20_1==CLASS||LA20_1==DOUBLE||LA20_1==ENUM||LA20_1==FINAL||LA20_1==FLOAT||LA20_1==IDENT||LA20_1==INT||LA20_1==INTERFACE||LA20_1==LCURLY||LA20_1==LESS_THAN||LA20_1==LONG||LA20_1==NATIVE||(LA20_1>=PRIVATE && LA20_1<=PUBLIC)||LA20_1==SEMI||LA20_1==SHORT||LA20_1==STATIC||LA20_1==STRICTFP||LA20_1==SYNCHRONIZED||LA20_1==TRANSIENT||LA20_1==VOID||LA20_1==VOLATILE))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:694:14: classScopeDeclarations
					{
					DebugLocation(694, 14);
					PushFollow(Follow._classScopeDeclarations_in_enumClassScopeDeclarations5621);
					classScopeDeclarations58=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations58.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 695:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(695, 13);
				// Java.g:695:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(695, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, SEMI57, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(695, 69);
				// Java.g:695:69: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(695, 69);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumClassScopeDeclarations", 18);
			LeaveRule("enumClassScopeDeclarations", 18);
			LeaveRule_enumClassScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumClassScopeDeclarations_StartIndex); }

		}
		DebugLocation(696, 4);
		} finally { DebugExitRule(GrammarFileName, "enumClassScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumClassScopeDeclarations"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();
	// $ANTLR start "enumConstants"
	// Java.g:698:1: enumConstants : enumConstant ( COMMA ! enumConstant )* ;
	[GrammarRule("enumConstants")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 19);
		TraceIn("enumConstants", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstants_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(698, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Java.g:699:5: ( enumConstant ( COMMA ! enumConstant )* )
			DebugEnterAlt(1);
			// Java.g:699:9: enumConstant ( COMMA ! enumConstant )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(699, 9);
			PushFollow(Follow._enumConstant_in_enumConstants5660);
			enumConstant59=enumConstant();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant59.Tree);
			DebugLocation(699, 22);
			// Java.g:699:22: ( COMMA ! enumConstant )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==COMMA))
				{
					int LA21_2 = input.LA(2);

					if ((LA21_2==AT||LA21_2==IDENT))
					{
						alt21 = 1;
					}


				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:699:23: COMMA ! enumConstant
					{
					DebugLocation(699, 28);
					COMMA60=(IToken)Match(input,COMMA,Follow._COMMA_in_enumConstants5663); if (state.failed) return retval;
					DebugLocation(699, 30);
					PushFollow(Follow._enumConstant_in_enumConstants5666);
					enumConstant61=enumConstant();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant61.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstants", 19);
			LeaveRule("enumConstants", 19);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 19, enumConstants_StartIndex); }

		}
		DebugLocation(700, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return retval;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// Java.g:702:1: enumConstant : annotationList IDENT ^ ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 20);
		TraceIn("enumConstant", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstant_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationList62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(702, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// Java.g:703:5: ( annotationList IDENT ^ ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:703:9: annotationList IDENT ^ ( arguments )? ( classBody )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(703, 9);
			PushFollow(Follow._annotationList_in_enumConstant5691);
			annotationList62=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList62.Tree);
			DebugLocation(703, 29);
			IDENT63=(IToken)Match(input,IDENT,Follow._IDENT_in_enumConstant5693); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT63_tree = (CommonTree)adaptor.Create(IDENT63);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT63_tree, root_0);
			}
			DebugLocation(703, 31);
			// Java.g:703:31: ( arguments )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==LPAREN))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:703:31: arguments
				{
				DebugLocation(703, 31);
				PushFollow(Follow._arguments_in_enumConstant5696);
				arguments64=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(703, 42);
			// Java.g:703:42: ( classBody )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==LCURLY))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:703:42: classBody
				{
				DebugLocation(703, 42);
				PushFollow(Follow._classBody_in_enumConstant5699);
				classBody65=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstant", 20);
			LeaveRule("enumConstant", 20);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 20, enumConstant_StartIndex); }

		}
		DebugLocation(704, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return retval;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_interfaceTypeDeclaration();
	partial void LeaveRule_interfaceTypeDeclaration();
	// $ANTLR start "interfaceTypeDeclaration"
	// Java.g:706:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
	[GrammarRule("interfaceTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_interfaceTypeDeclaration();
		EnterRule("interfaceTypeDeclaration", 21);
		TraceIn("interfaceTypeDeclaration", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INTERFACE66 = default(IToken);
		IToken IDENT67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceBody70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INTERFACE66_tree = default(CommonTree);
		CommonTree IDENT67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
		RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
		try { DebugEnterRule(GrammarFileName, "interfaceTypeDeclaration");
		DebugLocation(706, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// Java.g:707:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
			DebugEnterAlt(1);
			// Java.g:707:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
			{
			DebugLocation(707, 9);
			INTERFACE66=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_interfaceTypeDeclaration5724); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE66);

			DebugLocation(707, 19);
			IDENT67=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceTypeDeclaration5726); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT67);

			DebugLocation(707, 25);
			// Java.g:707:25: ( genericTypeParameterList )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==LESS_THAN))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:707:25: genericTypeParameterList
				{
				DebugLocation(707, 25);
				PushFollow(Follow._genericTypeParameterList_in_interfaceTypeDeclaration5728);
				genericTypeParameterList68=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(707, 51);
			// Java.g:707:51: ( interfaceExtendsClause )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==EXTENDS))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:707:51: interfaceExtendsClause
				{
				DebugLocation(707, 51);
				PushFollow(Follow._interfaceExtendsClause_in_interfaceTypeDeclaration5731);
				interfaceExtendsClause69=interfaceExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_interfaceExtendsClause.Add(interfaceExtendsClause69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(707, 75);
			PushFollow(Follow._interfaceBody_in_interfaceTypeDeclaration5734);
			interfaceBody70=interfaceBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceBody.Add(interfaceBody70.Tree);


			{
			// AST REWRITE
			// elements: INTERFACE, IDENT, genericTypeParameterList, interfaceExtendsClause, interfaceBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 708:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
			{
				DebugLocation(708, 13);
				// Java.g:708:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(708, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_INTERFACE.NextNode(), root_1);

				DebugLocation(708, 25);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(708, 38);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(708, 44);
				// Java.g:708:44: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(708, 44);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(708, 70);
				// Java.g:708:70: ( interfaceExtendsClause )?
				if (stream_interfaceExtendsClause.HasNext)
				{
					DebugLocation(708, 70);
					adaptor.AddChild(root_1, stream_interfaceExtendsClause.NextTree());

				}
				stream_interfaceExtendsClause.Reset();
				DebugLocation(708, 94);
				adaptor.AddChild(root_1, stream_interfaceBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceTypeDeclaration", 21);
			LeaveRule("interfaceTypeDeclaration", 21);
			LeaveRule_interfaceTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 21, interfaceTypeDeclaration_StartIndex); }

		}
		DebugLocation(709, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceTypeDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();
	// $ANTLR start "typeList"
	// Java.g:711:1: typeList : type ( COMMA ! type )* ;
	[GrammarRule("typeList")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 22);
		TraceIn("typeList", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA72_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(711, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Java.g:712:5: ( type ( COMMA ! type )* )
			DebugEnterAlt(1);
			// Java.g:712:9: type ( COMMA ! type )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(712, 9);
			PushFollow(Follow._type_in_typeList5784);
			type71=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type71.Tree);
			DebugLocation(712, 14);
			// Java.g:712:14: ( COMMA ! type )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==COMMA))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:712:15: COMMA ! type
					{
					DebugLocation(712, 20);
					COMMA72=(IToken)Match(input,COMMA,Follow._COMMA_in_typeList5787); if (state.failed) return retval;
					DebugLocation(712, 22);
					PushFollow(Follow._type_in_typeList5790);
					type73=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type73.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeList", 22);
			LeaveRule("typeList", 22);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 22, typeList_StartIndex); }

		}
		DebugLocation(713, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();
	// $ANTLR start "classBody"
	// Java.g:715:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 23);
		TraceIn("classBody", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY74 = default(IToken);
		IToken RCURLY76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY74_tree = default(CommonTree);
		CommonTree RCURLY76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(715, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Java.g:716:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:716:9: LCURLY ( classScopeDeclarations )* RCURLY
			{
			DebugLocation(716, 9);
			LCURLY74=(IToken)Match(input,LCURLY,Follow._LCURLY_in_classBody5815); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY74);

			DebugLocation(716, 16);
			// Java.g:716:16: ( classScopeDeclarations )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==ABSTRACT||LA27_1==AT||LA27_1==BOOLEAN||LA27_1==BYTE||LA27_1==CHAR||LA27_1==CLASS||LA27_1==DOUBLE||LA27_1==ENUM||LA27_1==FINAL||LA27_1==FLOAT||LA27_1==IDENT||LA27_1==INT||LA27_1==INTERFACE||LA27_1==LCURLY||LA27_1==LESS_THAN||LA27_1==LONG||LA27_1==NATIVE||(LA27_1>=PRIVATE && LA27_1<=PUBLIC)||LA27_1==SEMI||LA27_1==SHORT||LA27_1==STATIC||LA27_1==STRICTFP||LA27_1==SYNCHRONIZED||LA27_1==TRANSIENT||LA27_1==VOID||LA27_1==VOLATILE))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:716:16: classScopeDeclarations
					{
					DebugLocation(716, 16);
					PushFollow(Follow._classScopeDeclarations_in_classBody5817);
					classScopeDeclarations75=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations75.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }

			DebugLocation(716, 40);
			RCURLY76=(IToken)Match(input,RCURLY,Follow._RCURLY_in_classBody5820); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY76);



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 717:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(717, 13);
				// Java.g:717:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(717, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, LCURLY74, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(717, 71);
				// Java.g:717:71: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(717, 71);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 23);
			LeaveRule("classBody", 23);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 23, classBody_StartIndex); }

		}
		DebugLocation(718, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();
	// $ANTLR start "interfaceBody"
	// Java.g:720:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
	[GrammarRule("interfaceBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 24);
		TraceIn("interfaceBody", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY77 = default(IToken);
		IToken RCURLY79 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations78 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY77_tree = default(CommonTree);
		CommonTree RCURLY79_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(720, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// Java.g:721:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:721:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
			{
			DebugLocation(721, 9);
			LCURLY77=(IToken)Match(input,LCURLY,Follow._LCURLY_in_interfaceBody5862); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY77);

			DebugLocation(721, 16);
			// Java.g:721:16: ( interfaceScopeDeclarations )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==ABSTRACT||LA28_1==AT||LA28_1==BOOLEAN||LA28_1==BYTE||LA28_1==CHAR||LA28_1==CLASS||LA28_1==DOUBLE||LA28_1==ENUM||LA28_1==FINAL||LA28_1==FLOAT||LA28_1==IDENT||LA28_1==INT||LA28_1==INTERFACE||LA28_1==LESS_THAN||LA28_1==LONG||LA28_1==NATIVE||(LA28_1>=PRIVATE && LA28_1<=PUBLIC)||LA28_1==SEMI||LA28_1==SHORT||LA28_1==STATIC||LA28_1==STRICTFP||LA28_1==SYNCHRONIZED||LA28_1==TRANSIENT||LA28_1==VOID||LA28_1==VOLATILE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:721:16: interfaceScopeDeclarations
					{
					DebugLocation(721, 16);
					PushFollow(Follow._interfaceScopeDeclarations_in_interfaceBody5864);
					interfaceScopeDeclarations78=interfaceScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceScopeDeclarations.Add(interfaceScopeDeclarations78.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(721, 44);
			RCURLY79=(IToken)Match(input,RCURLY,Follow._RCURLY_in_interfaceBody5867); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY79);



			{
			// AST REWRITE
			// elements: interfaceScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 722:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
			{
				DebugLocation(722, 13);
				// Java.g:722:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(722, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(722, 75);
				// Java.g:722:75: ( interfaceScopeDeclarations )*
				while ( stream_interfaceScopeDeclarations.HasNext )
				{
					DebugLocation(722, 75);
					adaptor.AddChild(root_1, stream_interfaceScopeDeclarations.NextTree());

				}
				stream_interfaceScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBody", 24);
			LeaveRule("interfaceBody", 24);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 24, interfaceBody_StartIndex); }

		}
		DebugLocation(723, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return retval;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classScopeDeclarations();
	partial void LeaveRule_classScopeDeclarations();
	// $ANTLR start "classScopeDeclarations"
	// Java.g:725:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("classScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations()
	{
		EnterRule_classScopeDeclarations();
		EnterRule("classScopeDeclarations", 25);
		TraceIn("classScopeDeclarations", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken STATIC81 = default(IToken);
		IToken IDENT86 = default(IToken);
		IToken SEMI91 = default(IToken);
		IToken VOID92 = default(IToken);
		IToken IDENT93 = default(IToken);
		IToken SEMI97 = default(IToken);
		IToken SEMI103 = default(IToken);
		IToken SEMI105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ident_tree = default(CommonTree);
		CommonTree STATIC81_tree = default(CommonTree);
		CommonTree IDENT86_tree = default(CommonTree);
		CommonTree SEMI91_tree = default(CommonTree);
		CommonTree VOID92_tree = default(CommonTree);
		CommonTree IDENT93_tree = default(CommonTree);
		CommonTree SEMI97_tree = default(CommonTree);
		CommonTree SEMI103_tree = default(CommonTree);
		CommonTree SEMI105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STATIC=new RewriteRuleITokenStream(adaptor,"token STATIC");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "classScopeDeclarations");
		DebugLocation(725, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// Java.g:726:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt38=5;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt38 = 1;
				}
				break;
			case STATIC:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred34_Java_fragment)))
				{
					alt38 = 2;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred46_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt38 = 3;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt38 = 4;
				}
				break;
			case SEMI:
				{
				alt38 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:726:9: block
				{
				DebugLocation(726, 9);
				PushFollow(Follow._block_in_classScopeDeclarations5905);
				block80=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block80.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 726:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
				{
					DebugLocation(726, 29);
					// Java.g:726:29: ^( CLASS_INSTANCE_INITIALIZER block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(726, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

					DebugLocation(726, 58);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:727:9: STATIC block
				{
				DebugLocation(727, 9);
				STATIC81=(IToken)Match(input,STATIC,Follow._STATIC_in_classScopeDeclarations5934); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATIC.Add(STATIC81);

				DebugLocation(727, 16);
				PushFollow(Follow._block_in_classScopeDeclarations5936);
				block82=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block82.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 727:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
				{
					DebugLocation(727, 29);
					// Java.g:727:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(727, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_STATIC_INITIALIZER, STATIC81, "CLASS_STATIC_INITIALIZER"), root_1);

					DebugLocation(727, 93);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:728:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(728, 9);
				PushFollow(Follow._modifierList_in_classScopeDeclarations5959);
				modifierList83=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList83.Tree);
				DebugLocation(729, 9);
				// Java.g:729:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				switch (input.LA(1))
				{
				case LESS_THAN:
				case VOID:
					{
					alt37 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred44_Java_fragment)))
					{
						alt37 = 1;
					}
					else if ((true))
					{
						alt37 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred44_Java_fragment)))
					{
						alt37 = 1;
					}
					else if ((true))
					{
						alt37 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:729:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					{
					DebugLocation(729, 13);
					// Java.g:729:13: ( genericTypeParameterList )?
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, false);
					int LA29_1 = input.LA(1);

					if ((LA29_1==LESS_THAN))
					{
						alt29 = 1;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:729:13: genericTypeParameterList
						{
						DebugLocation(729, 13);
						PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations5973);
						genericTypeParameterList84=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList84.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(730, 13);
					// Java.g:730:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					int alt36=3;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, false);
					switch (input.LA(1))
					{
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						alt36 = 1;
						}
						break;
					case IDENT:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==DOT||LA36_2==IDENT||LA36_2==LBRACK||LA36_2==LESS_THAN))
						{
							alt36 = 1;
						}
						else if ((LA36_2==LPAREN))
						{
							alt36 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 36, 2, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case VOID:
						{
						alt36 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:730:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(730, 17);
						PushFollow(Follow._type_in_classScopeDeclarations5992);
						type85=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type85.Tree);
						DebugLocation(730, 22);
						IDENT86=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5994); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT86);

						DebugLocation(730, 28);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5996);
						formalParameterList87=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList87.Tree);
						DebugLocation(730, 48);
						// Java.g:730:48: ( arrayDeclaratorList )?
						int alt30=2;
						try { DebugEnterSubRule(30);
						try { DebugEnterDecision(30, false);
						int LA30_1 = input.LA(1);

						if ((LA30_1==LBRACK))
						{
							alt30 = 1;
						}
						} finally { DebugExitDecision(30); }
						switch (alt30)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:730:48: arrayDeclaratorList
							{
							DebugLocation(730, 48);
							PushFollow(Follow._arrayDeclaratorList_in_classScopeDeclarations5998);
							arrayDeclaratorList88=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList88.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(30); }

						DebugLocation(730, 69);
						// Java.g:730:69: ( throwsClause )?
						int alt31=2;
						try { DebugEnterSubRule(31);
						try { DebugEnterDecision(31, false);
						int LA31_1 = input.LA(1);

						if ((LA31_1==THROWS))
						{
							alt31 = 1;
						}
						} finally { DebugExitDecision(31); }
						switch (alt31)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:730:69: throwsClause
							{
							DebugLocation(730, 69);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations6001);
							throwsClause89=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause89.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(31); }

						DebugLocation(730, 83);
						// Java.g:730:83: ( block | SEMI )
						int alt32=2;
						try { DebugEnterSubRule(32);
						try { DebugEnterDecision(32, false);
						int LA32_1 = input.LA(1);

						if ((LA32_1==LCURLY))
						{
							alt32 = 1;
						}
						else if ((LA32_1==SEMI))
						{
							alt32 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(32); }
						switch (alt32)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:730:84: block
							{
							DebugLocation(730, 84);
							PushFollow(Follow._block_in_classScopeDeclarations6005);
							block90=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block90.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Java.g:730:92: SEMI
							{
							DebugLocation(730, 92);
							SEMI91=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6009); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI91);


							}
							break;

						}
						} finally { DebugExitSubRule(32); }



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, type, IDENT, formalParameterList, arrayDeclaratorList, throwsClause, block
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 731:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
						{
							DebugLocation(731, 21);
							// Java.g:731:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(731, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(731, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(731, 57);
							// Java.g:731:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(731, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(731, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(731, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(731, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(731, 114);
							// Java.g:731:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(731, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(731, 135);
							// Java.g:731:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(731, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(731, 149);
							// Java.g:731:149: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(731, 149);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:732:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(732, 17);
						VOID92=(IToken)Match(input,VOID,Follow._VOID_in_classScopeDeclarations6071); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID92);

						DebugLocation(732, 22);
						IDENT93=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations6073); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT93);

						DebugLocation(732, 28);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations6075);
						formalParameterList94=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList94.Tree);
						DebugLocation(732, 48);
						// Java.g:732:48: ( throwsClause )?
						int alt33=2;
						try { DebugEnterSubRule(33);
						try { DebugEnterDecision(33, false);
						int LA33_1 = input.LA(1);

						if ((LA33_1==THROWS))
						{
							alt33 = 1;
						}
						} finally { DebugExitDecision(33); }
						switch (alt33)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:732:48: throwsClause
							{
							DebugLocation(732, 48);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations6077);
							throwsClause95=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause95.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(33); }

						DebugLocation(732, 62);
						// Java.g:732:62: ( block | SEMI )
						int alt34=2;
						try { DebugEnterSubRule(34);
						try { DebugEnterDecision(34, false);
						int LA34_1 = input.LA(1);

						if ((LA34_1==LCURLY))
						{
							alt34 = 1;
						}
						else if ((LA34_1==SEMI))
						{
							alt34 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(34); }
						switch (alt34)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:732:63: block
							{
							DebugLocation(732, 63);
							PushFollow(Follow._block_in_classScopeDeclarations6081);
							block96=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block96.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Java.g:732:71: SEMI
							{
							DebugLocation(732, 71);
							SEMI97=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6085); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI97);


							}
							break;

						}
						} finally { DebugExitSubRule(34); }



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, IDENT, formalParameterList, throwsClause, block
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 733:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
						{
							DebugLocation(733, 21);
							// Java.g:733:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(733, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(733, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(733, 53);
							// Java.g:733:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(733, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(733, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(733, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(733, 105);
							// Java.g:733:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(733, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(733, 119);
							// Java.g:733:119: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(733, 119);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:734:17: ident= IDENT formalParameterList ( throwsClause )? block
						{
						DebugLocation(734, 22);
						ident=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations6144); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(ident);

						DebugLocation(734, 29);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations6146);
						formalParameterList98=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList98.Tree);
						DebugLocation(734, 49);
						// Java.g:734:49: ( throwsClause )?
						int alt35=2;
						try { DebugEnterSubRule(35);
						try { DebugEnterDecision(35, false);
						int LA35_1 = input.LA(1);

						if ((LA35_1==THROWS))
						{
							alt35 = 1;
						}
						} finally { DebugExitDecision(35); }
						switch (alt35)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:734:49: throwsClause
							{
							DebugLocation(734, 49);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations6148);
							throwsClause99=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause99.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(35); }

						DebugLocation(734, 63);
						PushFollow(Follow._block_in_classScopeDeclarations6151);
						block100=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_block.Add(block100.Tree);


						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, formalParameterList, throwsClause, block
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 735:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
						{
							DebugLocation(735, 21);
							// Java.g:735:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(735, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

							DebugLocation(735, 68);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(735, 81);
							// Java.g:735:81: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(735, 81);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(735, 107);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(735, 127);
							// Java.g:735:127: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(735, 127);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(735, 141);
							adaptor.AddChild(root_1, stream_block.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(36); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:737:13: type classFieldDeclaratorList SEMI
					{
					DebugLocation(737, 13);
					PushFollow(Follow._type_in_classScopeDeclarations6215);
					type101=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type101.Tree);
					DebugLocation(737, 18);
					PushFollow(Follow._classFieldDeclaratorList_in_classScopeDeclarations6217);
					classFieldDeclaratorList102=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList102.Tree);
					DebugLocation(737, 43);
					SEMI103=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6219); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI103);



					{
					// AST REWRITE
					// elements: modifierList, type, classFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 738:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(738, 17);
						// Java.g:738:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(738, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(738, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(738, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(738, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:740:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(740, 9);
				PushFollow(Follow._typeDeclaration_in_classScopeDeclarations6264);
				typeDeclaration104=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration104.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:741:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(741, 13);
				SEMI105=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6274); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classScopeDeclarations", 25);
			LeaveRule("classScopeDeclarations", 25);
			LeaveRule_classScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 25, classScopeDeclarations_StartIndex); }

		}
		DebugLocation(742, 4);
		} finally { DebugExitRule(GrammarFileName, "classScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "classScopeDeclarations"

	partial void EnterRule_interfaceScopeDeclarations();
	partial void LeaveRule_interfaceScopeDeclarations();
	// $ANTLR start "interfaceScopeDeclarations"
	// Java.g:744:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("interfaceScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations()
	{
		EnterRule_interfaceScopeDeclarations();
		EnterRule("interfaceScopeDeclarations", 26);
		TraceIn("interfaceScopeDeclarations", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT109 = default(IToken);
		IToken SEMI113 = default(IToken);
		IToken VOID114 = default(IToken);
		IToken IDENT115 = default(IToken);
		IToken SEMI118 = default(IToken);
		IToken SEMI121 = default(IToken);
		IToken SEMI123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration122 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT109_tree = default(CommonTree);
		CommonTree SEMI113_tree = default(CommonTree);
		CommonTree VOID114_tree = default(CommonTree);
		CommonTree IDENT115_tree = default(CommonTree);
		CommonTree SEMI118_tree = default(CommonTree);
		CommonTree SEMI121_tree = default(CommonTree);
		CommonTree SEMI123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "interfaceScopeDeclarations");
		DebugLocation(744, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// Java.g:745:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt45 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt45 = 2;
				}
				break;
			case SEMI:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:745:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				{
				DebugLocation(745, 9);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations6306);
				modifierList106=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList106.Tree);
				DebugLocation(746, 9);
				// Java.g:746:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				switch (input.LA(1))
				{
				case LESS_THAN:
				case VOID:
					{
					alt44 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA44_2 = input.LA(2);

					if ((EvaluatePredicate(synpred52_Java_fragment)))
					{
						alt44 = 1;
					}
					else if ((true))
					{
						alt44 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA44_2 = input.LA(2);

					if ((EvaluatePredicate(synpred52_Java_fragment)))
					{
						alt44 = 1;
					}
					else if ((true))
					{
						alt44 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:746:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					{
					DebugLocation(746, 13);
					// Java.g:746:13: ( genericTypeParameterList )?
					int alt39=2;
					try { DebugEnterSubRule(39);
					try { DebugEnterDecision(39, false);
					int LA39_1 = input.LA(1);

					if ((LA39_1==LESS_THAN))
					{
						alt39 = 1;
					}
					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:746:13: genericTypeParameterList
						{
						DebugLocation(746, 13);
						PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations6320);
						genericTypeParameterList107=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList107.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(39); }

					DebugLocation(747, 13);
					// Java.g:747:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					int alt43=2;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==BOOLEAN||LA43_1==BYTE||LA43_1==CHAR||LA43_1==DOUBLE||LA43_1==FLOAT||LA43_1==IDENT||LA43_1==INT||LA43_1==LONG||LA43_1==SHORT))
					{
						alt43 = 1;
					}
					else if ((LA43_1==VOID))
					{
						alt43 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:747:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
						{
						DebugLocation(747, 17);
						PushFollow(Follow._type_in_interfaceScopeDeclarations6339);
						type108=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type108.Tree);
						DebugLocation(747, 22);
						IDENT109=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6341); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT109);

						DebugLocation(747, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6343);
						formalParameterList110=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList110.Tree);
						DebugLocation(747, 48);
						// Java.g:747:48: ( arrayDeclaratorList )?
						int alt40=2;
						try { DebugEnterSubRule(40);
						try { DebugEnterDecision(40, false);
						int LA40_1 = input.LA(1);

						if ((LA40_1==LBRACK))
						{
							alt40 = 1;
						}
						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:747:48: arrayDeclaratorList
							{
							DebugLocation(747, 48);
							PushFollow(Follow._arrayDeclaratorList_in_interfaceScopeDeclarations6345);
							arrayDeclaratorList111=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList111.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(40); }

						DebugLocation(747, 69);
						// Java.g:747:69: ( throwsClause )?
						int alt41=2;
						try { DebugEnterSubRule(41);
						try { DebugEnterDecision(41, false);
						int LA41_1 = input.LA(1);

						if ((LA41_1==THROWS))
						{
							alt41 = 1;
						}
						} finally { DebugExitDecision(41); }
						switch (alt41)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:747:69: throwsClause
							{
							DebugLocation(747, 69);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6348);
							throwsClause112=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause112.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(41); }

						DebugLocation(747, 83);
						SEMI113=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6351); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI113);



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, type, IDENT, formalParameterList, arrayDeclaratorList, throwsClause
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 748:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
						{
							DebugLocation(748, 21);
							// Java.g:748:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(748, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(748, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(748, 57);
							// Java.g:748:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(748, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(748, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(748, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(748, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(748, 114);
							// Java.g:748:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(748, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(748, 135);
							// Java.g:748:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(748, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:749:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
						{
						DebugLocation(749, 17);
						VOID114=(IToken)Match(input,VOID,Follow._VOID_in_interfaceScopeDeclarations6409); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID114);

						DebugLocation(749, 22);
						IDENT115=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6411); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT115);

						DebugLocation(749, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6413);
						formalParameterList116=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList116.Tree);
						DebugLocation(749, 48);
						// Java.g:749:48: ( throwsClause )?
						int alt42=2;
						try { DebugEnterSubRule(42);
						try { DebugEnterDecision(42, false);
						int LA42_1 = input.LA(1);

						if ((LA42_1==THROWS))
						{
							alt42 = 1;
						}
						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:749:48: throwsClause
							{
							DebugLocation(749, 48);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6415);
							throwsClause117=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause117.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(42); }

						DebugLocation(749, 62);
						SEMI118=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6418); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI118);



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, IDENT, formalParameterList, throwsClause
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 750:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
						{
							DebugLocation(750, 21);
							// Java.g:750:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(750, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(750, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(750, 53);
							// Java.g:750:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(750, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(750, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(750, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(750, 105);
							// Java.g:750:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(750, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(43); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:752:13: type interfaceFieldDeclaratorList SEMI
					{
					DebugLocation(752, 13);
					PushFollow(Follow._type_in_interfaceScopeDeclarations6481);
					type119=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type119.Tree);
					DebugLocation(752, 18);
					PushFollow(Follow._interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6483);
					interfaceFieldDeclaratorList120=interfaceFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclaratorList.Add(interfaceFieldDeclaratorList120.Tree);
					DebugLocation(752, 47);
					SEMI121=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6485); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI121);



					{
					// AST REWRITE
					// elements: modifierList, type, interfaceFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 753:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
					{
						DebugLocation(753, 17);
						// Java.g:753:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(753, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(753, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(753, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(753, 53);
						adaptor.AddChild(root_1, stream_interfaceFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:755:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(755, 9);
				PushFollow(Follow._typeDeclaration_in_interfaceScopeDeclarations6530);
				typeDeclaration122=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration122.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:756:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(756, 13);
				SEMI123=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6540); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceScopeDeclarations", 26);
			LeaveRule("interfaceScopeDeclarations", 26);
			LeaveRule_interfaceScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 26, interfaceScopeDeclarations_StartIndex); }

		}
		DebugLocation(757, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "interfaceScopeDeclarations"

	partial void EnterRule_classFieldDeclaratorList();
	partial void LeaveRule_classFieldDeclaratorList();
	// $ANTLR start "classFieldDeclaratorList"
	// Java.g:759:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
	[GrammarRule("classFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList()
	{
		EnterRule_classFieldDeclaratorList();
		EnterRule("classFieldDeclaratorList", 27);
		TraceIn("classFieldDeclaratorList", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA125 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA125_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclaratorList");
		DebugLocation(759, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// Java.g:760:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// Java.g:760:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
			{
			DebugLocation(760, 9);
			PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6560);
			classFieldDeclarator124=classFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator124.Tree);
			DebugLocation(760, 30);
			// Java.g:760:30: ( COMMA classFieldDeclarator )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==COMMA))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:760:31: COMMA classFieldDeclarator
					{
					DebugLocation(760, 31);
					COMMA125=(IToken)Match(input,COMMA,Follow._COMMA_in_classFieldDeclaratorList6563); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA125);

					DebugLocation(760, 37);
					PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6565);
					classFieldDeclarator126=classFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator126.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: classFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 761:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
			{
				DebugLocation(761, 13);
				// Java.g:761:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(761, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(761, 35);
				if (!(stream_classFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_classFieldDeclarator.HasNext )
				{
					DebugLocation(761, 35);
					adaptor.AddChild(root_1, stream_classFieldDeclarator.NextTree());

				}
				stream_classFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclaratorList", 27);
			LeaveRule("classFieldDeclaratorList", 27);
			LeaveRule_classFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 27, classFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(762, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclaratorList"

	partial void EnterRule_classFieldDeclarator();
	partial void LeaveRule_classFieldDeclarator();
	// $ANTLR start "classFieldDeclarator"
	// Java.g:764:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
	[GrammarRule("classFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator()
	{
		EnterRule_classFieldDeclarator();
		EnterRule("classFieldDeclarator", 28);
		TraceIn("classFieldDeclarator", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclarator");
		DebugLocation(764, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// Java.g:765:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
			DebugEnterAlt(1);
			// Java.g:765:9: variableDeclaratorId ( ASSIGN variableInitializer )?
			{
			DebugLocation(765, 9);
			PushFollow(Follow._variableDeclaratorId_in_classFieldDeclarator6604);
			variableDeclaratorId127=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId127.Tree);
			DebugLocation(765, 30);
			// Java.g:765:30: ( ASSIGN variableInitializer )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==ASSIGN))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:765:31: ASSIGN variableInitializer
				{
				DebugLocation(765, 31);
				ASSIGN128=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_classFieldDeclarator6607); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN128);

				DebugLocation(765, 38);
				PushFollow(Follow._variableInitializer_in_classFieldDeclarator6609);
				variableInitializer129=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer129.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: variableDeclaratorId, variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 766:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
			{
				DebugLocation(766, 13);
				// Java.g:766:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(766, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(766, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(766, 51);
				// Java.g:766:51: ( variableInitializer )?
				if (stream_variableInitializer.HasNext)
				{
					DebugLocation(766, 51);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclarator", 28);
			LeaveRule("classFieldDeclarator", 28);
			LeaveRule_classFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, classFieldDeclarator_StartIndex); }

		}
		DebugLocation(767, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclarator"

	partial void EnterRule_interfaceFieldDeclaratorList();
	partial void LeaveRule_interfaceFieldDeclaratorList();
	// $ANTLR start "interfaceFieldDeclaratorList"
	// Java.g:769:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
	[GrammarRule("interfaceFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList()
	{
		EnterRule_interfaceFieldDeclaratorList();
		EnterRule("interfaceFieldDeclaratorList", 29);
		TraceIn("interfaceFieldDeclaratorList", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaratorList");
		DebugLocation(769, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// Java.g:770:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// Java.g:770:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
			{
			DebugLocation(770, 9);
			PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6654);
			interfaceFieldDeclarator130=interfaceFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator130.Tree);
			DebugLocation(770, 34);
			// Java.g:770:34: ( COMMA interfaceFieldDeclarator )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==COMMA))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:770:35: COMMA interfaceFieldDeclarator
					{
					DebugLocation(770, 35);
					COMMA131=(IToken)Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaratorList6657); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA131);

					DebugLocation(770, 41);
					PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6659);
					interfaceFieldDeclarator132=interfaceFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator132.Tree);

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }



			{
			// AST REWRITE
			// elements: interfaceFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 771:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
			{
				DebugLocation(771, 13);
				// Java.g:771:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(771, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(771, 35);
				if (!(stream_interfaceFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_interfaceFieldDeclarator.HasNext )
				{
					DebugLocation(771, 35);
					adaptor.AddChild(root_1, stream_interfaceFieldDeclarator.NextTree());

				}
				stream_interfaceFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclaratorList", 29);
			LeaveRule("interfaceFieldDeclaratorList", 29);
			LeaveRule_interfaceFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(772, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclaratorList"

	partial void EnterRule_interfaceFieldDeclarator();
	partial void LeaveRule_interfaceFieldDeclarator();
	// $ANTLR start "interfaceFieldDeclarator"
	// Java.g:774:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
	[GrammarRule("interfaceFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator()
	{
		EnterRule_interfaceFieldDeclarator();
		EnterRule("interfaceFieldDeclarator", 30);
		TraceIn("interfaceFieldDeclarator", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclarator");
		DebugLocation(774, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// Java.g:775:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
			DebugEnterAlt(1);
			// Java.g:775:9: variableDeclaratorId ASSIGN variableInitializer
			{
			DebugLocation(775, 9);
			PushFollow(Follow._variableDeclaratorId_in_interfaceFieldDeclarator6698);
			variableDeclaratorId133=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId133.Tree);
			DebugLocation(775, 30);
			ASSIGN134=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_interfaceFieldDeclarator6700); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN134);

			DebugLocation(775, 37);
			PushFollow(Follow._variableInitializer_in_interfaceFieldDeclarator6702);
			variableInitializer135=variableInitializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer135.Tree);


			{
			// AST REWRITE
			// elements: variableDeclaratorId, variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 776:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
			{
				DebugLocation(776, 13);
				// Java.g:776:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(776, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(776, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(776, 51);
				adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclarator", 30);
			LeaveRule("interfaceFieldDeclarator", 30);
			LeaveRule_interfaceFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceFieldDeclarator_StartIndex); }

		}
		DebugLocation(777, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclarator"

	partial void EnterRule_variableDeclaratorId();
	partial void LeaveRule_variableDeclaratorId();
	// $ANTLR start "variableDeclaratorId"
	// Java.g:779:1: variableDeclaratorId : IDENT ^ ( arrayDeclaratorList )? ;
	[GrammarRule("variableDeclaratorId")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId()
	{
		EnterRule_variableDeclaratorId();
		EnterRule("variableDeclaratorId", 31);
		TraceIn("variableDeclaratorId", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclaratorId_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT136 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT136_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variableDeclaratorId");
		DebugLocation(779, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// Java.g:780:5: ( IDENT ^ ( arrayDeclaratorList )? )
			DebugEnterAlt(1);
			// Java.g:780:9: IDENT ^ ( arrayDeclaratorList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(780, 14);
			IDENT136=(IToken)Match(input,IDENT,Follow._IDENT_in_variableDeclaratorId6744); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT136_tree = (CommonTree)adaptor.Create(IDENT136);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT136_tree, root_0);
			}
			DebugLocation(780, 16);
			// Java.g:780:16: ( arrayDeclaratorList )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==LBRACK))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:780:16: arrayDeclaratorList
				{
				DebugLocation(780, 16);
				PushFollow(Follow._arrayDeclaratorList_in_variableDeclaratorId6747);
				arrayDeclaratorList137=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaratorId", 31);
			LeaveRule("variableDeclaratorId", 31);
			LeaveRule_variableDeclaratorId();
			if (state.backtracking > 0) { Memoize(input, 31, variableDeclaratorId_StartIndex); }

		}
		DebugLocation(781, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorId"); }
		return retval;

	}
	// $ANTLR end "variableDeclaratorId"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// Java.g:783:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 32);
		TraceIn("variableInitializer", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(783, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// Java.g:784:5: ( arrayInitializer | expression )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==LCURLY))
			{
				alt50 = 1;
			}
			else if ((LA50_1==BOOLEAN||LA50_1==BYTE||(LA50_1>=CHAR && LA50_1<=CHARACTER_LITERAL)||LA50_1==DEC||LA50_1==DECIMAL_LITERAL||LA50_1==DOUBLE||LA50_1==FALSE||(LA50_1>=FLOAT && LA50_1<=FLOATING_POINT_LITERAL)||LA50_1==HEX_LITERAL||LA50_1==IDENT||LA50_1==INC||LA50_1==INT||LA50_1==LESS_THAN||LA50_1==LOGICAL_NOT||(LA50_1>=LONG && LA50_1<=LPAREN)||LA50_1==MINUS||LA50_1==NEW||LA50_1==NOT||LA50_1==NULL||LA50_1==OCTAL_LITERAL||LA50_1==PLUS||LA50_1==SHORT||(LA50_1>=STRING_LITERAL && LA50_1<=SUPER)||LA50_1==THIS||LA50_1==TRUE||LA50_1==VOID))
			{
				alt50 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:784:9: arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(784, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer6767);
				arrayInitializer138=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer138.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:785:9: expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(785, 9);
				PushFollow(Follow._expression_in_variableInitializer6777);
				expression139=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression139.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableInitializer", 32);
			LeaveRule("variableInitializer", 32);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 32, variableInitializer_StartIndex); }

		}
		DebugLocation(786, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayDeclarator();
	partial void LeaveRule_arrayDeclarator();
	// $ANTLR start "arrayDeclarator"
	// Java.g:788:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
	[GrammarRule("arrayDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator()
	{
		EnterRule_arrayDeclarator();
		EnterRule("arrayDeclarator", 33);
		TraceIn("arrayDeclarator", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK140 = default(IToken);
		IToken RBRACK141 = default(IToken);

		CommonTree LBRACK140_tree = default(CommonTree);
		CommonTree RBRACK141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		try { DebugEnterRule(GrammarFileName, "arrayDeclarator");
		DebugLocation(788, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// Java.g:789:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
			DebugEnterAlt(1);
			// Java.g:789:9: LBRACK RBRACK
			{
			DebugLocation(789, 9);
			LBRACK140=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayDeclarator6796); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LBRACK.Add(LBRACK140);

			DebugLocation(789, 16);
			RBRACK141=(IToken)Match(input,RBRACK,Follow._RBRACK_in_arrayDeclarator6798); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RBRACK.Add(RBRACK141);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 790:9: -> ^( ARRAY_DECLARATOR )
			{
				DebugLocation(790, 13);
				// Java.g:790:13: ^( ARRAY_DECLARATOR )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(790, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclarator", 33);
			LeaveRule("arrayDeclarator", 33);
			LeaveRule_arrayDeclarator();
			if (state.backtracking > 0) { Memoize(input, 33, arrayDeclarator_StartIndex); }

		}
		DebugLocation(791, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclarator"); }
		return retval;

	}
	// $ANTLR end "arrayDeclarator"

	partial void EnterRule_arrayDeclaratorList();
	partial void LeaveRule_arrayDeclaratorList();
	// $ANTLR start "arrayDeclaratorList"
	// Java.g:793:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
	[GrammarRule("arrayDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList()
	{
		EnterRule_arrayDeclaratorList();
		EnterRule("arrayDeclaratorList", 34);
		TraceIn("arrayDeclaratorList", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		try { DebugEnterRule(GrammarFileName, "arrayDeclaratorList");
		DebugLocation(793, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// Java.g:794:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
			DebugEnterAlt(1);
			// Java.g:794:9: ( arrayDeclarator )+
			{
			DebugLocation(794, 9);
			// Java.g:794:9: ( arrayDeclarator )+
			int cnt51=0;
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==LBRACK))
				{
					int LA51_2 = input.LA(2);

					if ((EvaluatePredicate(synpred60_Java_fragment)))
					{
						alt51 = 1;
					}


				}


				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:794:9: arrayDeclarator
					{
					DebugLocation(794, 9);
					PushFollow(Follow._arrayDeclarator_in_arrayDeclaratorList6832);
					arrayDeclarator142=arrayDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator142.Tree);

					}
					break;

				default:
					if (cnt51 >= 1)
						goto loop51;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee51 = new EarlyExitException( 51, input );
					DebugRecognitionException(eee51);
					throw eee51;
				}
				cnt51++;
			}
			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: arrayDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 795:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
			{
				DebugLocation(795, 13);
				// Java.g:795:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(795, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

				DebugLocation(795, 37);
				if (!(stream_arrayDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_arrayDeclarator.HasNext )
				{
					DebugLocation(795, 37);
					adaptor.AddChild(root_1, stream_arrayDeclarator.NextTree());

				}
				stream_arrayDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaratorList", 34);
			LeaveRule("arrayDeclaratorList", 34);
			LeaveRule_arrayDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 34, arrayDeclaratorList_StartIndex); }

		}
		DebugLocation(796, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaratorList"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// Java.g:798:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
	[GrammarRule("arrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 35);
		TraceIn("arrayInitializer", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY143 = default(IToken);
		IToken COMMA145 = default(IToken);
		IToken COMMA147 = default(IToken);
		IToken RCURLY148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY143_tree = default(CommonTree);
		CommonTree COMMA145_tree = default(CommonTree);
		CommonTree COMMA147_tree = default(CommonTree);
		CommonTree RCURLY148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(798, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Java.g:799:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
			DebugEnterAlt(1);
			// Java.g:799:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
			{
			DebugLocation(799, 9);
			LCURLY143=(IToken)Match(input,LCURLY,Follow._LCURLY_in_arrayInitializer6877); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY143);

			DebugLocation(799, 16);
			// Java.g:799:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==BOOLEAN||LA54_1==BYTE||(LA54_1>=CHAR && LA54_1<=CHARACTER_LITERAL)||LA54_1==DEC||LA54_1==DECIMAL_LITERAL||LA54_1==DOUBLE||LA54_1==FALSE||(LA54_1>=FLOAT && LA54_1<=FLOATING_POINT_LITERAL)||LA54_1==HEX_LITERAL||LA54_1==IDENT||LA54_1==INC||LA54_1==INT||LA54_1==LCURLY||LA54_1==LESS_THAN||LA54_1==LOGICAL_NOT||(LA54_1>=LONG && LA54_1<=LPAREN)||LA54_1==MINUS||LA54_1==NEW||LA54_1==NOT||LA54_1==NULL||LA54_1==OCTAL_LITERAL||LA54_1==PLUS||LA54_1==SHORT||(LA54_1>=STRING_LITERAL && LA54_1<=SUPER)||LA54_1==THIS||LA54_1==TRUE||LA54_1==VOID))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:799:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
				{
				DebugLocation(799, 17);
				PushFollow(Follow._variableInitializer_in_arrayInitializer6880);
				variableInitializer144=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer144.Tree);
				DebugLocation(799, 37);
				// Java.g:799:37: ( COMMA variableInitializer )*
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_1 = input.LA(1);

					if ((LA52_1==COMMA))
					{
						int LA52_2 = input.LA(2);

						if ((LA52_2==BOOLEAN||LA52_2==BYTE||(LA52_2>=CHAR && LA52_2<=CHARACTER_LITERAL)||LA52_2==DEC||LA52_2==DECIMAL_LITERAL||LA52_2==DOUBLE||LA52_2==FALSE||(LA52_2>=FLOAT && LA52_2<=FLOATING_POINT_LITERAL)||LA52_2==HEX_LITERAL||LA52_2==IDENT||LA52_2==INC||LA52_2==INT||LA52_2==LCURLY||LA52_2==LESS_THAN||LA52_2==LOGICAL_NOT||(LA52_2>=LONG && LA52_2<=LPAREN)||LA52_2==MINUS||LA52_2==NEW||LA52_2==NOT||LA52_2==NULL||LA52_2==OCTAL_LITERAL||LA52_2==PLUS||LA52_2==SHORT||(LA52_2>=STRING_LITERAL && LA52_2<=SUPER)||LA52_2==THIS||LA52_2==TRUE||LA52_2==VOID))
						{
							alt52 = 1;
						}


					}


					} finally { DebugExitDecision(52); }
					switch ( alt52 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:799:38: COMMA variableInitializer
						{
						DebugLocation(799, 38);
						COMMA145=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6883); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA145);

						DebugLocation(799, 44);
						PushFollow(Follow._variableInitializer_in_arrayInitializer6885);
						variableInitializer146=variableInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer146.Tree);

						}
						break;

					default:
						goto loop52;
					}
				}

				loop52:
					;

				} finally { DebugExitSubRule(52); }

				DebugLocation(799, 66);
				// Java.g:799:66: ( COMMA )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==COMMA))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:799:66: COMMA
					{
					DebugLocation(799, 66);
					COMMA147=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6889); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA147);


					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(799, 75);
			RCURLY148=(IToken)Match(input,RCURLY,Follow._RCURLY_in_arrayInitializer6894); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY148);



			{
			// AST REWRITE
			// elements: variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 800:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
			{
				DebugLocation(800, 13);
				// Java.g:800:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(800, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_INITIALIZER, LCURLY143, "ARRAY_INITIALIZER"), root_1);

				DebugLocation(800, 63);
				// Java.g:800:63: ( variableInitializer )*
				while ( stream_variableInitializer.HasNext )
				{
					DebugLocation(800, 63);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayInitializer", 35);
			LeaveRule("arrayInitializer", 35);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 35, arrayInitializer_StartIndex); }

		}
		DebugLocation(801, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return retval;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_throwsClause();
	partial void LeaveRule_throwsClause();
	// $ANTLR start "throwsClause"
	// Java.g:803:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
	[GrammarRule("throwsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> throwsClause()
	{
		EnterRule_throwsClause();
		EnterRule("throwsClause", 36);
		TraceIn("throwsClause", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int throwsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken THROWS149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree THROWS149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THROWS=new RewriteRuleITokenStream(adaptor,"token THROWS");
		RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
		try { DebugEnterRule(GrammarFileName, "throwsClause");
		DebugLocation(803, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// Java.g:804:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
			DebugEnterAlt(1);
			// Java.g:804:9: THROWS qualifiedIdentList
			{
			DebugLocation(804, 9);
			THROWS149=(IToken)Match(input,THROWS,Follow._THROWS_in_throwsClause6932); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THROWS.Add(THROWS149);

			DebugLocation(804, 16);
			PushFollow(Follow._qualifiedIdentList_in_throwsClause6934);
			qualifiedIdentList150=qualifiedIdentList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentList.Add(qualifiedIdentList150.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 805:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
			{
				DebugLocation(805, 13);
				// Java.g:805:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(805, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THROWS_CLAUSE, THROWS149, "THROWS_CLAUSE"), root_1);

				DebugLocation(805, 55);
				adaptor.AddChild(root_1, stream_qualifiedIdentList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwsClause", 36);
			LeaveRule("throwsClause", 36);
			LeaveRule_throwsClause();
			if (state.backtracking > 0) { Memoize(input, 36, throwsClause_StartIndex); }

		}
		DebugLocation(806, 4);
		} finally { DebugExitRule(GrammarFileName, "throwsClause"); }
		return retval;

	}
	// $ANTLR end "throwsClause"

	partial void EnterRule_modifierList();
	partial void LeaveRule_modifierList();
	// $ANTLR start "modifierList"
	// Java.g:808:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
	[GrammarRule("modifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifierList()
	{
		EnterRule_modifierList();
		EnterRule("modifierList", 37);
		TraceIn("modifierList", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifier151 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
		try { DebugEnterRule(GrammarFileName, "modifierList");
		DebugLocation(808, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// Java.g:809:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
			DebugEnterAlt(1);
			// Java.g:809:9: ( modifier )*
			{
			DebugLocation(809, 9);
			// Java.g:809:9: ( modifier )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==AT))
				{
					int LA55_2 = input.LA(2);

					if ((LA55_2==IDENT))
					{
						alt55 = 1;
					}


				}
				else if ((LA55_1==ABSTRACT||LA55_1==FINAL||LA55_1==NATIVE||(LA55_1>=PRIVATE && LA55_1<=PUBLIC)||LA55_1==STATIC||LA55_1==STRICTFP||LA55_1==SYNCHRONIZED||LA55_1==TRANSIENT||LA55_1==VOLATILE))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:809:9: modifier
					{
					DebugLocation(809, 9);
					PushFollow(Follow._modifier_in_modifierList6971);
					modifier151=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_modifier.Add(modifier151.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: modifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 810:9: -> ^( MODIFIER_LIST ( modifier )* )
			{
				DebugLocation(810, 13);
				// Java.g:810:13: ^( MODIFIER_LIST ( modifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(810, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

				DebugLocation(810, 29);
				// Java.g:810:29: ( modifier )*
				while ( stream_modifier.HasNext )
				{
					DebugLocation(810, 29);
					adaptor.AddChild(root_1, stream_modifier.NextTree());

				}
				stream_modifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifierList", 37);
			LeaveRule("modifierList", 37);
			LeaveRule_modifierList();
			if (state.backtracking > 0) { Memoize(input, 37, modifierList_StartIndex); }

		}
		DebugLocation(811, 4);
		} finally { DebugExitRule(GrammarFileName, "modifierList"); }
		return retval;

	}
	// $ANTLR end "modifierList"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// Java.g:813:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
	[GrammarRule("modifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 38);
		TraceIn("modifier", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PUBLIC152 = default(IToken);
		IToken PROTECTED153 = default(IToken);
		IToken PRIVATE154 = default(IToken);
		IToken STATIC155 = default(IToken);
		IToken ABSTRACT156 = default(IToken);
		IToken NATIVE157 = default(IToken);
		IToken SYNCHRONIZED158 = default(IToken);
		IToken TRANSIENT159 = default(IToken);
		IToken VOLATILE160 = default(IToken);
		IToken STRICTFP161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifier162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PUBLIC152_tree = default(CommonTree);
		CommonTree PROTECTED153_tree = default(CommonTree);
		CommonTree PRIVATE154_tree = default(CommonTree);
		CommonTree STATIC155_tree = default(CommonTree);
		CommonTree ABSTRACT156_tree = default(CommonTree);
		CommonTree NATIVE157_tree = default(CommonTree);
		CommonTree SYNCHRONIZED158_tree = default(CommonTree);
		CommonTree TRANSIENT159_tree = default(CommonTree);
		CommonTree VOLATILE160_tree = default(CommonTree);
		CommonTree STRICTFP161_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(813, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// Java.g:814:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
			int alt56=11;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt56 = 1;
				}
				break;
			case PROTECTED:
				{
				alt56 = 2;
				}
				break;
			case PRIVATE:
				{
				alt56 = 3;
				}
				break;
			case STATIC:
				{
				alt56 = 4;
				}
				break;
			case ABSTRACT:
				{
				alt56 = 5;
				}
				break;
			case NATIVE:
				{
				alt56 = 6;
				}
				break;
			case SYNCHRONIZED:
				{
				alt56 = 7;
				}
				break;
			case TRANSIENT:
				{
				alt56 = 8;
				}
				break;
			case VOLATILE:
				{
				alt56 = 9;
				}
				break;
			case STRICTFP:
				{
				alt56 = 10;
				}
				break;
			case AT:
			case FINAL:
				{
				alt56 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:814:9: PUBLIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(814, 9);
				PUBLIC152=(IToken)Match(input,PUBLIC,Follow._PUBLIC_in_modifier7012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PUBLIC152_tree = (CommonTree)adaptor.Create(PUBLIC152);
				adaptor.AddChild(root_0, PUBLIC152_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:815:9: PROTECTED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(815, 9);
				PROTECTED153=(IToken)Match(input,PROTECTED,Follow._PROTECTED_in_modifier7022); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PROTECTED153_tree = (CommonTree)adaptor.Create(PROTECTED153);
				adaptor.AddChild(root_0, PROTECTED153_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:816:9: PRIVATE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(816, 9);
				PRIVATE154=(IToken)Match(input,PRIVATE,Follow._PRIVATE_in_modifier7032); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRIVATE154_tree = (CommonTree)adaptor.Create(PRIVATE154);
				adaptor.AddChild(root_0, PRIVATE154_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:817:9: STATIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(817, 9);
				STATIC155=(IToken)Match(input,STATIC,Follow._STATIC_in_modifier7042); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC155_tree = (CommonTree)adaptor.Create(STATIC155);
				adaptor.AddChild(root_0, STATIC155_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:818:9: ABSTRACT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(818, 9);
				ABSTRACT156=(IToken)Match(input,ABSTRACT,Follow._ABSTRACT_in_modifier7052); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ABSTRACT156_tree = (CommonTree)adaptor.Create(ABSTRACT156);
				adaptor.AddChild(root_0, ABSTRACT156_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:819:9: NATIVE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(819, 9);
				NATIVE157=(IToken)Match(input,NATIVE,Follow._NATIVE_in_modifier7062); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NATIVE157_tree = (CommonTree)adaptor.Create(NATIVE157);
				adaptor.AddChild(root_0, NATIVE157_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:820:9: SYNCHRONIZED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(820, 9);
				SYNCHRONIZED158=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifier7072); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SYNCHRONIZED158_tree = (CommonTree)adaptor.Create(SYNCHRONIZED158);
				adaptor.AddChild(root_0, SYNCHRONIZED158_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:821:9: TRANSIENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(821, 9);
				TRANSIENT159=(IToken)Match(input,TRANSIENT,Follow._TRANSIENT_in_modifier7082); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRANSIENT159_tree = (CommonTree)adaptor.Create(TRANSIENT159);
				adaptor.AddChild(root_0, TRANSIENT159_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:822:9: VOLATILE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(822, 9);
				VOLATILE160=(IToken)Match(input,VOLATILE,Follow._VOLATILE_in_modifier7092); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VOLATILE160_tree = (CommonTree)adaptor.Create(VOLATILE160);
				adaptor.AddChild(root_0, VOLATILE160_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:823:9: STRICTFP
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(823, 9);
				STRICTFP161=(IToken)Match(input,STRICTFP,Follow._STRICTFP_in_modifier7102); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRICTFP161_tree = (CommonTree)adaptor.Create(STRICTFP161);
				adaptor.AddChild(root_0, STRICTFP161_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:824:9: localModifier
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(824, 9);
				PushFollow(Follow._localModifier_in_modifier7112);
				localModifier162=localModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localModifier162.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier", 38);
			LeaveRule("modifier", 38);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 38, modifier_StartIndex); }

		}
		DebugLocation(825, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_localModifierList();
	partial void LeaveRule_localModifierList();
	// $ANTLR start "localModifierList"
	// Java.g:827:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
	[GrammarRule("localModifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifierList()
	{
		EnterRule_localModifierList();
		EnterRule("localModifierList", 39);
		TraceIn("localModifierList", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifier163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
		try { DebugEnterRule(GrammarFileName, "localModifierList");
		DebugLocation(827, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// Java.g:828:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
			DebugEnterAlt(1);
			// Java.g:828:9: ( localModifier )*
			{
			DebugLocation(828, 9);
			// Java.g:828:9: ( localModifier )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==AT||LA57_1==FINAL))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:828:9: localModifier
					{
					DebugLocation(828, 9);
					PushFollow(Follow._localModifier_in_localModifierList7131);
					localModifier163=localModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_localModifier.Add(localModifier163.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }



			{
			// AST REWRITE
			// elements: localModifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 829:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
			{
				DebugLocation(829, 12);
				// Java.g:829:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(829, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

				DebugLocation(829, 34);
				// Java.g:829:34: ( localModifier )*
				while ( stream_localModifier.HasNext )
				{
					DebugLocation(829, 34);
					adaptor.AddChild(root_1, stream_localModifier.NextTree());

				}
				stream_localModifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifierList", 39);
			LeaveRule("localModifierList", 39);
			LeaveRule_localModifierList();
			if (state.backtracking > 0) { Memoize(input, 39, localModifierList_StartIndex); }

		}
		DebugLocation(830, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifierList"); }
		return retval;

	}
	// $ANTLR end "localModifierList"

	partial void EnterRule_localModifier();
	partial void LeaveRule_localModifier();
	// $ANTLR start "localModifier"
	// Java.g:832:1: localModifier : ( FINAL | annotation );
	[GrammarRule("localModifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifier()
	{
		EnterRule_localModifier();
		EnterRule("localModifier", 40);
		TraceIn("localModifier", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINAL164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotation165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINAL164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "localModifier");
		DebugLocation(832, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Java.g:833:5: ( FINAL | annotation )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==FINAL))
			{
				alt58 = 1;
			}
			else if ((LA58_1==AT))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:833:9: FINAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(833, 9);
				FINAL164=(IToken)Match(input,FINAL,Follow._FINAL_in_localModifier7172); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FINAL164_tree = (CommonTree)adaptor.Create(FINAL164);
				adaptor.AddChild(root_0, FINAL164_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:834:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(834, 9);
				PushFollow(Follow._annotation_in_localModifier7182);
				annotation165=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation165.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifier", 40);
			LeaveRule("localModifier", 40);
			LeaveRule_localModifier();
			if (state.backtracking > 0) { Memoize(input, 40, localModifier_StartIndex); }

		}
		DebugLocation(835, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifier"); }
		return retval;

	}
	// $ANTLR end "localModifier"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// Java.g:837:1: type : ( simpleType | objectType );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 41);
		TraceIn("type", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> simpleType166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> objectType167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(837, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// Java.g:838:5: ( simpleType | objectType )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==BOOLEAN||LA59_1==BYTE||LA59_1==CHAR||LA59_1==DOUBLE||LA59_1==FLOAT||LA59_1==INT||LA59_1==LONG||LA59_1==SHORT))
			{
				alt59 = 1;
			}
			else if ((LA59_1==IDENT))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:838:9: simpleType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(838, 9);
				PushFollow(Follow._simpleType_in_type7201);
				simpleType166=simpleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleType166.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:839:9: objectType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(839, 9);
				PushFollow(Follow._objectType_in_type7211);
				objectType167=objectType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectType167.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 41);
			LeaveRule("type", 41);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 41, type_StartIndex); }

		}
		DebugLocation(840, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_simpleType();
	partial void LeaveRule_simpleType();
	// $ANTLR start "simpleType"
	// Java.g:842:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
	[GrammarRule("simpleType")]
	private AstParserRuleReturnScope<CommonTree, IToken> simpleType()
	{
		EnterRule_simpleType();
		EnterRule("simpleType", 42);
		TraceIn("simpleType", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int simpleType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> primitiveType168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "simpleType");
		DebugLocation(842, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// Java.g:843:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// Java.g:843:9: primitiveType ( arrayDeclaratorList )?
			{
			DebugLocation(843, 9);
			PushFollow(Follow._primitiveType_in_simpleType7231);
			primitiveType168=primitiveType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primitiveType.Add(primitiveType168.Tree);
			DebugLocation(843, 23);
			// Java.g:843:23: ( arrayDeclaratorList )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==LBRACK))
			{
				int LA60_2 = input.LA(2);

				if ((LA60_2==RBRACK))
				{
					int LA60_3 = input.LA(3);

					if ((EvaluatePredicate(synpred78_Java_fragment)))
					{
						alt60 = 1;
					}
				}
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:843:23: arrayDeclaratorList
				{
				DebugLocation(843, 23);
				PushFollow(Follow._arrayDeclaratorList_in_simpleType7233);
				arrayDeclaratorList169=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList169.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }



			{
			// AST REWRITE
			// elements: primitiveType, arrayDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 844:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
			{
				DebugLocation(844, 13);
				// Java.g:844:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(844, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(844, 20);
				adaptor.AddChild(root_1, stream_primitiveType.NextTree());
				DebugLocation(844, 34);
				// Java.g:844:34: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(844, 34);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleType", 42);
			LeaveRule("simpleType", 42);
			LeaveRule_simpleType();
			if (state.backtracking > 0) { Memoize(input, 42, simpleType_StartIndex); }

		}
		DebugLocation(845, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleType"); }
		return retval;

	}
	// $ANTLR end "simpleType"

	partial void EnterRule_objectType();
	partial void LeaveRule_objectType();
	// $ANTLR start "objectType"
	// Java.g:847:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectType")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectType()
	{
		EnterRule_objectType();
		EnterRule("objectType", 43);
		TraceIn("objectType", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "objectType");
		DebugLocation(847, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// Java.g:848:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// Java.g:848:9: qualifiedTypeIdent ( arrayDeclaratorList )?
			{
			DebugLocation(848, 9);
			PushFollow(Follow._qualifiedTypeIdent_in_objectType7280);
			qualifiedTypeIdent170=qualifiedTypeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdent.Add(qualifiedTypeIdent170.Tree);
			DebugLocation(848, 28);
			// Java.g:848:28: ( arrayDeclaratorList )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==LBRACK))
			{
				int LA61_2 = input.LA(2);

				if ((EvaluatePredicate(synpred79_Java_fragment)))
				{
					alt61 = 1;
				}
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:848:28: arrayDeclaratorList
				{
				DebugLocation(848, 28);
				PushFollow(Follow._arrayDeclaratorList_in_objectType7282);
				arrayDeclaratorList171=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList171.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: qualifiedTypeIdent, arrayDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 849:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
			{
				DebugLocation(849, 13);
				// Java.g:849:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(849, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(849, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdent.NextTree());
				DebugLocation(849, 39);
				// Java.g:849:39: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(849, 39);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectType", 43);
			LeaveRule("objectType", 43);
			LeaveRule_objectType();
			if (state.backtracking > 0) { Memoize(input, 43, objectType_StartIndex); }

		}
		DebugLocation(850, 4);
		} finally { DebugExitRule(GrammarFileName, "objectType"); }
		return retval;

	}
	// $ANTLR end "objectType"

	partial void EnterRule_objectTypeSimplified();
	partial void LeaveRule_objectTypeSimplified();
	// $ANTLR start "objectTypeSimplified"
	// Java.g:852:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectTypeSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectTypeSimplified()
	{
		EnterRule_objectTypeSimplified();
		EnterRule("objectTypeSimplified", 44);
		TraceIn("objectTypeSimplified", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectTypeSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList173 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "objectTypeSimplified");
		DebugLocation(852, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// Java.g:853:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// Java.g:853:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
			{
			DebugLocation(853, 9);
			PushFollow(Follow._qualifiedTypeIdentSimplified_in_objectTypeSimplified7322);
			qualifiedTypeIdentSimplified172=qualifiedTypeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified172.Tree);
			DebugLocation(853, 38);
			// Java.g:853:38: ( arrayDeclaratorList )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==LBRACK))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:853:38: arrayDeclaratorList
				{
				DebugLocation(853, 38);
				PushFollow(Follow._arrayDeclaratorList_in_objectTypeSimplified7324);
				arrayDeclaratorList173=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList173.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: qualifiedTypeIdentSimplified, arrayDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 854:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
			{
				DebugLocation(854, 13);
				// Java.g:854:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(854, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(854, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
				DebugLocation(854, 49);
				// Java.g:854:49: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(854, 49);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectTypeSimplified", 44);
			LeaveRule("objectTypeSimplified", 44);
			LeaveRule_objectTypeSimplified();
			if (state.backtracking > 0) { Memoize(input, 44, objectTypeSimplified_StartIndex); }

		}
		DebugLocation(855, 4);
		} finally { DebugExitRule(GrammarFileName, "objectTypeSimplified"); }
		return retval;

	}
	// $ANTLR end "objectTypeSimplified"

	partial void EnterRule_qualifiedTypeIdent();
	partial void LeaveRule_qualifiedTypeIdent();
	// $ANTLR start "qualifiedTypeIdent"
	// Java.g:857:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
	[GrammarRule("qualifiedTypeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent()
	{
		EnterRule_qualifiedTypeIdent();
		EnterRule("qualifiedTypeIdent", 45);
		TraceIn("qualifiedTypeIdent", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdent");
		DebugLocation(857, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// Java.g:858:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
			DebugEnterAlt(1);
			// Java.g:858:9: typeIdent ( DOT typeIdent )*
			{
			DebugLocation(858, 9);
			PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7364);
			typeIdent174=typeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdent.Add(typeIdent174.Tree);
			DebugLocation(858, 19);
			// Java.g:858:19: ( DOT typeIdent )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_1 = input.LA(1);

				if ((LA63_1==DOT))
				{
					int LA63_2 = input.LA(2);

					if ((EvaluatePredicate(synpred81_Java_fragment)))
					{
						alt63 = 1;
					}


				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:858:20: DOT typeIdent
					{
					DebugLocation(858, 20);
					DOT175=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdent7367); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT175);

					DebugLocation(858, 24);
					PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7369);
					typeIdent176=typeIdent();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdent.Add(typeIdent176.Tree);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }



			{
			// AST REWRITE
			// elements: typeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 859:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
			{
				DebugLocation(859, 13);
				// Java.g:859:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(859, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(859, 36);
				if (!(stream_typeIdent.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdent.HasNext )
				{
					DebugLocation(859, 36);
					adaptor.AddChild(root_1, stream_typeIdent.NextTree());

				}
				stream_typeIdent.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdent", 45);
			LeaveRule("qualifiedTypeIdent", 45);
			LeaveRule_qualifiedTypeIdent();
			if (state.backtracking > 0) { Memoize(input, 45, qualifiedTypeIdent_StartIndex); }

		}
		DebugLocation(860, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdent"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdent"

	partial void EnterRule_qualifiedTypeIdentSimplified();
	partial void LeaveRule_qualifiedTypeIdentSimplified();
	// $ANTLR start "qualifiedTypeIdentSimplified"
	// Java.g:862:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
	[GrammarRule("qualifiedTypeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified()
	{
		EnterRule_qualifiedTypeIdentSimplified();
		EnterRule("qualifiedTypeIdentSimplified", 46);
		TraceIn("qualifiedTypeIdentSimplified", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT178 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT178_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdentSimplified");
		DebugLocation(862, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// Java.g:863:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
			DebugEnterAlt(1);
			// Java.g:863:9: typeIdentSimplified ( DOT typeIdentSimplified )*
			{
			DebugLocation(863, 9);
			PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7409);
			typeIdentSimplified177=typeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified177.Tree);
			DebugLocation(863, 29);
			// Java.g:863:29: ( DOT typeIdentSimplified )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==DOT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:863:30: DOT typeIdentSimplified
					{
					DebugLocation(863, 30);
					DOT178=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdentSimplified7412); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT178);

					DebugLocation(863, 34);
					PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7414);
					typeIdentSimplified179=typeIdentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified179.Tree);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }



			{
			// AST REWRITE
			// elements: typeIdentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 864:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
			{
				DebugLocation(864, 13);
				// Java.g:864:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(864, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(864, 36);
				if (!(stream_typeIdentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdentSimplified.HasNext )
				{
					DebugLocation(864, 36);
					adaptor.AddChild(root_1, stream_typeIdentSimplified.NextTree());

				}
				stream_typeIdentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdentSimplified", 46);
			LeaveRule("qualifiedTypeIdentSimplified", 46);
			LeaveRule_qualifiedTypeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex); }

		}
		DebugLocation(865, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdentSimplified"

	partial void EnterRule_typeIdent();
	partial void LeaveRule_typeIdent();
	// $ANTLR start "typeIdent"
	// Java.g:867:1: typeIdent : IDENT ^ ( genericTypeArgumentList )? ;
	[GrammarRule("typeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdent()
	{
		EnterRule_typeIdent();
		EnterRule("typeIdent", 47);
		TraceIn("typeIdent", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT180 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT180_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdent");
		DebugLocation(867, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// Java.g:868:5: ( IDENT ^ ( genericTypeArgumentList )? )
			DebugEnterAlt(1);
			// Java.g:868:9: IDENT ^ ( genericTypeArgumentList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(868, 14);
			IDENT180=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdent7454); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT180_tree = (CommonTree)adaptor.Create(IDENT180);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT180_tree, root_0);
			}
			DebugLocation(868, 16);
			// Java.g:868:16: ( genericTypeArgumentList )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_1 = input.LA(1);

			if ((LA65_1==LESS_THAN))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:868:16: genericTypeArgumentList
				{
				DebugLocation(868, 16);
				PushFollow(Follow._genericTypeArgumentList_in_typeIdent7457);
				genericTypeArgumentList181=genericTypeArgumentList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentList181.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdent", 47);
			LeaveRule("typeIdent", 47);
			LeaveRule_typeIdent();
			if (state.backtracking > 0) { Memoize(input, 47, typeIdent_StartIndex); }

		}
		DebugLocation(869, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdent"); }
		return retval;

	}
	// $ANTLR end "typeIdent"

	partial void EnterRule_typeIdentSimplified();
	partial void LeaveRule_typeIdentSimplified();
	// $ANTLR start "typeIdentSimplified"
	// Java.g:871:1: typeIdentSimplified : IDENT ^ ( genericTypeArgumentListSimplified )? ;
	[GrammarRule("typeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified()
	{
		EnterRule_typeIdentSimplified();
		EnterRule("typeIdentSimplified", 48);
		TraceIn("typeIdentSimplified", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT182 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT182_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdentSimplified");
		DebugLocation(871, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// Java.g:872:5: ( IDENT ^ ( genericTypeArgumentListSimplified )? )
			DebugEnterAlt(1);
			// Java.g:872:9: IDENT ^ ( genericTypeArgumentListSimplified )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(872, 14);
			IDENT182=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdentSimplified7477); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT182_tree = (CommonTree)adaptor.Create(IDENT182);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT182_tree, root_0);
			}
			DebugLocation(872, 16);
			// Java.g:872:16: ( genericTypeArgumentListSimplified )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if ((LA66_1==LESS_THAN))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:872:16: genericTypeArgumentListSimplified
				{
				DebugLocation(872, 16);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_typeIdentSimplified7480);
				genericTypeArgumentListSimplified183=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentListSimplified183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdentSimplified", 48);
			LeaveRule("typeIdentSimplified", 48);
			LeaveRule_typeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 48, typeIdentSimplified_StartIndex); }

		}
		DebugLocation(873, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "typeIdentSimplified"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// Java.g:875:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<CommonTree, IToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 49);
		TraceIn("primitiveType", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set184 = default(IToken);

		CommonTree set184_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(875, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// Java.g:876:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(876, 5);

			set184=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set184));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 49);
			LeaveRule("primitiveType", 49);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 49, primitiveType_StartIndex); }

		}
		DebugLocation(884, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_genericTypeArgumentList();
	partial void LeaveRule_genericTypeArgumentList();
	// $ANTLR start "genericTypeArgumentList"
	// Java.g:886:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
	[GrammarRule("genericTypeArgumentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList()
	{
		EnterRule_genericTypeArgumentList();
		EnterRule("genericTypeArgumentList", 50);
		TraceIn("genericTypeArgumentList", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN185 = default(IToken);
		IToken COMMA187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		JavaParser.genericTypeListClosing_return genericTypeListClosing189 = default(JavaParser.genericTypeListClosing_return);

		CommonTree LESS_THAN185_tree = default(CommonTree);
		CommonTree COMMA187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentList");
		DebugLocation(886, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// Java.g:887:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
			DebugEnterAlt(1);
			// Java.g:887:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
			{
			DebugLocation(887, 9);
			LESS_THAN185=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentList7589); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN185);

			DebugLocation(887, 19);
			PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7591);
			genericTypeArgument186=genericTypeArgument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument186.Tree);
			DebugLocation(887, 39);
			// Java.g:887:39: ( COMMA genericTypeArgument )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==COMMA))
				{
					int LA67_2 = input.LA(2);

					if ((EvaluatePredicate(synpred92_Java_fragment)))
					{
						alt67 = 1;
					}


				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:887:40: COMMA genericTypeArgument
					{
					DebugLocation(887, 40);
					COMMA187=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentList7594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA187);

					DebugLocation(887, 46);
					PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7596);
					genericTypeArgument188=genericTypeArgument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument188.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(887, 68);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentList7600);
			genericTypeListClosing189=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing189.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgument
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 888:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
			{
				DebugLocation(888, 13);
				// Java.g:888:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(888, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN185, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(888, 74);
				if (!(stream_genericTypeArgument.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgument.HasNext )
				{
					DebugLocation(888, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgument.NextTree());

				}
				stream_genericTypeArgument.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentList", 50);
			LeaveRule("genericTypeArgumentList", 50);
			LeaveRule_genericTypeArgumentList();
			if (state.backtracking > 0) { Memoize(input, 50, genericTypeArgumentList_StartIndex); }

		}
		DebugLocation(889, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentList"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentList"

	partial void EnterRule_genericTypeArgument();
	partial void LeaveRule_genericTypeArgument();
	// $ANTLR start "genericTypeArgument"
	// Java.g:891:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
	[GrammarRule("genericTypeArgument")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument()
	{
		EnterRule_genericTypeArgument();
		EnterRule("genericTypeArgument", 51);
		TraceIn("genericTypeArgument", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgument_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_QUESTION=new RewriteRuleITokenStream(adaptor,"token QUESTION");
		RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgument");
		DebugLocation(891, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// Java.g:892:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==BOOLEAN||LA69_1==BYTE||LA69_1==CHAR||LA69_1==DOUBLE||LA69_1==FLOAT||LA69_1==IDENT||LA69_1==INT||LA69_1==LONG||LA69_1==SHORT))
			{
				alt69 = 1;
			}
			else if ((LA69_1==QUESTION))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:892:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(892, 9);
				PushFollow(Follow._type_in_genericTypeArgument7638);
				type190=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type190.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:893:9: QUESTION ( genericWildcardBoundType )?
				{
				DebugLocation(893, 9);
				QUESTION191=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgument7648); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_QUESTION.Add(QUESTION191);

				DebugLocation(893, 18);
				// Java.g:893:18: ( genericWildcardBoundType )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==EXTENDS))
				{
					int LA68_2 = input.LA(2);

					if ((LA68_2==BOOLEAN||LA68_2==BYTE||LA68_2==CHAR||LA68_2==DOUBLE||LA68_2==FLOAT||LA68_2==INT||LA68_2==LONG||LA68_2==SHORT))
					{
						int LA68_3 = input.LA(3);

						if ((EvaluatePredicate(synpred94_Java_fragment)))
						{
							alt68 = 1;
						}
					}
					else if ((LA68_2==IDENT))
					{
						int LA68_3 = input.LA(3);

						if ((EvaluatePredicate(synpred94_Java_fragment)))
						{
							alt68 = 1;
						}
					}
				}
				else if ((LA68_1==SUPER))
				{
					int LA68_2 = input.LA(2);

					if ((LA68_2==BOOLEAN||LA68_2==BYTE||LA68_2==CHAR||LA68_2==DOUBLE||LA68_2==FLOAT||LA68_2==IDENT||LA68_2==INT||LA68_2==LONG||LA68_2==SHORT))
					{
						alt68 = 1;
					}
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:893:18: genericWildcardBoundType
					{
					DebugLocation(893, 18);
					PushFollow(Follow._genericWildcardBoundType_in_genericTypeArgument7650);
					genericWildcardBoundType192=genericWildcardBoundType();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericWildcardBoundType.Add(genericWildcardBoundType192.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(68); }



				{
				// AST REWRITE
				// elements: QUESTION, genericWildcardBoundType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 894:9: -> ^( QUESTION ( genericWildcardBoundType )? )
				{
					DebugLocation(894, 13);
					// Java.g:894:13: ^( QUESTION ( genericWildcardBoundType )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(894, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_QUESTION.NextNode(), root_1);

					DebugLocation(894, 24);
					// Java.g:894:24: ( genericWildcardBoundType )?
					if (stream_genericWildcardBoundType.HasNext)
					{
						DebugLocation(894, 24);
						adaptor.AddChild(root_1, stream_genericWildcardBoundType.NextTree());

					}
					stream_genericWildcardBoundType.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgument", 51);
			LeaveRule("genericTypeArgument", 51);
			LeaveRule_genericTypeArgument();
			if (state.backtracking > 0) { Memoize(input, 51, genericTypeArgument_StartIndex); }

		}
		DebugLocation(895, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgument"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgument"

	partial void EnterRule_genericWildcardBoundType();
	partial void LeaveRule_genericWildcardBoundType();
	// $ANTLR start "genericWildcardBoundType"
	// Java.g:897:1: genericWildcardBoundType : ( EXTENDS | SUPER ) ^ type ;
	[GrammarRule("genericWildcardBoundType")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType()
	{
		EnterRule_genericWildcardBoundType();
		EnterRule("genericWildcardBoundType", 52);
		TraceIn("genericWildcardBoundType", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericWildcardBoundType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set193 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set193_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericWildcardBoundType");
		DebugLocation(897, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// Java.g:898:5: ( ( EXTENDS | SUPER ) ^ type )
			DebugEnterAlt(1);
			// Java.g:898:9: ( EXTENDS | SUPER ) ^ type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(898, 26);

			set193=(IToken)input.LT(1);
			set193=(IToken)input.LT(1);
			if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set193), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(898, 28);
			PushFollow(Follow._type_in_genericWildcardBoundType7701);
			type194=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type194.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericWildcardBoundType", 52);
			LeaveRule("genericWildcardBoundType", 52);
			LeaveRule_genericWildcardBoundType();
			if (state.backtracking > 0) { Memoize(input, 52, genericWildcardBoundType_StartIndex); }

		}
		DebugLocation(899, 4);
		} finally { DebugExitRule(GrammarFileName, "genericWildcardBoundType"); }
		return retval;

	}
	// $ANTLR end "genericWildcardBoundType"

	partial void EnterRule_genericTypeArgumentListSimplified();
	partial void LeaveRule_genericTypeArgumentListSimplified();
	// $ANTLR start "genericTypeArgumentListSimplified"
	// Java.g:901:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
	[GrammarRule("genericTypeArgumentListSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified()
	{
		EnterRule_genericTypeArgumentListSimplified();
		EnterRule("genericTypeArgumentListSimplified", 53);
		TraceIn("genericTypeArgumentListSimplified", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentListSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN195 = default(IToken);
		IToken COMMA197 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		JavaParser.genericTypeListClosing_return genericTypeListClosing199 = default(JavaParser.genericTypeListClosing_return);

		CommonTree LESS_THAN195_tree = default(CommonTree);
		CommonTree COMMA197_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentListSimplified");
		DebugLocation(901, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// Java.g:902:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
			DebugEnterAlt(1);
			// Java.g:902:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
			{
			DebugLocation(902, 9);
			LESS_THAN195=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentListSimplified7720); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN195);

			DebugLocation(902, 19);
			PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7722);
			genericTypeArgumentSimplified196=genericTypeArgumentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified196.Tree);
			DebugLocation(902, 49);
			// Java.g:902:49: ( COMMA genericTypeArgumentSimplified )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==COMMA))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:902:50: COMMA genericTypeArgumentSimplified
					{
					DebugLocation(902, 50);
					COMMA197=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentListSimplified7725); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA197);

					DebugLocation(902, 56);
					PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7727);
					genericTypeArgumentSimplified198=genericTypeArgumentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified198.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }

			DebugLocation(902, 88);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentListSimplified7731);
			genericTypeListClosing199=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing199.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgumentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 903:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
			{
				DebugLocation(903, 13);
				// Java.g:903:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(903, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN195, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(903, 74);
				if (!(stream_genericTypeArgumentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgumentSimplified.HasNext )
				{
					DebugLocation(903, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgumentSimplified.NextTree());

				}
				stream_genericTypeArgumentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentListSimplified", 53);
			LeaveRule("genericTypeArgumentListSimplified", 53);
			LeaveRule_genericTypeArgumentListSimplified();
			if (state.backtracking > 0) { Memoize(input, 53, genericTypeArgumentListSimplified_StartIndex); }

		}
		DebugLocation(904, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentListSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentListSimplified"

	partial void EnterRule_genericTypeArgumentSimplified();
	partial void LeaveRule_genericTypeArgumentSimplified();
	// $ANTLR start "genericTypeArgumentSimplified"
	// Java.g:906:1: genericTypeArgumentSimplified : ( type | QUESTION );
	[GrammarRule("genericTypeArgumentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified()
	{
		EnterRule_genericTypeArgumentSimplified();
		EnterRule("genericTypeArgumentSimplified", 54);
		TraceIn("genericTypeArgumentSimplified", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION201 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION201_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentSimplified");
		DebugLocation(906, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// Java.g:907:5: ( type | QUESTION )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if ((LA71_1==BOOLEAN||LA71_1==BYTE||LA71_1==CHAR||LA71_1==DOUBLE||LA71_1==FLOAT||LA71_1==IDENT||LA71_1==INT||LA71_1==LONG||LA71_1==SHORT))
			{
				alt71 = 1;
			}
			else if ((LA71_1==QUESTION))
			{
				alt71 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:907:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(907, 9);
				PushFollow(Follow._type_in_genericTypeArgumentSimplified7773);
				type200=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type200.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:908:9: QUESTION
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(908, 9);
				QUESTION201=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgumentSimplified7783); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION201_tree = (CommonTree)adaptor.Create(QUESTION201);
				adaptor.AddChild(root_0, QUESTION201_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentSimplified", 54);
			LeaveRule("genericTypeArgumentSimplified", 54);
			LeaveRule_genericTypeArgumentSimplified();
			if (state.backtracking > 0) { Memoize(input, 54, genericTypeArgumentSimplified_StartIndex); }

		}
		DebugLocation(909, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentSimplified"

	partial void EnterRule_qualifiedIdentList();
	partial void LeaveRule_qualifiedIdentList();
	// $ANTLR start "qualifiedIdentList"
	// Java.g:911:1: qualifiedIdentList : qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* ;
	[GrammarRule("qualifiedIdentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList()
	{
		EnterRule_qualifiedIdentList();
		EnterRule("qualifiedIdentList", 55);
		TraceIn("qualifiedIdentList", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA203 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA203_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentList");
		DebugLocation(911, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// Java.g:912:5: ( qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* )
			DebugEnterAlt(1);
			// Java.g:912:9: qualifiedIdentifier ( COMMA ! qualifiedIdentifier )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(912, 9);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7806);
			qualifiedIdentifier202=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier202.Tree);
			DebugLocation(912, 29);
			// Java.g:912:29: ( COMMA ! qualifiedIdentifier )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_1 = input.LA(1);

				if ((LA72_1==COMMA))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:912:30: COMMA ! qualifiedIdentifier
					{
					DebugLocation(912, 35);
					COMMA203=(IToken)Match(input,COMMA,Follow._COMMA_in_qualifiedIdentList7809); if (state.failed) return retval;
					DebugLocation(912, 37);
					PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7812);
					qualifiedIdentifier204=qualifiedIdentifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier204.Tree);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentList", 55);
			LeaveRule("qualifiedIdentList", 55);
			LeaveRule_qualifiedIdentList();
			if (state.backtracking > 0) { Memoize(input, 55, qualifiedIdentList_StartIndex); }

		}
		DebugLocation(913, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentList"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentList"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// Java.g:915:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
	[GrammarRule("formalParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 56);
		TraceIn("formalParameterList", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN205 = default(IToken);
		IToken COMMA207 = default(IToken);
		IToken COMMA209 = default(IToken);
		IToken RPAREN212 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN205_tree = default(CommonTree);
		CommonTree COMMA207_tree = default(CommonTree);
		CommonTree COMMA209_tree = default(CommonTree);
		CommonTree RPAREN212_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
		RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(915, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// Java.g:916:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
			DebugEnterAlt(1);
			// Java.g:916:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
			{
			DebugLocation(916, 9);
			LPAREN205=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameterList7837); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN205);

			DebugLocation(917, 9);
			// Java.g:917:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
			int alt75=3;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred102_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred102_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred102_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred102_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RPAREN:
				{
				alt75 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:918:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
				{
				DebugLocation(918, 13);
				PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7865);
				formalParameterStandardDecl206=formalParameterStandardDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl206.Tree);
				DebugLocation(918, 41);
				// Java.g:918:41: ( COMMA formalParameterStandardDecl )*
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_1 = input.LA(1);

					if ((LA73_1==COMMA))
					{
						int LA73_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt73 = 1;
						}


					}


					} finally { DebugExitDecision(73); }
					switch ( alt73 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:918:42: COMMA formalParameterStandardDecl
						{
						DebugLocation(918, 42);
						COMMA207=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7868); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA207);

						DebugLocation(918, 48);
						PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7870);
						formalParameterStandardDecl208=formalParameterStandardDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl208.Tree);

						}
						break;

					default:
						goto loop73;
					}
				}

				loop73:
					;

				} finally { DebugExitSubRule(73); }

				DebugLocation(918, 78);
				// Java.g:918:78: ( COMMA formalParameterVarArgDecl )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==COMMA))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:918:79: COMMA formalParameterVarArgDecl
					{
					DebugLocation(918, 79);
					COMMA209=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7875); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA209);

					DebugLocation(918, 85);
					PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7877);
					formalParameterVarArgDecl210=formalParameterVarArgDecl();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl210.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(74); }



				{
				// AST REWRITE
				// elements: formalParameterStandardDecl, formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 919:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
				{
					DebugLocation(919, 17);
					// Java.g:919:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(919, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(919, 67);
					if (!(stream_formalParameterStandardDecl.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_formalParameterStandardDecl.HasNext )
					{
						DebugLocation(919, 67);
						adaptor.AddChild(root_1, stream_formalParameterStandardDecl.NextTree());

					}
					stream_formalParameterStandardDecl.Reset();
					DebugLocation(919, 96);
					// Java.g:919:96: ( formalParameterVarArgDecl )?
					if (stream_formalParameterVarArgDecl.HasNext)
					{
						DebugLocation(919, 96);
						adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					}
					stream_formalParameterVarArgDecl.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:921:13: formalParameterVarArgDecl
				{
				DebugLocation(921, 13);
				PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7934);
				formalParameterVarArgDecl211=formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl211.Tree);


				{
				// AST REWRITE
				// elements: formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 922:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
				{
					DebugLocation(922, 17);
					// Java.g:922:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(922, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(922, 67);
					adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:924:13: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 924:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
				{
					DebugLocation(924, 17);
					// Java.g:924:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(924, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(926, 9);
			RPAREN212=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameterList8011); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN212);


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 56);
			LeaveRule("formalParameterList", 56);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 56, formalParameterList_StartIndex); }

		}
		DebugLocation(927, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameterStandardDecl();
	partial void LeaveRule_formalParameterStandardDecl();
	// $ANTLR start "formalParameterStandardDecl"
	// Java.g:929:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterStandardDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl()
	{
		EnterRule_formalParameterStandardDecl();
		EnterRule("formalParameterStandardDecl", 57);
		TraceIn("formalParameterStandardDecl", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterStandardDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId215 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "formalParameterStandardDecl");
		DebugLocation(929, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// Java.g:930:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// Java.g:930:9: localModifierList type variableDeclaratorId
			{
			DebugLocation(930, 9);
			PushFollow(Follow._localModifierList_in_formalParameterStandardDecl8034);
			localModifierList213=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList213.Tree);
			DebugLocation(930, 27);
			PushFollow(Follow._type_in_formalParameterStandardDecl8036);
			type214=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type214.Tree);
			DebugLocation(930, 32);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterStandardDecl8038);
			variableDeclaratorId215=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId215.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 931:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(931, 13);
				// Java.g:931:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(931, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

				DebugLocation(931, 37);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(931, 55);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(931, 60);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterStandardDecl", 57);
			LeaveRule("formalParameterStandardDecl", 57);
			LeaveRule_formalParameterStandardDecl();
			if (state.backtracking > 0) { Memoize(input, 57, formalParameterStandardDecl_StartIndex); }

		}
		DebugLocation(932, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterStandardDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterStandardDecl"

	partial void EnterRule_formalParameterVarArgDecl();
	partial void LeaveRule_formalParameterVarArgDecl();
	// $ANTLR start "formalParameterVarArgDecl"
	// Java.g:934:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterVarArgDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl()
	{
		EnterRule_formalParameterVarArgDecl();
		EnterRule("formalParameterVarArgDecl", 58);
		TraceIn("formalParameterVarArgDecl", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterVarArgDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ELLIPSIS218 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ELLIPSIS218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ELLIPSIS=new RewriteRuleITokenStream(adaptor,"token ELLIPSIS");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "formalParameterVarArgDecl");
		DebugLocation(934, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// Java.g:935:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// Java.g:935:9: localModifierList type ELLIPSIS variableDeclaratorId
			{
			DebugLocation(935, 9);
			PushFollow(Follow._localModifierList_in_formalParameterVarArgDecl8082);
			localModifierList216=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList216.Tree);
			DebugLocation(935, 27);
			PushFollow(Follow._type_in_formalParameterVarArgDecl8084);
			type217=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type217.Tree);
			DebugLocation(935, 32);
			ELLIPSIS218=(IToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_formalParameterVarArgDecl8086); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELLIPSIS.Add(ELLIPSIS218);

			DebugLocation(935, 41);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterVarArgDecl8088);
			variableDeclaratorId219=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId219.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 936:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(936, 13);
				// Java.g:936:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(936, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

				DebugLocation(936, 40);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(936, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(936, 63);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterVarArgDecl", 58);
			LeaveRule("formalParameterVarArgDecl", 58);
			LeaveRule_formalParameterVarArgDecl();
			if (state.backtracking > 0) { Memoize(input, 58, formalParameterVarArgDecl_StartIndex); }

		}
		DebugLocation(937, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterVarArgDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterVarArgDecl"

	partial void EnterRule_qualifiedIdentifier();
	partial void LeaveRule_qualifiedIdentifier();
	// $ANTLR start "qualifiedIdentifier"
	// Java.g:939:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
	[GrammarRule("qualifiedIdentifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier()
	{
		EnterRule_qualifiedIdentifier();
		EnterRule("qualifiedIdentifier", 59);
		TraceIn("qualifiedIdentifier", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken IDENT220 = default(IToken);
		IToken DOT221 = default(IToken);

		CommonTree ident_tree = default(CommonTree);
		CommonTree IDENT220_tree = default(CommonTree);
		CommonTree DOT221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentifier");
		DebugLocation(939, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// Java.g:940:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
			DebugEnterAlt(1);
			// Java.g:940:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			{
			DebugLocation(940, 9);
			// Java.g:940:9: ( IDENT -> IDENT )
			DebugEnterAlt(1);
			// Java.g:940:13: IDENT
			{
			DebugLocation(940, 13);
			IDENT220=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier8136); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT220);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 940:33: -> IDENT
			{
				DebugLocation(940, 37);
				adaptor.AddChild(root_0, stream_IDENT.NextNode());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(942, 9);
			// Java.g:942:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==DOT))
				{
					int LA76_2 = input.LA(2);

					if ((LA76_2==IDENT))
					{
						int LA76_3 = input.LA(3);

						if ((EvaluatePredicate(synpred103_Java_fragment)))
						{
							alt76 = 1;
						}


					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:942:13: DOT ident= IDENT
					{
					DebugLocation(942, 13);
					DOT221=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentifier8179); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT221);

					DebugLocation(942, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier8183); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(ident);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, ident
					// token labels: ident
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_ident=new RewriteRuleITokenStream(adaptor,"token ident",ident);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 942:33: -> ^( DOT $qualifiedIdentifier $ident)
					{
						DebugLocation(942, 37);
						// Java.g:942:37: ^( DOT $qualifiedIdentifier $ident)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(942, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(942, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(942, 65);
						adaptor.AddChild(root_1, stream_ident.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentifier", 59);
			LeaveRule("qualifiedIdentifier", 59);
			LeaveRule_qualifiedIdentifier();
			if (state.backtracking > 0) { Memoize(input, 59, qualifiedIdentifier_StartIndex); }

		}
		DebugLocation(944, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentifier"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentifier"

	partial void EnterRule_annotationList();
	partial void LeaveRule_annotationList();
	// $ANTLR start "annotationList"
	// Java.g:948:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
	[GrammarRule("annotationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationList()
	{
		EnterRule_annotationList();
		EnterRule("annotationList", 60);
		TraceIn("annotationList", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotation222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
		try { DebugEnterRule(GrammarFileName, "annotationList");
		DebugLocation(948, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// Java.g:949:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
			DebugEnterAlt(1);
			// Java.g:949:9: ( annotation )*
			{
			DebugLocation(949, 9);
			// Java.g:949:9: ( annotation )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==AT))
				{
					int LA77_2 = input.LA(2);

					if ((LA77_2==IDENT))
					{
						int LA77_3 = input.LA(3);

						if ((EvaluatePredicate(synpred104_Java_fragment)))
						{
							alt77 = 1;
						}


					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:949:9: annotation
					{
					DebugLocation(949, 9);
					PushFollow(Follow._annotation_in_annotationList8236);
					annotation222=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotation.Add(annotation222.Tree);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }



			{
			// AST REWRITE
			// elements: annotation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 950:9: -> ^( ANNOTATION_LIST ( annotation )* )
			{
				DebugLocation(950, 13);
				// Java.g:950:13: ^( ANNOTATION_LIST ( annotation )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(950, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

				DebugLocation(950, 31);
				// Java.g:950:31: ( annotation )*
				while ( stream_annotation.HasNext )
				{
					DebugLocation(950, 31);
					adaptor.AddChild(root_1, stream_annotation.NextTree());

				}
				stream_annotation.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationList", 60);
			LeaveRule("annotationList", 60);
			LeaveRule_annotationList();
			if (state.backtracking > 0) { Memoize(input, 60, annotationList_StartIndex); }

		}
		DebugLocation(951, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationList"); }
		return retval;

	}
	// $ANTLR end "annotationList"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// Java.g:953:1: annotation : AT ^ qualifiedIdentifier ( annotationInit )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 61);
		TraceIn("annotation", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInit225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT223_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(953, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// Java.g:954:5: ( AT ^ qualifiedIdentifier ( annotationInit )? )
			DebugEnterAlt(1);
			// Java.g:954:9: AT ^ qualifiedIdentifier ( annotationInit )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(954, 11);
			AT223=(IToken)Match(input,AT,Follow._AT_in_annotation8274); if (state.failed) return retval;
			if (state.backtracking == 0) {
			AT223_tree = (CommonTree)adaptor.Create(AT223);
			root_0 = (CommonTree)adaptor.BecomeRoot(AT223_tree, root_0);
			}
			DebugLocation(954, 13);
			PushFollow(Follow._qualifiedIdentifier_in_annotation8277);
			qualifiedIdentifier224=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier224.Tree);
			DebugLocation(954, 33);
			// Java.g:954:33: ( annotationInit )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_1 = input.LA(1);

			if ((LA78_1==LPAREN))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:954:33: annotationInit
				{
				DebugLocation(954, 33);
				PushFollow(Follow._annotationInit_in_annotation8279);
				annotationInit225=annotationInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationInit225.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 61);
			LeaveRule("annotation", 61);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 61, annotation_StartIndex); }

		}
		DebugLocation(955, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationInit();
	partial void LeaveRule_annotationInit();
	// $ANTLR start "annotationInit"
	// Java.g:957:1: annotationInit : LPAREN ( annotationInitializers )? RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? ) ;
	[GrammarRule("annotationInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInit()
	{
		EnterRule_annotationInit();
		EnterRule("annotationInit", 62);
		TraceIn("annotationInit", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN226 = default(IToken);
		IToken RPAREN228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN226_tree = default(CommonTree);
		CommonTree RPAREN228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
		try { DebugEnterRule(GrammarFileName, "annotationInit");
		DebugLocation(957, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// Java.g:958:5: ( LPAREN ( annotationInitializers )? RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? ) )
			DebugEnterAlt(1);
			// Java.g:958:9: LPAREN ( annotationInitializers )? RPAREN
			{
			DebugLocation(958, 9);
			LPAREN226=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationInit8303); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN226);

			DebugLocation(958, 16);
			// Java.g:958:16: ( annotationInitializers )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_1 = input.LA(1);

			if ((LA79_1==AT||LA79_1==BOOLEAN||LA79_1==BYTE||(LA79_1>=CHAR && LA79_1<=CHARACTER_LITERAL)||LA79_1==DEC||LA79_1==DECIMAL_LITERAL||LA79_1==DOUBLE||LA79_1==FALSE||(LA79_1>=FLOAT && LA79_1<=FLOATING_POINT_LITERAL)||LA79_1==HEX_LITERAL||LA79_1==IDENT||LA79_1==INC||LA79_1==INT||LA79_1==LCURLY||LA79_1==LESS_THAN||LA79_1==LOGICAL_NOT||(LA79_1>=LONG && LA79_1<=LPAREN)||LA79_1==MINUS||LA79_1==NEW||LA79_1==NOT||LA79_1==NULL||LA79_1==OCTAL_LITERAL||LA79_1==PLUS||LA79_1==SHORT||(LA79_1>=STRING_LITERAL && LA79_1<=SUPER)||LA79_1==THIS||LA79_1==TRUE||LA79_1==VOID))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:958:16: annotationInitializers
				{
				DebugLocation(958, 16);
				PushFollow(Follow._annotationInitializers_in_annotationInit8305);
				annotationInitializers227=annotationInitializers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationInitializers.Add(annotationInitializers227.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(958, 40);
			RPAREN228=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationInit8308); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN228);



			{
			// AST REWRITE
			// elements: annotationInitializers
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 959:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? )
			{
				DebugLocation(959, 13);
				// Java.g:959:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(959, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_BLOCK, LPAREN226, "ANNOTATION_INIT_BLOCK"), root_1);

				DebugLocation(959, 71);
				// Java.g:959:71: ( annotationInitializers )?
				if (stream_annotationInitializers.HasNext)
				{
					DebugLocation(959, 71);
					adaptor.AddChild(root_1, stream_annotationInitializers.NextTree());

				}
				stream_annotationInitializers.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInit", 62);
			LeaveRule("annotationInit", 62);
			LeaveRule_annotationInit();
			if (state.backtracking > 0) { Memoize(input, 62, annotationInit_StartIndex); }

		}
		DebugLocation(960, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInit"); }
		return retval;

	}
	// $ANTLR end "annotationInit"

	partial void EnterRule_annotationInitializers();
	partial void LeaveRule_annotationInitializers();
	// $ANTLR start "annotationInitializers"
	// Java.g:962:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
	[GrammarRule("annotationInitializers")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers()
	{
		EnterRule_annotationInitializers();
		EnterRule("annotationInitializers", 63);
		TraceIn("annotationInitializers", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializers_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		try { DebugEnterRule(GrammarFileName, "annotationInitializers");
		DebugLocation(962, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// Java.g:963:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
			int alt81=2;
			try { DebugEnterDecision(81, false);
			int LA81_1 = input.LA(1);

			if ((LA81_1==IDENT))
			{
				int LA81_2 = input.LA(2);

				if ((LA81_2==ASSIGN))
				{
					alt81 = 1;
				}
				else if ((LA81_2==EOF||LA81_2==AND||LA81_2==BIT_SHIFT_RIGHT||LA81_2==DEC||LA81_2==DIV||LA81_2==DOT||LA81_2==EQUAL||(LA81_2>=GREATER_OR_EQUAL && LA81_2<=GREATER_THAN)||(LA81_2>=INC && LA81_2<=INSTANCEOF)||LA81_2==LBRACK||(LA81_2>=LESS_OR_EQUAL && LA81_2<=LESS_THAN)||LA81_2==LOGICAL_AND||LA81_2==LOGICAL_OR||LA81_2==LPAREN||LA81_2==MINUS||LA81_2==MOD||LA81_2==NOT_EQUAL||LA81_2==OR||LA81_2==PLUS||LA81_2==QUESTION||LA81_2==RPAREN||LA81_2==SHIFT_LEFT||LA81_2==SHIFT_RIGHT||LA81_2==STAR||LA81_2==XOR))
				{
					alt81 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA81_1==AT||LA81_1==BOOLEAN||LA81_1==BYTE||(LA81_1>=CHAR && LA81_1<=CHARACTER_LITERAL)||LA81_1==DEC||LA81_1==DECIMAL_LITERAL||LA81_1==DOUBLE||LA81_1==FALSE||(LA81_1>=FLOAT && LA81_1<=FLOATING_POINT_LITERAL)||LA81_1==HEX_LITERAL||LA81_1==INC||LA81_1==INT||LA81_1==LCURLY||LA81_1==LESS_THAN||LA81_1==LOGICAL_NOT||(LA81_1>=LONG && LA81_1<=LPAREN)||LA81_1==MINUS||LA81_1==NEW||LA81_1==NOT||LA81_1==NULL||LA81_1==OCTAL_LITERAL||LA81_1==PLUS||LA81_1==SHORT||(LA81_1>=STRING_LITERAL && LA81_1<=SUPER)||LA81_1==THIS||LA81_1==TRUE||LA81_1==VOID))
			{
				alt81 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:963:9: annotationInitializer ( COMMA annotationInitializer )*
				{
				DebugLocation(963, 9);
				PushFollow(Follow._annotationInitializer_in_annotationInitializers8346);
				annotationInitializer229=annotationInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer229.Tree);
				DebugLocation(963, 31);
				// Java.g:963:31: ( COMMA annotationInitializer )*
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, false);
					int LA80_1 = input.LA(1);

					if ((LA80_1==COMMA))
					{
						alt80 = 1;
					}


					} finally { DebugExitDecision(80); }
					switch ( alt80 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:963:32: COMMA annotationInitializer
						{
						DebugLocation(963, 32);
						COMMA230=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationInitializers8349); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA230);

						DebugLocation(963, 38);
						PushFollow(Follow._annotationInitializer_in_annotationInitializers8351);
						annotationInitializer231=annotationInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer231.Tree);

						}
						break;

					default:
						goto loop80;
					}
				}

				loop80:
					;

				} finally { DebugExitSubRule(80); }



				{
				// AST REWRITE
				// elements: annotationInitializer
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 964:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
				{
					DebugLocation(964, 13);
					// Java.g:964:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(964, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

					DebugLocation(964, 40);
					if (!(stream_annotationInitializer.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_annotationInitializer.HasNext )
					{
						DebugLocation(964, 40);
						adaptor.AddChild(root_1, stream_annotationInitializer.NextTree());

					}
					stream_annotationInitializer.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:965:9: annotationElementValue
				{
				DebugLocation(965, 9);
				PushFollow(Follow._annotationElementValue_in_annotationInitializers8381);
				annotationElementValue232=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue232.Tree);


				{
				// AST REWRITE
				// elements: annotationElementValue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 966:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
				{
					DebugLocation(966, 13);
					// Java.g:966:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(966, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

					DebugLocation(966, 43);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializers", 63);
			LeaveRule("annotationInitializers", 63);
			LeaveRule_annotationInitializers();
			if (state.backtracking > 0) { Memoize(input, 63, annotationInitializers_StartIndex); }

		}
		DebugLocation(967, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializers"); }
		return retval;

	}
	// $ANTLR end "annotationInitializers"

	partial void EnterRule_annotationInitializer();
	partial void LeaveRule_annotationInitializer();
	// $ANTLR start "annotationInitializer"
	// Java.g:969:1: annotationInitializer : IDENT ^ ASSIGN ! annotationElementValue ;
	[GrammarRule("annotationInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer()
	{
		EnterRule_annotationInitializer();
		EnterRule("annotationInitializer", 64);
		TraceIn("annotationInitializer", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT233 = default(IToken);
		IToken ASSIGN234 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT233_tree = default(CommonTree);
		CommonTree ASSIGN234_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationInitializer");
		DebugLocation(969, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// Java.g:970:5: ( IDENT ^ ASSIGN ! annotationElementValue )
			DebugEnterAlt(1);
			// Java.g:970:9: IDENT ^ ASSIGN ! annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(970, 14);
			IDENT233=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationInitializer8422); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT233_tree = (CommonTree)adaptor.Create(IDENT233);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT233_tree, root_0);
			}
			DebugLocation(970, 22);
			ASSIGN234=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_annotationInitializer8425); if (state.failed) return retval;
			DebugLocation(970, 24);
			PushFollow(Follow._annotationElementValue_in_annotationInitializer8428);
			annotationElementValue235=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue235.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializer", 64);
			LeaveRule("annotationInitializer", 64);
			LeaveRule_annotationInitializer();
			if (state.backtracking > 0) { Memoize(input, 64, annotationInitializer_StartIndex); }

		}
		DebugLocation(971, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationInitializer"

	partial void EnterRule_annotationElementValue();
	partial void LeaveRule_annotationElementValue();
	// $ANTLR start "annotationElementValue"
	// Java.g:973:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
	[GrammarRule("annotationElementValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue()
	{
		EnterRule_annotationElementValue();
		EnterRule("annotationElementValue", 65);
		TraceIn("annotationElementValue", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotation237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer238 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "annotationElementValue");
		DebugLocation(973, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// Java.g:974:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
			int alt82=3;
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INC:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt82 = 1;
				}
				break;
			case AT:
				{
				alt82 = 2;
				}
				break;
			case LCURLY:
				{
				alt82 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:974:9: annotationElementValueExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(974, 9);
				PushFollow(Follow._annotationElementValueExpression_in_annotationElementValue8451);
				annotationElementValueExpression236=annotationElementValueExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueExpression236.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:975:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(975, 9);
				PushFollow(Follow._annotation_in_annotationElementValue8461);
				annotation237=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation237.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:976:9: annotationElementValueArrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(976, 9);
				PushFollow(Follow._annotationElementValueArrayInitializer_in_annotationElementValue8471);
				annotationElementValueArrayInitializer238=annotationElementValueArrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueArrayInitializer238.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValue", 65);
			LeaveRule("annotationElementValue", 65);
			LeaveRule_annotationElementValue();
			if (state.backtracking > 0) { Memoize(input, 65, annotationElementValue_StartIndex); }

		}
		DebugLocation(977, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValue"); }
		return retval;

	}
	// $ANTLR end "annotationElementValue"

	partial void EnterRule_annotationElementValueExpression();
	partial void LeaveRule_annotationElementValueExpression();
	// $ANTLR start "annotationElementValueExpression"
	// Java.g:979:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
	[GrammarRule("annotationElementValueExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression()
	{
		EnterRule_annotationElementValueExpression();
		EnterRule("annotationElementValueExpression", 66);
		TraceIn("annotationElementValueExpression", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueExpression");
		DebugLocation(979, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// Java.g:980:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
			DebugEnterAlt(1);
			// Java.g:980:9: conditionalExpression
			{
			DebugLocation(980, 9);
			PushFollow(Follow._conditionalExpression_in_annotationElementValueExpression8494);
			conditionalExpression239=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_conditionalExpression.Add(conditionalExpression239.Tree);


			{
			// AST REWRITE
			// elements: conditionalExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 981:9: -> ^( EXPR conditionalExpression )
			{
				DebugLocation(981, 13);
				// Java.g:981:13: ^( EXPR conditionalExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(981, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(981, 20);
				adaptor.AddChild(root_1, stream_conditionalExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueExpression", 66);
			LeaveRule("annotationElementValueExpression", 66);
			LeaveRule_annotationElementValueExpression();
			if (state.backtracking > 0) { Memoize(input, 66, annotationElementValueExpression_StartIndex); }

		}
		DebugLocation(982, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueExpression"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueExpression"

	partial void EnterRule_annotationElementValueArrayInitializer();
	partial void LeaveRule_annotationElementValueArrayInitializer();
	// $ANTLR start "annotationElementValueArrayInitializer"
	// Java.g:984:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
	[GrammarRule("annotationElementValueArrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer()
	{
		EnterRule_annotationElementValueArrayInitializer();
		EnterRule("annotationElementValueArrayInitializer", 67);
		TraceIn("annotationElementValueArrayInitializer", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueArrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY240 = default(IToken);
		IToken COMMA242 = default(IToken);
		IToken COMMA244 = default(IToken);
		IToken RCURLY245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue243 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY240_tree = default(CommonTree);
		CommonTree COMMA242_tree = default(CommonTree);
		CommonTree COMMA244_tree = default(CommonTree);
		CommonTree RCURLY245_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueArrayInitializer");
		DebugLocation(984, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// Java.g:985:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
			DebugEnterAlt(1);
			// Java.g:985:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
			{
			DebugLocation(985, 9);
			LCURLY240=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationElementValueArrayInitializer8534); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY240);

			DebugLocation(985, 16);
			// Java.g:985:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==AT||LA84_1==BOOLEAN||LA84_1==BYTE||(LA84_1>=CHAR && LA84_1<=CHARACTER_LITERAL)||LA84_1==DEC||LA84_1==DECIMAL_LITERAL||LA84_1==DOUBLE||LA84_1==FALSE||(LA84_1>=FLOAT && LA84_1<=FLOATING_POINT_LITERAL)||LA84_1==HEX_LITERAL||LA84_1==IDENT||LA84_1==INC||LA84_1==INT||LA84_1==LCURLY||LA84_1==LESS_THAN||LA84_1==LOGICAL_NOT||(LA84_1>=LONG && LA84_1<=LPAREN)||LA84_1==MINUS||LA84_1==NEW||LA84_1==NOT||LA84_1==NULL||LA84_1==OCTAL_LITERAL||LA84_1==PLUS||LA84_1==SHORT||(LA84_1>=STRING_LITERAL && LA84_1<=SUPER)||LA84_1==THIS||LA84_1==TRUE||LA84_1==VOID))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:985:17: annotationElementValue ( COMMA annotationElementValue )*
				{
				DebugLocation(985, 17);
				PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8537);
				annotationElementValue241=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue241.Tree);
				DebugLocation(985, 40);
				// Java.g:985:40: ( COMMA annotationElementValue )*
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_1 = input.LA(1);

					if ((LA83_1==COMMA))
					{
						int LA83_2 = input.LA(2);

						if ((LA83_2==AT||LA83_2==BOOLEAN||LA83_2==BYTE||(LA83_2>=CHAR && LA83_2<=CHARACTER_LITERAL)||LA83_2==DEC||LA83_2==DECIMAL_LITERAL||LA83_2==DOUBLE||LA83_2==FALSE||(LA83_2>=FLOAT && LA83_2<=FLOATING_POINT_LITERAL)||LA83_2==HEX_LITERAL||LA83_2==IDENT||LA83_2==INC||LA83_2==INT||LA83_2==LCURLY||LA83_2==LESS_THAN||LA83_2==LOGICAL_NOT||(LA83_2>=LONG && LA83_2<=LPAREN)||LA83_2==MINUS||LA83_2==NEW||LA83_2==NOT||LA83_2==NULL||LA83_2==OCTAL_LITERAL||LA83_2==PLUS||LA83_2==SHORT||(LA83_2>=STRING_LITERAL && LA83_2<=SUPER)||LA83_2==THIS||LA83_2==TRUE||LA83_2==VOID))
						{
							alt83 = 1;
						}


					}


					} finally { DebugExitDecision(83); }
					switch ( alt83 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:985:41: COMMA annotationElementValue
						{
						DebugLocation(985, 41);
						COMMA242=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8540); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA242);

						DebugLocation(985, 47);
						PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8542);
						annotationElementValue243=annotationElementValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue243.Tree);

						}
						break;

					default:
						goto loop83;
					}
				}

				loop83:
					;

				} finally { DebugExitSubRule(83); }


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(985, 74);
			// Java.g:985:74: ( COMMA )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_1 = input.LA(1);

			if ((LA85_1==COMMA))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:985:75: COMMA
				{
				DebugLocation(985, 75);
				COMMA244=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8549); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA244);


				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(985, 83);
			RCURLY245=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationElementValueArrayInitializer8553); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY245);



			{
			// AST REWRITE
			// elements: annotationElementValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 986:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
			{
				DebugLocation(986, 13);
				// Java.g:986:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(986, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY240, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

				DebugLocation(986, 90);
				// Java.g:986:90: ( annotationElementValue )*
				while ( stream_annotationElementValue.HasNext )
				{
					DebugLocation(986, 90);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

				}
				stream_annotationElementValue.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueArrayInitializer", 67);
			LeaveRule("annotationElementValueArrayInitializer", 67);
			LeaveRule_annotationElementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 67, annotationElementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(987, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueArrayInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();
	// $ANTLR start "annotationTypeDeclaration"
	// Java.g:989:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
	[GrammarRule("annotationTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 68);
		TraceIn("annotationTypeDeclaration", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT246 = default(IToken);
		IToken INTERFACE247 = default(IToken);
		IToken IDENT248 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationBody249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT246_tree = default(CommonTree);
		CommonTree INTERFACE247_tree = default(CommonTree);
		CommonTree IDENT248_tree = default(CommonTree);
		RewriteRuleITokenStream stream_AT=new RewriteRuleITokenStream(adaptor,"token AT");
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(989, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// Java.g:990:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
			DebugEnterAlt(1);
			// Java.g:990:9: AT INTERFACE IDENT annotationBody
			{
			DebugLocation(990, 9);
			AT246=(IToken)Match(input,AT,Follow._AT_in_annotationTypeDeclaration8596); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AT.Add(AT246);

			DebugLocation(990, 12);
			INTERFACE247=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration8598); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE247);

			DebugLocation(990, 22);
			IDENT248=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationTypeDeclaration8600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT248);

			DebugLocation(990, 28);
			PushFollow(Follow._annotationBody_in_annotationTypeDeclaration8602);
			annotationBody249=annotationBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_annotationBody.Add(annotationBody249.Tree);


			{
			// AST REWRITE
			// elements: AT, IDENT, annotationBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 991:9: -> ^( AT IDENT annotationBody )
			{
				DebugLocation(991, 12);
				// Java.g:991:12: ^( AT IDENT annotationBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(991, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_AT.NextNode(), root_1);

				DebugLocation(991, 17);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(991, 30);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(991, 36);
				adaptor.AddChild(root_1, stream_annotationBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 68);
			LeaveRule("annotationTypeDeclaration", 68);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 68, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(992, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationBody();
	partial void LeaveRule_annotationBody();
	// $ANTLR start "annotationBody"
	// Java.g:994:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
	[GrammarRule("annotationBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationBody()
	{
		EnterRule_annotationBody();
		EnterRule("annotationBody", 69);
		TraceIn("annotationBody", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY250 = default(IToken);
		IToken RCURLY252 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations251 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY250_tree = default(CommonTree);
		CommonTree RCURLY252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "annotationBody");
		DebugLocation(994, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// Java.g:995:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:995:9: LCURLY ( annotationScopeDeclarations )* RCURLY
			{
			DebugLocation(995, 9);
			LCURLY250=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationBody8645); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY250);

			DebugLocation(995, 16);
			// Java.g:995:16: ( annotationScopeDeclarations )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==ABSTRACT||LA86_1==AT||LA86_1==BOOLEAN||LA86_1==BYTE||LA86_1==CHAR||LA86_1==CLASS||LA86_1==DOUBLE||LA86_1==ENUM||LA86_1==FINAL||LA86_1==FLOAT||LA86_1==IDENT||LA86_1==INT||LA86_1==INTERFACE||LA86_1==LESS_THAN||LA86_1==LONG||LA86_1==NATIVE||(LA86_1>=PRIVATE && LA86_1<=PUBLIC)||LA86_1==SHORT||LA86_1==STATIC||LA86_1==STRICTFP||LA86_1==SYNCHRONIZED||LA86_1==TRANSIENT||LA86_1==VOID||LA86_1==VOLATILE))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:995:16: annotationScopeDeclarations
					{
					DebugLocation(995, 16);
					PushFollow(Follow._annotationScopeDeclarations_in_annotationBody8647);
					annotationScopeDeclarations251=annotationScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotationScopeDeclarations.Add(annotationScopeDeclarations251.Tree);

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }

			DebugLocation(995, 45);
			RCURLY252=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationBody8650); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY252);



			{
			// AST REWRITE
			// elements: annotationScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 996:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
			{
				DebugLocation(996, 13);
				// Java.g:996:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(996, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY250, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(996, 76);
				// Java.g:996:76: ( annotationScopeDeclarations )*
				while ( stream_annotationScopeDeclarations.HasNext )
				{
					DebugLocation(996, 76);
					adaptor.AddChild(root_1, stream_annotationScopeDeclarations.NextTree());

				}
				stream_annotationScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationBody", 69);
			LeaveRule("annotationBody", 69);
			LeaveRule_annotationBody();
			if (state.backtracking > 0) { Memoize(input, 69, annotationBody_StartIndex); }

		}
		DebugLocation(997, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationBody"); }
		return retval;

	}
	// $ANTLR end "annotationBody"

	partial void EnterRule_annotationScopeDeclarations();
	partial void LeaveRule_annotationScopeDeclarations();
	// $ANTLR start "annotationScopeDeclarations"
	// Java.g:999:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
	[GrammarRule("annotationScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations()
	{
		EnterRule_annotationScopeDeclarations();
		EnterRule("annotationScopeDeclarations", 70);
		TraceIn("annotationScopeDeclarations", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT255 = default(IToken);
		IToken LPAREN256 = default(IToken);
		IToken RPAREN257 = default(IToken);
		IToken SEMI259 = default(IToken);
		IToken SEMI261 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList260 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration262 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT255_tree = default(CommonTree);
		CommonTree LPAREN256_tree = default(CommonTree);
		CommonTree RPAREN257_tree = default(CommonTree);
		CommonTree SEMI259_tree = default(CommonTree);
		CommonTree SEMI261_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "annotationScopeDeclarations");
		DebugLocation(999, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// Java.g:1000:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
			int alt89=2;
			try { DebugEnterDecision(89, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((true))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt89 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt89 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1000:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(1000, 9);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations8692);
				modifierList253=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList253.Tree);
				DebugLocation(1000, 22);
				PushFollow(Follow._type_in_annotationScopeDeclarations8694);
				type254=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type254.Tree);
				DebugLocation(1001, 9);
				// Java.g:1001:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_1 = input.LA(1);

				if ((LA88_1==IDENT))
				{
					int LA88_2 = input.LA(2);

					if ((LA88_2==LPAREN))
					{
						alt88 = 1;
					}
					else if ((LA88_2==ASSIGN||LA88_2==COMMA||LA88_2==LBRACK||LA88_2==SEMI))
					{
						alt88 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 88, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1001:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
					{
					DebugLocation(1001, 13);
					IDENT255=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationScopeDeclarations8708); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT255);

					DebugLocation(1001, 19);
					LPAREN256=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationScopeDeclarations8710); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN256);

					DebugLocation(1001, 26);
					RPAREN257=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationScopeDeclarations8712); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN257);

					DebugLocation(1001, 33);
					// Java.g:1001:33: ( annotationDefaultValue )?
					int alt87=2;
					try { DebugEnterSubRule(87);
					try { DebugEnterDecision(87, false);
					int LA87_1 = input.LA(1);

					if ((LA87_1==DEFAULT))
					{
						alt87 = 1;
					}
					} finally { DebugExitDecision(87); }
					switch (alt87)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1001:33: annotationDefaultValue
						{
						DebugLocation(1001, 33);
						PushFollow(Follow._annotationDefaultValue_in_annotationScopeDeclarations8714);
						annotationDefaultValue258=annotationDefaultValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationDefaultValue.Add(annotationDefaultValue258.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(87); }

					DebugLocation(1001, 57);
					SEMI259=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8717); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI259);



					{
					// AST REWRITE
					// elements: modifierList, type, IDENT, annotationDefaultValue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1002:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
					{
						DebugLocation(1002, 17);
						// Java.g:1002:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1002, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

						DebugLocation(1002, 42);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(1002, 55);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(1002, 60);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(1002, 66);
						// Java.g:1002:66: ( annotationDefaultValue )?
						if (stream_annotationDefaultValue.HasNext)
						{
							DebugLocation(1002, 66);
							adaptor.AddChild(root_1, stream_annotationDefaultValue.NextTree());

						}
						stream_annotationDefaultValue.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1003:13: classFieldDeclaratorList SEMI
					{
					DebugLocation(1003, 13);
					PushFollow(Follow._classFieldDeclaratorList_in_annotationScopeDeclarations8759);
					classFieldDeclaratorList260=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList260.Tree);
					DebugLocation(1003, 38);
					SEMI261=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8761); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI261);



					{
					// AST REWRITE
					// elements: modifierList, type, classFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1004:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(1004, 17);
						// Java.g:1004:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1004, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(1004, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(1004, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(1004, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1006:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1006, 9);
				PushFollow(Follow._typeDeclaration_in_annotationScopeDeclarations8806);
				typeDeclaration262=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration262.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationScopeDeclarations", 70);
			LeaveRule("annotationScopeDeclarations", 70);
			LeaveRule_annotationScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 70, annotationScopeDeclarations_StartIndex); }

		}
		DebugLocation(1007, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "annotationScopeDeclarations"

	partial void EnterRule_annotationDefaultValue();
	partial void LeaveRule_annotationDefaultValue();
	// $ANTLR start "annotationDefaultValue"
	// Java.g:1009:1: annotationDefaultValue : DEFAULT ^ annotationElementValue ;
	[GrammarRule("annotationDefaultValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue()
	{
		EnterRule_annotationDefaultValue();
		EnterRule("annotationDefaultValue", 71);
		TraceIn("annotationDefaultValue", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationDefaultValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT263_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationDefaultValue");
		DebugLocation(1009, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// Java.g:1010:5: ( DEFAULT ^ annotationElementValue )
			DebugEnterAlt(1);
			// Java.g:1010:9: DEFAULT ^ annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1010, 16);
			DEFAULT263=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_annotationDefaultValue8829); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT263_tree = (CommonTree)adaptor.Create(DEFAULT263);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT263_tree, root_0);
			}
			DebugLocation(1010, 18);
			PushFollow(Follow._annotationElementValue_in_annotationDefaultValue8832);
			annotationElementValue264=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue264.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationDefaultValue", 71);
			LeaveRule("annotationDefaultValue", 71);
			LeaveRule_annotationDefaultValue();
			if (state.backtracking > 0) { Memoize(input, 71, annotationDefaultValue_StartIndex); }

		}
		DebugLocation(1011, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationDefaultValue"); }
		return retval;

	}
	// $ANTLR end "annotationDefaultValue"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Java.g:1015:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 72);
		TraceIn("block", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY265 = default(IToken);
		IToken RCURLY267 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement266 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY265_tree = default(CommonTree);
		CommonTree RCURLY267_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(1015, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// Java.g:1016:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
			DebugEnterAlt(1);
			// Java.g:1016:9: LCURLY ( blockStatement )* RCURLY
			{
			DebugLocation(1016, 9);
			LCURLY265=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block8853); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY265);

			DebugLocation(1016, 16);
			// Java.g:1016:16: ( blockStatement )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==ABSTRACT||LA90_1==ASSERT||LA90_1==AT||(LA90_1>=BOOLEAN && LA90_1<=BYTE)||(LA90_1>=CHAR && LA90_1<=CLASS)||(LA90_1>=CONTINUE && LA90_1<=DEC)||LA90_1==DECIMAL_LITERAL||LA90_1==DO||LA90_1==DOUBLE||LA90_1==ENUM||(LA90_1>=FALSE && LA90_1<=FINAL)||(LA90_1>=FLOAT && LA90_1<=FLOATING_POINT_LITERAL)||LA90_1==FOR||LA90_1==HEX_LITERAL||(LA90_1>=IDENT && LA90_1<=IF)||LA90_1==INC||LA90_1==INT||LA90_1==INTERFACE||LA90_1==LCURLY||LA90_1==LESS_THAN||LA90_1==LOGICAL_NOT||(LA90_1>=LONG && LA90_1<=LPAREN)||LA90_1==MINUS||(LA90_1>=NATIVE && LA90_1<=NEW)||LA90_1==NOT||LA90_1==NULL||LA90_1==OCTAL_LITERAL||LA90_1==PLUS||(LA90_1>=PRIVATE && LA90_1<=PUBLIC)||LA90_1==RETURN||LA90_1==SEMI||LA90_1==SHORT||LA90_1==STATIC||(LA90_1>=STRICTFP && LA90_1<=SUPER)||LA90_1==SWITCH||(LA90_1>=SYNCHRONIZED && LA90_1<=THIS)||LA90_1==THROW||(LA90_1>=TRANSIENT && LA90_1<=TRY)||LA90_1==VOID||(LA90_1>=VOLATILE && LA90_1<=WHILE)))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1016:16: blockStatement
					{
					DebugLocation(1016, 16);
					PushFollow(Follow._blockStatement_in_block8855);
					blockStatement266=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_blockStatement.Add(blockStatement266.Tree);

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(1016, 32);
			RCURLY267=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block8858); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY267);



			{
			// AST REWRITE
			// elements: blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1017:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
			{
				DebugLocation(1017, 13);
				// Java.g:1017:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1017, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK_SCOPE, LCURLY265, "BLOCK_SCOPE"), root_1);

				DebugLocation(1017, 51);
				// Java.g:1017:51: ( blockStatement )*
				while ( stream_blockStatement.HasNext )
				{
					DebugLocation(1017, 51);
					adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				}
				stream_blockStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 72);
			LeaveRule("block", 72);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 72, block_StartIndex); }

		}
		DebugLocation(1018, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// Java.g:1020:1: blockStatement : ( localVariableDeclaration SEMI !| typeDeclaration | statement );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 73);
		TraceIn("blockStatement", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI269_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(1020, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// Java.g:1021:5: ( localVariableDeclaration SEMI !| typeDeclaration | statement )
			int alt91=3;
			try { DebugEnterDecision(91, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TRANSIENT:
			case VOLATILE:
				{
				alt91 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt91 = 2;
				}
				else if ((true))
				{
					alt91 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ASSERT:
			case BREAK:
			case CHARACTER_LITERAL:
			case CONTINUE:
			case DEC:
			case DECIMAL_LITERAL:
			case DO:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case FOR:
			case HEX_LITERAL:
			case IF:
			case INC:
			case LCURLY:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case RETURN:
			case SEMI:
			case STRING_LITERAL:
			case SUPER:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt91 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1021:9: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1021, 9);
				PushFollow(Follow._localVariableDeclaration_in_blockStatement8896);
				localVariableDeclaration268=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration268.Tree);
				DebugLocation(1021, 38);
				SEMI269=(IToken)Match(input,SEMI,Follow._SEMI_in_blockStatement8898); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1022:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1022, 9);
				PushFollow(Follow._typeDeclaration_in_blockStatement8909);
				typeDeclaration270=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration270.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1023:9: statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1023, 9);
				PushFollow(Follow._statement_in_blockStatement8919);
				statement271=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement271.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 73);
			LeaveRule("blockStatement", 73);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 73, blockStatement_StartIndex); }

		}
		DebugLocation(1024, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// Java.g:1026:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 74);
		TraceIn("localVariableDeclaration", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList274 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(1026, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// Java.g:1029:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
			DebugEnterAlt(1);
			// Java.g:1029:9: localModifierList type classFieldDeclaratorList
			{
			DebugLocation(1029, 9);
			PushFollow(Follow._localModifierList_in_localVariableDeclaration8960);
			localModifierList272=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList272.Tree);
			DebugLocation(1029, 27);
			PushFollow(Follow._type_in_localVariableDeclaration8962);
			type273=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type273.Tree);
			DebugLocation(1029, 32);
			PushFollow(Follow._classFieldDeclaratorList_in_localVariableDeclaration8964);
			classFieldDeclaratorList274=classFieldDeclaratorList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList274.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, classFieldDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1030:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
			{
				DebugLocation(1030, 13);
				// Java.g:1030:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1030, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

				DebugLocation(1030, 31);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(1030, 49);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(1030, 54);
				adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 74);
			LeaveRule("localVariableDeclaration", 74);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 74, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(1031, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Java.g:1034:1: statement : ( block | assertStatement | ifStatement | forStatement | forEachStatement | whileStatement | doWhileStatement | tryStatement | switchStatement | synchronizedStatement | returnStatement | throwStatement | breakStatement | continueStatement | labeledStatement | expressionStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 75);
		TraceIn("statement", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> block275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assertStatement276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ifStatement277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forStatement278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forEachStatement279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> whileStatement280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> doWhileStatement281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tryStatement282 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchStatement283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> synchronizedStatement284 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> returnStatement285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwStatement286 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> breakStatement287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> continueStatement288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> labeledStatement289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expressionStatement290 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(1034, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// Java.g:1035:5: ( block | assertStatement | ifStatement | forStatement | forEachStatement | whileStatement | doWhileStatement | tryStatement | switchStatement | synchronizedStatement | returnStatement | throwStatement | breakStatement | continueStatement | labeledStatement | expressionStatement )
			int alt92=16;
			try { DebugEnterDecision(92, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt92 = 1;
				}
				break;
			case ASSERT:
				{
				alt92 = 2;
				}
				break;
			case IF:
				{
				alt92 = 3;
				}
				break;
			case FOR:
				{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt92 = 4;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt92 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				alt92 = 6;
				}
				break;
			case DO:
				{
				alt92 = 7;
				}
				break;
			case TRY:
				{
				alt92 = 8;
				}
				break;
			case SWITCH:
				{
				alt92 = 9;
				}
				break;
			case SYNCHRONIZED:
				{
				alt92 = 10;
				}
				break;
			case RETURN:
				{
				alt92 = 11;
				}
				break;
			case THROW:
				{
				alt92 = 12;
				}
				break;
			case BREAK:
				{
				alt92 = 13;
				}
				break;
			case CONTINUE:
				{
				alt92 = 14;
				}
				break;
			case IDENT:
				{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred135_Java_fragment)))
				{
					alt92 = 15;
				}
				else if ((true))
				{
					alt92 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case INC:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SEMI:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt92 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1035:9: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1035, 9);
				PushFollow(Follow._block_in_statement9017);
				block275=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block275.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1036:9: assertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1036, 9);
				PushFollow(Follow._assertStatement_in_statement9027);
				assertStatement276=assertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assertStatement276.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1037:9: ifStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1037, 9);
				PushFollow(Follow._ifStatement_in_statement9037);
				ifStatement277=ifStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifStatement277.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1038:9: forStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1038, 9);
				PushFollow(Follow._forStatement_in_statement9050);
				forStatement278=forStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forStatement278.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1039:7: forEachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1039, 7);
				PushFollow(Follow._forEachStatement_in_statement9058);
				forEachStatement279=forEachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forEachStatement279.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1040:9: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1040, 9);
				PushFollow(Follow._whileStatement_in_statement9068);
				whileStatement280=whileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileStatement280.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1041:9: doWhileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1041, 9);
				PushFollow(Follow._doWhileStatement_in_statement9078);
				doWhileStatement281=doWhileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, doWhileStatement281.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1042:9: tryStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1042, 9);
				PushFollow(Follow._tryStatement_in_statement9088);
				tryStatement282=tryStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryStatement282.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:1043:9: switchStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1043, 9);
				PushFollow(Follow._switchStatement_in_statement9098);
				switchStatement283=switchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switchStatement283.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:1044:9: synchronizedStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1044, 9);
				PushFollow(Follow._synchronizedStatement_in_statement9108);
				synchronizedStatement284=synchronizedStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, synchronizedStatement284.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:1045:9: returnStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1045, 9);
				PushFollow(Follow._returnStatement_in_statement9118);
				returnStatement285=returnStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, returnStatement285.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:1046:9: throwStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1046, 9);
				PushFollow(Follow._throwStatement_in_statement9128);
				throwStatement286=throwStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, throwStatement286.Tree);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Java.g:1047:9: breakStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1047, 9);
				PushFollow(Follow._breakStatement_in_statement9138);
				breakStatement287=breakStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, breakStatement287.Tree);

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Java.g:1048:9: continueStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1048, 9);
				PushFollow(Follow._continueStatement_in_statement9148);
				continueStatement288=continueStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, continueStatement288.Tree);

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Java.g:1049:9: labeledStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1049, 9);
				PushFollow(Follow._labeledStatement_in_statement9158);
				labeledStatement289=labeledStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeledStatement289.Tree);

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Java.g:1050:9: expressionStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1050, 9);
				PushFollow(Follow._expressionStatement_in_statement9168);
				expressionStatement290=expressionStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionStatement290.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 75);
			LeaveRule("statement", 75);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 75, statement_StartIndex); }

		}
		DebugLocation(1051, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_assertStatement();
	partial void LeaveRule_assertStatement();
	// $ANTLR start "assertStatement"
	// Java.g:1053:1: assertStatement : ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) ;
	[GrammarRule("assertStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> assertStatement()
	{
		EnterRule_assertStatement();
		EnterRule("assertStatement", 76);
		TraceIn("assertStatement", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assertStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSERT291 = default(IToken);
		IToken COLON292 = default(IToken);
		IToken SEMI293 = default(IToken);
		IToken SEMI294 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSERT291_tree = default(CommonTree);
		CommonTree COLON292_tree = default(CommonTree);
		CommonTree SEMI293_tree = default(CommonTree);
		CommonTree SEMI294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSERT=new RewriteRuleITokenStream(adaptor,"token ASSERT");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "assertStatement");
		DebugLocation(1053, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// Java.g:1054:2: ( ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) )
			DebugEnterAlt(1);
			// Java.g:1054:4: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
			{
			DebugLocation(1054, 4);
			ASSERT291=(IToken)Match(input,ASSERT,Follow._ASSERT_in_assertStatement9193); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ASSERT.Add(ASSERT291);

			DebugLocation(1054, 16);
			PushFollow(Follow._expression_in_assertStatement9197);
			expr1=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expr1.Tree);
			DebugLocation(1055, 9);
			// Java.g:1055:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
			int alt93=2;
			try { DebugEnterSubRule(93);
			try { DebugEnterDecision(93, false);
			int LA93_1 = input.LA(1);

			if ((LA93_1==COLON))
			{
				alt93 = 1;
			}
			else if ((LA93_1==SEMI))
			{
				alt93 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1055:13: COLON expr2= expression SEMI
				{
				DebugLocation(1055, 13);
				COLON292=(IToken)Match(input,COLON,Follow._COLON_in_assertStatement9212); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON292);

				DebugLocation(1055, 24);
				PushFollow(Follow._expression_in_assertStatement9216);
				expr2=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expr2.Tree);
				DebugLocation(1055, 36);
				SEMI293=(IToken)Match(input,SEMI,Follow._SEMI_in_assertStatement9218); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI293);



				{
				// AST REWRITE
				// elements: ASSERT, expr1, expr2
				// token labels: 
				// rule labels: expr1, expr2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.Tree:null);
				RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1055:41: -> ^( ASSERT $expr1 $expr2)
				{
					DebugLocation(1055, 44);
					// Java.g:1055:44: ^( ASSERT $expr1 $expr2)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1055, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_ASSERT.NextNode(), root_1);

					DebugLocation(1055, 54);
					adaptor.AddChild(root_1, stream_expr1.NextTree());
					DebugLocation(1055, 61);
					adaptor.AddChild(root_1, stream_expr2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1056:13: SEMI
				{
				DebugLocation(1056, 13);
				SEMI294=(IToken)Match(input,SEMI,Follow._SEMI_in_assertStatement9244); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI294);



				{
				// AST REWRITE
				// elements: ASSERT, expr1
				// token labels: 
				// rule labels: expr1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1056:41: -> ^( ASSERT $expr1)
				{
					DebugLocation(1056, 44);
					// Java.g:1056:44: ^( ASSERT $expr1)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1056, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_ASSERT.NextNode(), root_1);

					DebugLocation(1056, 54);
					adaptor.AddChild(root_1, stream_expr1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assertStatement", 76);
			LeaveRule("assertStatement", 76);
			LeaveRule_assertStatement();
			if (state.backtracking > 0) { Memoize(input, 76, assertStatement_StartIndex); }

		}
		DebugLocation(1058, 1);
		} finally { DebugExitRule(GrammarFileName, "assertStatement"); }
		return retval;

	}
	// $ANTLR end "assertStatement"

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();
	// $ANTLR start "ifStatement"
	// Java.g:1060:1: ifStatement : IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) ;
	[GrammarRule("ifStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 77);
		TraceIn("ifStatement", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ifStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IF295 = default(IToken);
		IToken ELSE297 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ifStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IF295_tree = default(CommonTree);
		CommonTree ELSE297_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(1060, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// Java.g:1061:2: ( IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) )
			DebugEnterAlt(1);
			// Java.g:1061:4: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
			{
			DebugLocation(1061, 4);
			IF295=(IToken)Match(input,IF,Follow._IF_in_ifStatement9305); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IF.Add(IF295);

			DebugLocation(1061, 7);
			PushFollow(Follow._parenthesizedExpression_in_ifStatement9307);
			parenthesizedExpression296=parenthesizedExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression296.Tree);
			DebugLocation(1061, 37);
			PushFollow(Follow._statement_in_ifStatement9311);
			ifStat=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(ifStat.Tree);
			DebugLocation(1062, 9);
			// Java.g:1062:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
			int alt94=2;
			try { DebugEnterSubRule(94);
			try { DebugEnterDecision(94, false);
			int LA94_1 = input.LA(1);

			if ((LA94_1==ELSE))
			{
				int LA94_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Java_fragment)))
				{
					alt94 = 1;
				}
				else if ((true))
				{
					alt94 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 94, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA94_1==EOF||LA94_1==ABSTRACT||LA94_1==ASSERT||LA94_1==AT||(LA94_1>=BOOLEAN && LA94_1<=CASE)||(LA94_1>=CHAR && LA94_1<=CLASS)||(LA94_1>=CONTINUE && LA94_1<=DEC)||(LA94_1>=DECIMAL_LITERAL && LA94_1<=DEFAULT)||LA94_1==DO||LA94_1==DOUBLE||LA94_1==ENUM||(LA94_1>=FALSE && LA94_1<=FINAL)||(LA94_1>=FLOAT && LA94_1<=FLOATING_POINT_LITERAL)||LA94_1==FOR||LA94_1==HEX_LITERAL||(LA94_1>=IDENT && LA94_1<=IF)||LA94_1==INC||LA94_1==INT||LA94_1==INTERFACE||LA94_1==LCURLY||LA94_1==LESS_THAN||LA94_1==LOGICAL_NOT||(LA94_1>=LONG && LA94_1<=LPAREN)||LA94_1==MINUS||(LA94_1>=NATIVE && LA94_1<=NEW)||LA94_1==NOT||LA94_1==NULL||LA94_1==OCTAL_LITERAL||LA94_1==PLUS||(LA94_1>=PRIVATE && LA94_1<=PUBLIC)||(LA94_1>=RCURLY && LA94_1<=RETURN)||LA94_1==SEMI||LA94_1==SHORT||LA94_1==STATIC||(LA94_1>=STRICTFP && LA94_1<=SUPER)||LA94_1==SWITCH||(LA94_1>=SYNCHRONIZED && LA94_1<=THIS)||LA94_1==THROW||(LA94_1>=TRANSIENT && LA94_1<=TRY)||LA94_1==VOID||(LA94_1>=VOLATILE && LA94_1<=WHILE)))
			{
				alt94 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 94, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1062:13: ELSE elseStat= statement
				{
				DebugLocation(1062, 13);
				ELSE297=(IToken)Match(input,ELSE,Follow._ELSE_in_ifStatement9326); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ELSE.Add(ELSE297);

				DebugLocation(1062, 26);
				PushFollow(Follow._statement_in_ifStatement9330);
				elseStat=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(elseStat.Tree);


				{
				// AST REWRITE
				// elements: IF, parenthesizedExpression, ifStat, elseStat
				// token labels: 
				// rule labels: ifStat, elseStat, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);
				RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1062:37: -> ^( IF parenthesizedExpression $ifStat $elseStat)
				{
					DebugLocation(1062, 40);
					// Java.g:1062:40: ^( IF parenthesizedExpression $ifStat $elseStat)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1062, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

					DebugLocation(1062, 45);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(1062, 70);
					adaptor.AddChild(root_1, stream_ifStat.NextTree());
					DebugLocation(1062, 78);
					adaptor.AddChild(root_1, stream_elseStat.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1063:37: 
				{

				{
				// AST REWRITE
				// elements: IF, parenthesizedExpression, ifStat
				// token labels: 
				// rule labels: ifStat, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1063:37: -> ^( IF parenthesizedExpression $ifStat)
				{
					DebugLocation(1063, 40);
					// Java.g:1063:40: ^( IF parenthesizedExpression $ifStat)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1063, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

					DebugLocation(1063, 45);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(1063, 70);
					adaptor.AddChild(root_1, stream_ifStat.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifStatement", 77);
			LeaveRule("ifStatement", 77);
			LeaveRule_ifStatement();
			if (state.backtracking > 0) { Memoize(input, 77, ifStatement_StartIndex); }

		}
		DebugLocation(1065, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();
	// $ANTLR start "forStatement"
	// Java.g:1067:1: forStatement : FOR LPAREN forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) ;
	[GrammarRule("forStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 78);
		TraceIn("forStatement", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FOR298 = default(IToken);
		IToken LPAREN299 = default(IToken);
		IToken SEMI301 = default(IToken);
		IToken SEMI303 = default(IToken);
		IToken RPAREN305 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> forInit300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forCondition302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forUpdater304 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement306 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FOR298_tree = default(CommonTree);
		CommonTree LPAREN299_tree = default(CommonTree);
		CommonTree SEMI301_tree = default(CommonTree);
		CommonTree SEMI303_tree = default(CommonTree);
		CommonTree RPAREN305_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
		RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(1067, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// Java.g:1068:2: ( FOR LPAREN forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) )
			DebugEnterAlt(1);
			// Java.g:1068:4: FOR LPAREN forInit SEMI forCondition SEMI forUpdater RPAREN statement
			{
			DebugLocation(1068, 4);
			FOR298=(IToken)Match(input,FOR,Follow._FOR_in_forStatement9420); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FOR.Add(FOR298);

			DebugLocation(1068, 8);
			LPAREN299=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement9422); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN299);

			DebugLocation(1068, 15);
			PushFollow(Follow._forInit_in_forStatement9424);
			forInit300=forInit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_forInit.Add(forInit300.Tree);
			DebugLocation(1068, 23);
			SEMI301=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement9426); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI301);

			DebugLocation(1068, 28);
			PushFollow(Follow._forCondition_in_forStatement9428);
			forCondition302=forCondition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_forCondition.Add(forCondition302.Tree);
			DebugLocation(1068, 41);
			SEMI303=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement9430); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI303);

			DebugLocation(1068, 46);
			PushFollow(Follow._forUpdater_in_forStatement9432);
			forUpdater304=forUpdater();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_forUpdater.Add(forUpdater304.Tree);
			DebugLocation(1068, 57);
			RPAREN305=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement9434); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN305);

			DebugLocation(1068, 64);
			PushFollow(Follow._statement_in_forStatement9436);
			statement306=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement306.Tree);


			{
			// AST REWRITE
			// elements: FOR, forInit, forCondition, forUpdater, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1069:3: -> ^( FOR forInit forCondition forUpdater statement )
			{
				DebugLocation(1069, 6);
				// Java.g:1069:6: ^( FOR forInit forCondition forUpdater statement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1069, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_FOR.NextNode(), root_1);

				DebugLocation(1069, 12);
				adaptor.AddChild(root_1, stream_forInit.NextTree());
				DebugLocation(1069, 20);
				adaptor.AddChild(root_1, stream_forCondition.NextTree());
				DebugLocation(1069, 33);
				adaptor.AddChild(root_1, stream_forUpdater.NextTree());
				DebugLocation(1069, 44);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 78);
			LeaveRule("forStatement", 78);
			LeaveRule_forStatement();
			if (state.backtracking > 0) { Memoize(input, 78, forStatement_StartIndex); }

		}
		DebugLocation(1070, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forEachStatement();
	partial void LeaveRule_forEachStatement();
	// $ANTLR start "forEachStatement"
	// Java.g:1072:1: forEachStatement : FOR LPAREN localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ;
	[GrammarRule("forEachStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> forEachStatement()
	{
		EnterRule_forEachStatement();
		EnterRule("forEachStatement", 79);
		TraceIn("forEachStatement", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forEachStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FOR307 = default(IToken);
		IToken LPAREN308 = default(IToken);
		IToken IDENT311 = default(IToken);
		IToken COLON312 = default(IToken);
		IToken RPAREN314 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FOR307_tree = default(CommonTree);
		CommonTree LPAREN308_tree = default(CommonTree);
		CommonTree IDENT311_tree = default(CommonTree);
		CommonTree COLON312_tree = default(CommonTree);
		CommonTree RPAREN314_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "forEachStatement");
		DebugLocation(1072, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// Java.g:1073:2: ( FOR LPAREN localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
			DebugEnterAlt(1);
			// Java.g:1073:4: FOR LPAREN localModifierList type IDENT COLON expression RPAREN statement
			{
			DebugLocation(1073, 4);
			FOR307=(IToken)Match(input,FOR,Follow._FOR_in_forEachStatement9471); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FOR.Add(FOR307);

			DebugLocation(1073, 8);
			LPAREN308=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forEachStatement9473); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN308);

			DebugLocation(1073, 15);
			PushFollow(Follow._localModifierList_in_forEachStatement9475);
			localModifierList309=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList309.Tree);
			DebugLocation(1073, 33);
			PushFollow(Follow._type_in_forEachStatement9477);
			type310=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type310.Tree);
			DebugLocation(1073, 38);
			IDENT311=(IToken)Match(input,IDENT,Follow._IDENT_in_forEachStatement9479); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT311);

			DebugLocation(1073, 44);
			COLON312=(IToken)Match(input,COLON,Follow._COLON_in_forEachStatement9481); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_COLON.Add(COLON312);

			DebugLocation(1073, 50);
			PushFollow(Follow._expression_in_forEachStatement9483);
			expression313=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression313.Tree);
			DebugLocation(1073, 61);
			RPAREN314=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forEachStatement9485); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN314);

			DebugLocation(1073, 68);
			PushFollow(Follow._statement_in_forEachStatement9487);
			statement315=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement315.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, IDENT, expression, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1074:3: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
			{
				DebugLocation(1074, 6);
				// Java.g:1074:6: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1074, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_EACH, FOR307, "FOR_EACH"), root_1);

				DebugLocation(1074, 35);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(1074, 53);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(1074, 58);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(1074, 64);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(1074, 75);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forEachStatement", 79);
			LeaveRule("forEachStatement", 79);
			LeaveRule_forEachStatement();
			if (state.backtracking > 0) { Memoize(input, 79, forEachStatement_StartIndex); }

		}
		DebugLocation(1075, 1);
		} finally { DebugExitRule(GrammarFileName, "forEachStatement"); }
		return retval;

	}
	// $ANTLR end "forEachStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// Java.g:1077:1: whileStatement : WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 80);
		TraceIn("whileStatement", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int whileStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken WHILE316 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement318 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WHILE316_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(1077, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// Java.g:1078:2: ( WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) )
			DebugEnterAlt(1);
			// Java.g:1078:4: WHILE parenthesizedExpression statement
			{
			DebugLocation(1078, 4);
			WHILE316=(IToken)Match(input,WHILE,Follow._WHILE_in_whileStatement9525); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHILE.Add(WHILE316);

			DebugLocation(1078, 10);
			PushFollow(Follow._parenthesizedExpression_in_whileStatement9527);
			parenthesizedExpression317=parenthesizedExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression317.Tree);
			DebugLocation(1078, 34);
			PushFollow(Follow._statement_in_whileStatement9529);
			statement318=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement318.Tree);


			{
			// AST REWRITE
			// elements: WHILE, parenthesizedExpression, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1079:3: -> ^( WHILE parenthesizedExpression statement )
			{
				DebugLocation(1079, 6);
				// Java.g:1079:6: ^( WHILE parenthesizedExpression statement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1079, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

				DebugLocation(1079, 14);
				adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
				DebugLocation(1079, 38);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 80);
			LeaveRule("whileStatement", 80);
			LeaveRule_whileStatement();
			if (state.backtracking > 0) { Memoize(input, 80, whileStatement_StartIndex); }

		}
		DebugLocation(1080, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_doWhileStatement();
	partial void LeaveRule_doWhileStatement();
	// $ANTLR start "doWhileStatement"
	// Java.g:1082:1: doWhileStatement : DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) ;
	[GrammarRule("doWhileStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> doWhileStatement()
	{
		EnterRule_doWhileStatement();
		EnterRule("doWhileStatement", 81);
		TraceIn("doWhileStatement", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int doWhileStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DO319 = default(IToken);
		IToken WHILE321 = default(IToken);
		IToken SEMI323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression322 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DO319_tree = default(CommonTree);
		CommonTree WHILE321_tree = default(CommonTree);
		CommonTree SEMI323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DO=new RewriteRuleITokenStream(adaptor,"token DO");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		try { DebugEnterRule(GrammarFileName, "doWhileStatement");
		DebugLocation(1082, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// Java.g:1083:2: ( DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) )
			DebugEnterAlt(1);
			// Java.g:1083:4: DO statement WHILE parenthesizedExpression SEMI
			{
			DebugLocation(1083, 4);
			DO319=(IToken)Match(input,DO,Follow._DO_in_doWhileStatement9560); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DO.Add(DO319);

			DebugLocation(1083, 7);
			PushFollow(Follow._statement_in_doWhileStatement9562);
			statement320=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement320.Tree);
			DebugLocation(1083, 17);
			WHILE321=(IToken)Match(input,WHILE,Follow._WHILE_in_doWhileStatement9564); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHILE.Add(WHILE321);

			DebugLocation(1083, 23);
			PushFollow(Follow._parenthesizedExpression_in_doWhileStatement9566);
			parenthesizedExpression322=parenthesizedExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression322.Tree);
			DebugLocation(1083, 47);
			SEMI323=(IToken)Match(input,SEMI,Follow._SEMI_in_doWhileStatement9568); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI323);



			{
			// AST REWRITE
			// elements: DO, statement, parenthesizedExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1084:3: -> ^( DO statement parenthesizedExpression )
			{
				DebugLocation(1084, 6);
				// Java.g:1084:6: ^( DO statement parenthesizedExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1084, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_DO.NextNode(), root_1);

				DebugLocation(1084, 11);
				adaptor.AddChild(root_1, stream_statement.NextTree());
				DebugLocation(1084, 21);
				adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("doWhileStatement", 81);
			LeaveRule("doWhileStatement", 81);
			LeaveRule_doWhileStatement();
			if (state.backtracking > 0) { Memoize(input, 81, doWhileStatement_StartIndex); }

		}
		DebugLocation(1085, 1);
		} finally { DebugExitRule(GrammarFileName, "doWhileStatement"); }
		return retval;

	}
	// $ANTLR end "doWhileStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// Java.g:1087:1: tryStatement : TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) ;
	[GrammarRule("tryStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 82);
		TraceIn("tryStatement", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int tryStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken TRY324 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> catches326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause328 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TRY324_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TRY=new RewriteRuleITokenStream(adaptor,"token TRY");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
		RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(1087, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// Java.g:1088:2: ( TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) )
			DebugEnterAlt(1);
			// Java.g:1088:4: TRY block ( catches ( finallyClause )? | finallyClause )
			{
			DebugLocation(1088, 4);
			TRY324=(IToken)Match(input,TRY,Follow._TRY_in_tryStatement9599); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRY.Add(TRY324);

			DebugLocation(1088, 8);
			PushFollow(Follow._block_in_tryStatement9601);
			block325=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block325.Tree);
			DebugLocation(1088, 14);
			// Java.g:1088:14: ( catches ( finallyClause )? | finallyClause )
			int alt96=2;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			int LA96_1 = input.LA(1);

			if ((LA96_1==CATCH))
			{
				alt96 = 1;
			}
			else if ((LA96_1==FINALLY))
			{
				alt96 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1088:15: catches ( finallyClause )?
				{
				DebugLocation(1088, 15);
				PushFollow(Follow._catches_in_tryStatement9604);
				catches326=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_catches.Add(catches326.Tree);
				DebugLocation(1088, 23);
				// Java.g:1088:23: ( finallyClause )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==FINALLY))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1088:23: finallyClause
					{
					DebugLocation(1088, 23);
					PushFollow(Follow._finallyClause_in_tryStatement9606);
					finallyClause327=finallyClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_finallyClause.Add(finallyClause327.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1088:40: finallyClause
				{
				DebugLocation(1088, 40);
				PushFollow(Follow._finallyClause_in_tryStatement9611);
				finallyClause328=finallyClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_finallyClause.Add(finallyClause328.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(96); }



			{
			// AST REWRITE
			// elements: TRY, block, catches, finallyClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1089:3: -> ^( TRY block ( catches )? ( finallyClause )? )
			{
				DebugLocation(1089, 6);
				// Java.g:1089:6: ^( TRY block ( catches )? ( finallyClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1089, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRY.NextNode(), root_1);

				DebugLocation(1089, 12);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(1089, 18);
				// Java.g:1089:18: ( catches )?
				if (stream_catches.HasNext)
				{
					DebugLocation(1089, 18);
					adaptor.AddChild(root_1, stream_catches.NextTree());

				}
				stream_catches.Reset();
				DebugLocation(1089, 27);
				// Java.g:1089:27: ( finallyClause )?
				if (stream_finallyClause.HasNext)
				{
					DebugLocation(1089, 27);
					adaptor.AddChild(root_1, stream_finallyClause.NextTree());

				}
				stream_finallyClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 82);
			LeaveRule("tryStatement", 82);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 82, tryStatement_StartIndex); }

		}
		DebugLocation(1090, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();
	// $ANTLR start "switchStatement"
	// Java.g:1092:1: switchStatement : SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) ;
	[GrammarRule("switchStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 83);
		TraceIn("switchStatement", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SWITCH329 = default(IToken);
		IToken LCURLY331 = default(IToken);
		IToken RCURLY333 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels332 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SWITCH329_tree = default(CommonTree);
		CommonTree LCURLY331_tree = default(CommonTree);
		CommonTree RCURLY333_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SWITCH=new RewriteRuleITokenStream(adaptor,"token SWITCH");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(1092, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// Java.g:1093:2: ( SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) )
			DebugEnterAlt(1);
			// Java.g:1093:4: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
			{
			DebugLocation(1093, 4);
			SWITCH329=(IToken)Match(input,SWITCH,Follow._SWITCH_in_switchStatement9647); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SWITCH.Add(SWITCH329);

			DebugLocation(1093, 11);
			PushFollow(Follow._parenthesizedExpression_in_switchStatement9649);
			parenthesizedExpression330=parenthesizedExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression330.Tree);
			DebugLocation(1093, 35);
			LCURLY331=(IToken)Match(input,LCURLY,Follow._LCURLY_in_switchStatement9651); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY331);

			DebugLocation(1093, 42);
			PushFollow(Follow._switchBlockLabels_in_switchStatement9653);
			switchBlockLabels332=switchBlockLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchBlockLabels.Add(switchBlockLabels332.Tree);
			DebugLocation(1093, 60);
			RCURLY333=(IToken)Match(input,RCURLY,Follow._RCURLY_in_switchStatement9655); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY333);



			{
			// AST REWRITE
			// elements: SWITCH, parenthesizedExpression, switchBlockLabels
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1094:3: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
			{
				DebugLocation(1094, 6);
				// Java.g:1094:6: ^( SWITCH parenthesizedExpression switchBlockLabels )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1094, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_SWITCH.NextNode(), root_1);

				DebugLocation(1094, 15);
				adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
				DebugLocation(1094, 39);
				adaptor.AddChild(root_1, stream_switchBlockLabels.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 83);
			LeaveRule("switchStatement", 83);
			LeaveRule_switchStatement();
			if (state.backtracking > 0) { Memoize(input, 83, switchStatement_StartIndex); }

		}
		DebugLocation(1095, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_synchronizedStatement();
	partial void LeaveRule_synchronizedStatement();
	// $ANTLR start "synchronizedStatement"
	// Java.g:1097:1: synchronizedStatement : SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) ;
	[GrammarRule("synchronizedStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> synchronizedStatement()
	{
		EnterRule_synchronizedStatement();
		EnterRule("synchronizedStatement", 84);
		TraceIn("synchronizedStatement", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int synchronizedStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SYNCHRONIZED334 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block336 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SYNCHRONIZED334_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SYNCHRONIZED=new RewriteRuleITokenStream(adaptor,"token SYNCHRONIZED");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "synchronizedStatement");
		DebugLocation(1097, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// Java.g:1098:2: ( SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) )
			DebugEnterAlt(1);
			// Java.g:1098:4: SYNCHRONIZED parenthesizedExpression block
			{
			DebugLocation(1098, 4);
			SYNCHRONIZED334=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_synchronizedStatement9686); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SYNCHRONIZED.Add(SYNCHRONIZED334);

			DebugLocation(1098, 17);
			PushFollow(Follow._parenthesizedExpression_in_synchronizedStatement9688);
			parenthesizedExpression335=parenthesizedExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression335.Tree);
			DebugLocation(1098, 41);
			PushFollow(Follow._block_in_synchronizedStatement9690);
			block336=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block336.Tree);


			{
			// AST REWRITE
			// elements: SYNCHRONIZED, parenthesizedExpression, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1099:3: -> ^( SYNCHRONIZED parenthesizedExpression block )
			{
				DebugLocation(1099, 6);
				// Java.g:1099:6: ^( SYNCHRONIZED parenthesizedExpression block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1099, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_SYNCHRONIZED.NextNode(), root_1);

				DebugLocation(1099, 21);
				adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
				DebugLocation(1099, 45);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("synchronizedStatement", 84);
			LeaveRule("synchronizedStatement", 84);
			LeaveRule_synchronizedStatement();
			if (state.backtracking > 0) { Memoize(input, 84, synchronizedStatement_StartIndex); }

		}
		DebugLocation(1100, 1);
		} finally { DebugExitRule(GrammarFileName, "synchronizedStatement"); }
		return retval;

	}
	// $ANTLR end "synchronizedStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();
	// $ANTLR start "returnStatement"
	// Java.g:1102:1: returnStatement : RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 85);
		TraceIn("returnStatement", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int returnStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken RETURN337 = default(IToken);
		IToken SEMI339 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression338 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree RETURN337_tree = default(CommonTree);
		CommonTree SEMI339_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RETURN=new RewriteRuleITokenStream(adaptor,"token RETURN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(1102, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// Java.g:1103:2: ( RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) )
			DebugEnterAlt(1);
			// Java.g:1103:4: RETURN ( expression )? SEMI
			{
			DebugLocation(1103, 4);
			RETURN337=(IToken)Match(input,RETURN,Follow._RETURN_in_returnStatement9721); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RETURN.Add(RETURN337);

			DebugLocation(1103, 11);
			// Java.g:1103:11: ( expression )?
			int alt97=2;
			try { DebugEnterSubRule(97);
			try { DebugEnterDecision(97, false);
			int LA97_1 = input.LA(1);

			if ((LA97_1==BOOLEAN||LA97_1==BYTE||(LA97_1>=CHAR && LA97_1<=CHARACTER_LITERAL)||LA97_1==DEC||LA97_1==DECIMAL_LITERAL||LA97_1==DOUBLE||LA97_1==FALSE||(LA97_1>=FLOAT && LA97_1<=FLOATING_POINT_LITERAL)||LA97_1==HEX_LITERAL||LA97_1==IDENT||LA97_1==INC||LA97_1==INT||LA97_1==LESS_THAN||LA97_1==LOGICAL_NOT||(LA97_1>=LONG && LA97_1<=LPAREN)||LA97_1==MINUS||LA97_1==NEW||LA97_1==NOT||LA97_1==NULL||LA97_1==OCTAL_LITERAL||LA97_1==PLUS||LA97_1==SHORT||(LA97_1>=STRING_LITERAL && LA97_1<=SUPER)||LA97_1==THIS||LA97_1==TRUE||LA97_1==VOID))
			{
				alt97 = 1;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1103:11: expression
				{
				DebugLocation(1103, 11);
				PushFollow(Follow._expression_in_returnStatement9723);
				expression338=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression338.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(97); }

			DebugLocation(1103, 23);
			SEMI339=(IToken)Match(input,SEMI,Follow._SEMI_in_returnStatement9726); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI339);



			{
			// AST REWRITE
			// elements: RETURN, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1103:28: -> ^( RETURN ( expression )? )
			{
				DebugLocation(1103, 31);
				// Java.g:1103:31: ^( RETURN ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1103, 33);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_RETURN.NextNode(), root_1);

				DebugLocation(1103, 40);
				// Java.g:1103:40: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(1103, 40);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 85);
			LeaveRule("returnStatement", 85);
			LeaveRule_returnStatement();
			if (state.backtracking > 0) { Memoize(input, 85, returnStatement_StartIndex); }

		}
		DebugLocation(1104, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();
	// $ANTLR start "throwStatement"
	// Java.g:1106:1: throwStatement : THROW expression SEMI -> ^( THROW expression ) ;
	[GrammarRule("throwStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 86);
		TraceIn("throwStatement", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int throwStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken THROW340 = default(IToken);
		IToken SEMI342 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree THROW340_tree = default(CommonTree);
		CommonTree SEMI342_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THROW=new RewriteRuleITokenStream(adaptor,"token THROW");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(1106, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// Java.g:1107:2: ( THROW expression SEMI -> ^( THROW expression ) )
			DebugEnterAlt(1);
			// Java.g:1107:4: THROW expression SEMI
			{
			DebugLocation(1107, 4);
			THROW340=(IToken)Match(input,THROW,Follow._THROW_in_throwStatement9754); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THROW.Add(THROW340);

			DebugLocation(1107, 10);
			PushFollow(Follow._expression_in_throwStatement9756);
			expression341=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression341.Tree);
			DebugLocation(1107, 21);
			SEMI342=(IToken)Match(input,SEMI,Follow._SEMI_in_throwStatement9758); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI342);



			{
			// AST REWRITE
			// elements: THROW, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1107:26: -> ^( THROW expression )
			{
				DebugLocation(1107, 29);
				// Java.g:1107:29: ^( THROW expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1107, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_THROW.NextNode(), root_1);

				DebugLocation(1107, 37);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwStatement", 86);
			LeaveRule("throwStatement", 86);
			LeaveRule_throwStatement();
			if (state.backtracking > 0) { Memoize(input, 86, throwStatement_StartIndex); }

		}
		DebugLocation(1108, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return retval;

	}
	// $ANTLR end "throwStatement"

	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();
	// $ANTLR start "breakStatement"
	// Java.g:1110:1: breakStatement : BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) ;
	[GrammarRule("breakStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 87);
		TraceIn("breakStatement", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int breakStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken BREAK343 = default(IToken);
		IToken IDENT344 = default(IToken);
		IToken SEMI345 = default(IToken);

		CommonTree BREAK343_tree = default(CommonTree);
		CommonTree IDENT344_tree = default(CommonTree);
		CommonTree SEMI345_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BREAK=new RewriteRuleITokenStream(adaptor,"token BREAK");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(1110, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// Java.g:1111:2: ( BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) )
			DebugEnterAlt(1);
			// Java.g:1111:4: BREAK ( IDENT )? SEMI
			{
			DebugLocation(1111, 4);
			BREAK343=(IToken)Match(input,BREAK,Follow._BREAK_in_breakStatement9785); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BREAK.Add(BREAK343);

			DebugLocation(1111, 10);
			// Java.g:1111:10: ( IDENT )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_1 = input.LA(1);

			if ((LA98_1==IDENT))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1111:10: IDENT
				{
				DebugLocation(1111, 10);
				IDENT344=(IToken)Match(input,IDENT,Follow._IDENT_in_breakStatement9787); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT344);


				}
				break;

			}
			} finally { DebugExitSubRule(98); }

			DebugLocation(1111, 17);
			SEMI345=(IToken)Match(input,SEMI,Follow._SEMI_in_breakStatement9790); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI345);



			{
			// AST REWRITE
			// elements: BREAK, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1111:22: -> ^( BREAK ( IDENT )? )
			{
				DebugLocation(1111, 25);
				// Java.g:1111:25: ^( BREAK ( IDENT )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1111, 27);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_BREAK.NextNode(), root_1);

				DebugLocation(1111, 33);
				// Java.g:1111:33: ( IDENT )?
				if (stream_IDENT.HasNext)
				{
					DebugLocation(1111, 33);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("breakStatement", 87);
			LeaveRule("breakStatement", 87);
			LeaveRule_breakStatement();
			if (state.backtracking > 0) { Memoize(input, 87, breakStatement_StartIndex); }

		}
		DebugLocation(1112, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return retval;

	}
	// $ANTLR end "breakStatement"

	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();
	// $ANTLR start "continueStatement"
	// Java.g:1114:1: continueStatement : CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) ;
	[GrammarRule("continueStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 88);
		TraceIn("continueStatement", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int continueStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CONTINUE346 = default(IToken);
		IToken IDENT347 = default(IToken);
		IToken SEMI348 = default(IToken);

		CommonTree CONTINUE346_tree = default(CommonTree);
		CommonTree IDENT347_tree = default(CommonTree);
		CommonTree SEMI348_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CONTINUE=new RewriteRuleITokenStream(adaptor,"token CONTINUE");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(1114, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// Java.g:1115:2: ( CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) )
			DebugEnterAlt(1);
			// Java.g:1115:4: CONTINUE ( IDENT )? SEMI
			{
			DebugLocation(1115, 4);
			CONTINUE346=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_continueStatement9818); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CONTINUE.Add(CONTINUE346);

			DebugLocation(1115, 13);
			// Java.g:1115:13: ( IDENT )?
			int alt99=2;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, false);
			int LA99_1 = input.LA(1);

			if ((LA99_1==IDENT))
			{
				alt99 = 1;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1115:13: IDENT
				{
				DebugLocation(1115, 13);
				IDENT347=(IToken)Match(input,IDENT,Follow._IDENT_in_continueStatement9820); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT347);


				}
				break;

			}
			} finally { DebugExitSubRule(99); }

			DebugLocation(1115, 20);
			SEMI348=(IToken)Match(input,SEMI,Follow._SEMI_in_continueStatement9823); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI348);



			{
			// AST REWRITE
			// elements: CONTINUE, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1115:25: -> ^( CONTINUE ( IDENT )? )
			{
				DebugLocation(1115, 28);
				// Java.g:1115:28: ^( CONTINUE ( IDENT )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1115, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_CONTINUE.NextNode(), root_1);

				DebugLocation(1115, 39);
				// Java.g:1115:39: ( IDENT )?
				if (stream_IDENT.HasNext)
				{
					DebugLocation(1115, 39);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continueStatement", 88);
			LeaveRule("continueStatement", 88);
			LeaveRule_continueStatement();
			if (state.backtracking > 0) { Memoize(input, 88, continueStatement_StartIndex); }

		}
		DebugLocation(1116, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return retval;

	}
	// $ANTLR end "continueStatement"

	partial void EnterRule_labeledStatement();
	partial void LeaveRule_labeledStatement();
	// $ANTLR start "labeledStatement"
	// Java.g:1118:1: labeledStatement : IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) ;
	[GrammarRule("labeledStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> labeledStatement()
	{
		EnterRule_labeledStatement();
		EnterRule("labeledStatement", 89);
		TraceIn("labeledStatement", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int labeledStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT349 = default(IToken);
		IToken COLON350 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement351 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT349_tree = default(CommonTree);
		CommonTree COLON350_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "labeledStatement");
		DebugLocation(1118, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// Java.g:1119:2: ( IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) )
			DebugEnterAlt(1);
			// Java.g:1119:4: IDENT COLON statement
			{
			DebugLocation(1119, 4);
			IDENT349=(IToken)Match(input,IDENT,Follow._IDENT_in_labeledStatement9851); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT349);

			DebugLocation(1119, 10);
			COLON350=(IToken)Match(input,COLON,Follow._COLON_in_labeledStatement9853); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_COLON.Add(COLON350);

			DebugLocation(1119, 16);
			PushFollow(Follow._statement_in_labeledStatement9855);
			statement351=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement351.Tree);


			{
			// AST REWRITE
			// elements: IDENT, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1119:26: -> ^( LABELED_STATEMENT IDENT statement )
			{
				DebugLocation(1119, 29);
				// Java.g:1119:29: ^( LABELED_STATEMENT IDENT statement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1119, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

				DebugLocation(1119, 49);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(1119, 55);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeledStatement", 89);
			LeaveRule("labeledStatement", 89);
			LeaveRule_labeledStatement();
			if (state.backtracking > 0) { Memoize(input, 89, labeledStatement_StartIndex); }

		}
		DebugLocation(1120, 1);
		} finally { DebugExitRule(GrammarFileName, "labeledStatement"); }
		return retval;

	}
	// $ANTLR end "labeledStatement"

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();
	// $ANTLR start "expressionStatement"
	// Java.g:1122:1: expressionStatement : ( expression SEMI !| SEMI );
	[GrammarRule("expressionStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 90);
		TraceIn("expressionStatement", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI353 = default(IToken);
		IToken SEMI354 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression352 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI353_tree = default(CommonTree);
		CommonTree SEMI354_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(1122, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// Java.g:1123:2: ( expression SEMI !| SEMI )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_1 = input.LA(1);

			if ((LA100_1==BOOLEAN||LA100_1==BYTE||(LA100_1>=CHAR && LA100_1<=CHARACTER_LITERAL)||LA100_1==DEC||LA100_1==DECIMAL_LITERAL||LA100_1==DOUBLE||LA100_1==FALSE||(LA100_1>=FLOAT && LA100_1<=FLOATING_POINT_LITERAL)||LA100_1==HEX_LITERAL||LA100_1==IDENT||LA100_1==INC||LA100_1==INT||LA100_1==LESS_THAN||LA100_1==LOGICAL_NOT||(LA100_1>=LONG && LA100_1<=LPAREN)||LA100_1==MINUS||LA100_1==NEW||LA100_1==NOT||LA100_1==NULL||LA100_1==OCTAL_LITERAL||LA100_1==PLUS||LA100_1==SHORT||(LA100_1>=STRING_LITERAL && LA100_1<=SUPER)||LA100_1==THIS||LA100_1==TRUE||LA100_1==VOID))
			{
				alt100 = 1;
			}
			else if ((LA100_1==SEMI))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1123:4: expression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1123, 4);
				PushFollow(Follow._expression_in_expressionStatement9884);
				expression352=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression352.Tree);
				DebugLocation(1123, 19);
				SEMI353=(IToken)Match(input,SEMI,Follow._SEMI_in_expressionStatement9886); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1124:9: SEMI
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1124, 9);
				SEMI354=(IToken)Match(input,SEMI,Follow._SEMI_in_expressionStatement9897); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEMI354_tree = (CommonTree)adaptor.Create(SEMI354);
				adaptor.AddChild(root_0, SEMI354_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionStatement", 90);
			LeaveRule("expressionStatement", 90);
			LeaveRule_expressionStatement();
			if (state.backtracking > 0) { Memoize(input, 90, expressionStatement_StartIndex); }

		}
		DebugLocation(1125, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return retval;

	}
	// $ANTLR end "expressionStatement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// Java.g:1127:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
	[GrammarRule("catches")]
	private AstParserRuleReturnScope<CommonTree, IToken> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 91);
		TraceIn("catches", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catches_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> catchClause355 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(1127, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// Java.g:1128:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
			DebugEnterAlt(1);
			// Java.g:1128:9: ( catchClause )+
			{
			DebugLocation(1128, 9);
			// Java.g:1128:9: ( catchClause )+
			int cnt101=0;
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==CATCH))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1128:9: catchClause
					{
					DebugLocation(1128, 9);
					PushFollow(Follow._catchClause_in_catches9922);
					catchClause355=catchClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_catchClause.Add(catchClause355.Tree);

					}
					break;

				default:
					if (cnt101 >= 1)
						goto loop101;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee101 = new EarlyExitException( 101, input );
					DebugRecognitionException(eee101);
					throw eee101;
				}
				cnt101++;
			}
			loop101:
				;

			} finally { DebugExitSubRule(101); }



			{
			// AST REWRITE
			// elements: catchClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1129:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
			{
				DebugLocation(1129, 13);
				// Java.g:1129:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1129, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

				DebugLocation(1129, 33);
				if (!(stream_catchClause.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_catchClause.HasNext )
				{
					DebugLocation(1129, 33);
					adaptor.AddChild(root_1, stream_catchClause.NextTree());

				}
				stream_catchClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catches", 91);
			LeaveRule("catches", 91);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 91, catches_StartIndex); }

		}
		DebugLocation(1130, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return retval;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// Java.g:1132:1: catchClause : CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 92);
		TraceIn("catchClause", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CATCH356 = default(IToken);
		IToken LPAREN357 = default(IToken);
		IToken RPAREN359 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CATCH356_tree = default(CommonTree);
		CommonTree LPAREN357_tree = default(CommonTree);
		CommonTree RPAREN359_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1132, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// Java.g:1133:5: ( CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block )
			DebugEnterAlt(1);
			// Java.g:1133:9: CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1133, 14);
			CATCH356=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause9964); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CATCH356_tree = (CommonTree)adaptor.Create(CATCH356);
			root_0 = (CommonTree)adaptor.BecomeRoot(CATCH356_tree, root_0);
			}
			DebugLocation(1133, 22);
			LPAREN357=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause9967); if (state.failed) return retval;
			DebugLocation(1133, 24);
			PushFollow(Follow._formalParameterStandardDecl_in_catchClause9970);
			formalParameterStandardDecl358=formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterStandardDecl358.Tree);
			DebugLocation(1133, 58);
			RPAREN359=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause9972); if (state.failed) return retval;
			DebugLocation(1133, 60);
			PushFollow(Follow._block_in_catchClause9975);
			block360=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block360.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 92);
			LeaveRule("catchClause", 92);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 92, catchClause_StartIndex); }

		}
		DebugLocation(1134, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// Java.g:1136:1: finallyClause : FINALLY block -> block ;
	[GrammarRule("finallyClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 93);
		TraceIn("finallyClause", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int finallyClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINALLY361 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINALLY361_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FINALLY=new RewriteRuleITokenStream(adaptor,"token FINALLY");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(1136, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// Java.g:1137:5: ( FINALLY block -> block )
			DebugEnterAlt(1);
			// Java.g:1137:9: FINALLY block
			{
			DebugLocation(1137, 9);
			FINALLY361=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause9994); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FINALLY.Add(FINALLY361);

			DebugLocation(1137, 17);
			PushFollow(Follow._block_in_finallyClause9996);
			block362=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block362.Tree);


			{
			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1138:9: -> block
			{
				DebugLocation(1138, 13);
				adaptor.AddChild(root_0, stream_block.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 93);
			LeaveRule("finallyClause", 93);
			LeaveRule_finallyClause();
			if (state.backtracking > 0) { Memoize(input, 93, finallyClause_StartIndex); }

		}
		DebugLocation(1139, 4);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_switchBlockLabels();
	partial void LeaveRule_switchBlockLabels();
	// $ANTLR start "switchBlockLabels"
	// Java.g:1141:1: switchBlockLabels : preCases= switchCaseLabels ( switchDefaultLabel )? postCases= switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? ) ;
	[GrammarRule("switchBlockLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels()
	{
		EnterRule_switchBlockLabels();
		EnterRule("switchBlockLabels", 94);
		TraceIn("switchBlockLabels", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> preCases = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postCases = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel363 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
		RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
		try { DebugEnterRule(GrammarFileName, "switchBlockLabels");
		DebugLocation(1141, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// Java.g:1142:5: (preCases= switchCaseLabels ( switchDefaultLabel )? postCases= switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? ) )
			DebugEnterAlt(1);
			// Java.g:1142:9: preCases= switchCaseLabels ( switchDefaultLabel )? postCases= switchCaseLabels
			{
			DebugLocation(1142, 17);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10030);
			preCases=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(preCases.Tree);
			DebugLocation(1142, 35);
			// Java.g:1142:35: ( switchDefaultLabel )?
			int alt102=2;
			try { DebugEnterSubRule(102);
			try { DebugEnterDecision(102, false);
			int LA102_1 = input.LA(1);

			if ((LA102_1==DEFAULT))
			{
				alt102 = 1;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1142:35: switchDefaultLabel
				{
				DebugLocation(1142, 35);
				PushFollow(Follow._switchDefaultLabel_in_switchBlockLabels10032);
				switchDefaultLabel363=switchDefaultLabel();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_switchDefaultLabel.Add(switchDefaultLabel363.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(102); }

			DebugLocation(1142, 64);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10037);
			postCases=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(postCases.Tree);


			{
			// AST REWRITE
			// elements: preCases, switchDefaultLabel, postCases
			// token labels: 
			// rule labels: preCases, postCases, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_preCases=new RewriteRuleSubtreeStream(adaptor,"rule preCases",preCases!=null?preCases.Tree:null);
			RewriteRuleSubtreeStream stream_postCases=new RewriteRuleSubtreeStream(adaptor,"rule postCases",postCases!=null?postCases.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1143:9: -> ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? )
			{
				DebugLocation(1143, 13);
				// Java.g:1143:13: ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1143, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

				DebugLocation(1143, 40);
				// Java.g:1143:40: ( $preCases)?
				if (stream_preCases.HasNext)
				{
					DebugLocation(1143, 40);
					adaptor.AddChild(root_1, stream_preCases.NextTree());

				}
				stream_preCases.Reset();
				DebugLocation(1143, 50);
				// Java.g:1143:50: ( switchDefaultLabel )?
				if (stream_switchDefaultLabel.HasNext)
				{
					DebugLocation(1143, 50);
					adaptor.AddChild(root_1, stream_switchDefaultLabel.NextTree());

				}
				stream_switchDefaultLabel.Reset();
				DebugLocation(1143, 71);
				// Java.g:1143:71: ( $postCases)?
				if (stream_postCases.HasNext)
				{
					DebugLocation(1143, 71);
					adaptor.AddChild(root_1, stream_postCases.NextTree());

				}
				stream_postCases.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockLabels", 94);
			LeaveRule("switchBlockLabels", 94);
			LeaveRule_switchBlockLabels();
			if (state.backtracking > 0) { Memoize(input, 94, switchBlockLabels_StartIndex); }

		}
		DebugLocation(1144, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockLabels"); }
		return retval;

	}
	// $ANTLR end "switchBlockLabels"

	partial void EnterRule_switchCaseLabels();
	partial void LeaveRule_switchCaseLabels();
	// $ANTLR start "switchCaseLabels"
	// Java.g:1146:1: switchCaseLabels : ( switchCaseLabel )* ;
	[GrammarRule("switchCaseLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels()
	{
		EnterRule_switchCaseLabels();
		EnterRule("switchCaseLabels", 95);
		TraceIn("switchCaseLabels", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel364 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseLabels");
		DebugLocation(1146, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// Java.g:1147:5: ( ( switchCaseLabel )* )
			DebugEnterAlt(1);
			// Java.g:1147:9: ( switchCaseLabel )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1147, 9);
			// Java.g:1147:9: ( switchCaseLabel )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==CASE))
				{
					int LA103_2 = input.LA(2);

					if ((EvaluatePredicate(synpred146_Java_fragment)))
					{
						alt103 = 1;
					}


				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1147:9: switchCaseLabel
					{
					DebugLocation(1147, 9);
					PushFollow(Follow._switchCaseLabel_in_switchCaseLabels10086);
					switchCaseLabel364=switchCaseLabel();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switchCaseLabel364.Tree);

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabels", 95);
			LeaveRule("switchCaseLabels", 95);
			LeaveRule_switchCaseLabels();
			if (state.backtracking > 0) { Memoize(input, 95, switchCaseLabels_StartIndex); }

		}
		DebugLocation(1148, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabels"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabels"

	partial void EnterRule_switchCaseLabel();
	partial void LeaveRule_switchCaseLabel();
	// $ANTLR start "switchCaseLabel"
	// Java.g:1150:1: switchCaseLabel : CASE ^ expression COLON ! ( blockStatement )* ;
	[GrammarRule("switchCaseLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel()
	{
		EnterRule_switchCaseLabel();
		EnterRule("switchCaseLabel", 96);
		TraceIn("switchCaseLabel", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CASE365 = default(IToken);
		IToken COLON367 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement368 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CASE365_tree = default(CommonTree);
		CommonTree COLON367_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchCaseLabel");
		DebugLocation(1150, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// Java.g:1151:5: ( CASE ^ expression COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:1151:9: CASE ^ expression COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1151, 13);
			CASE365=(IToken)Match(input,CASE,Follow._CASE_in_switchCaseLabel10114); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CASE365_tree = (CommonTree)adaptor.Create(CASE365);
			root_0 = (CommonTree)adaptor.BecomeRoot(CASE365_tree, root_0);
			}
			DebugLocation(1151, 15);
			PushFollow(Follow._expression_in_switchCaseLabel10117);
			expression366=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression366.Tree);
			DebugLocation(1151, 31);
			COLON367=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseLabel10119); if (state.failed) return retval;
			DebugLocation(1151, 33);
			// Java.g:1151:33: ( blockStatement )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_1 = input.LA(1);

				if ((LA104_1==ABSTRACT||LA104_1==ASSERT||LA104_1==AT||(LA104_1>=BOOLEAN && LA104_1<=BYTE)||(LA104_1>=CHAR && LA104_1<=CLASS)||(LA104_1>=CONTINUE && LA104_1<=DEC)||LA104_1==DECIMAL_LITERAL||LA104_1==DO||LA104_1==DOUBLE||LA104_1==ENUM||(LA104_1>=FALSE && LA104_1<=FINAL)||(LA104_1>=FLOAT && LA104_1<=FLOATING_POINT_LITERAL)||LA104_1==FOR||LA104_1==HEX_LITERAL||(LA104_1>=IDENT && LA104_1<=IF)||LA104_1==INC||LA104_1==INT||LA104_1==INTERFACE||LA104_1==LCURLY||LA104_1==LESS_THAN||LA104_1==LOGICAL_NOT||(LA104_1>=LONG && LA104_1<=LPAREN)||LA104_1==MINUS||(LA104_1>=NATIVE && LA104_1<=NEW)||LA104_1==NOT||LA104_1==NULL||LA104_1==OCTAL_LITERAL||LA104_1==PLUS||(LA104_1>=PRIVATE && LA104_1<=PUBLIC)||LA104_1==RETURN||LA104_1==SEMI||LA104_1==SHORT||LA104_1==STATIC||(LA104_1>=STRICTFP && LA104_1<=SUPER)||LA104_1==SWITCH||(LA104_1>=SYNCHRONIZED && LA104_1<=THIS)||LA104_1==THROW||(LA104_1>=TRANSIENT && LA104_1<=TRY)||LA104_1==VOID||(LA104_1>=VOLATILE && LA104_1<=WHILE)))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1151:33: blockStatement
					{
					DebugLocation(1151, 33);
					PushFollow(Follow._blockStatement_in_switchCaseLabel10122);
					blockStatement368=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement368.Tree);

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabel", 96);
			LeaveRule("switchCaseLabel", 96);
			LeaveRule_switchCaseLabel();
			if (state.backtracking > 0) { Memoize(input, 96, switchCaseLabel_StartIndex); }

		}
		DebugLocation(1152, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabel"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabel"

	partial void EnterRule_switchDefaultLabel();
	partial void LeaveRule_switchDefaultLabel();
	// $ANTLR start "switchDefaultLabel"
	// Java.g:1154:1: switchDefaultLabel : DEFAULT ^ COLON ! ( blockStatement )* ;
	[GrammarRule("switchDefaultLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel()
	{
		EnterRule_switchDefaultLabel();
		EnterRule("switchDefaultLabel", 97);
		TraceIn("switchDefaultLabel", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchDefaultLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT369 = default(IToken);
		IToken COLON370 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement371 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT369_tree = default(CommonTree);
		CommonTree COLON370_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchDefaultLabel");
		DebugLocation(1154, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// Java.g:1155:5: ( DEFAULT ^ COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:1155:9: DEFAULT ^ COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1155, 16);
			DEFAULT369=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_switchDefaultLabel10146); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT369_tree = (CommonTree)adaptor.Create(DEFAULT369);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT369_tree, root_0);
			}
			DebugLocation(1155, 23);
			COLON370=(IToken)Match(input,COLON,Follow._COLON_in_switchDefaultLabel10149); if (state.failed) return retval;
			DebugLocation(1155, 25);
			// Java.g:1155:25: ( blockStatement )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==ABSTRACT||LA105_1==ASSERT||LA105_1==AT||(LA105_1>=BOOLEAN && LA105_1<=BYTE)||(LA105_1>=CHAR && LA105_1<=CLASS)||(LA105_1>=CONTINUE && LA105_1<=DEC)||LA105_1==DECIMAL_LITERAL||LA105_1==DO||LA105_1==DOUBLE||LA105_1==ENUM||(LA105_1>=FALSE && LA105_1<=FINAL)||(LA105_1>=FLOAT && LA105_1<=FLOATING_POINT_LITERAL)||LA105_1==FOR||LA105_1==HEX_LITERAL||(LA105_1>=IDENT && LA105_1<=IF)||LA105_1==INC||LA105_1==INT||LA105_1==INTERFACE||LA105_1==LCURLY||LA105_1==LESS_THAN||LA105_1==LOGICAL_NOT||(LA105_1>=LONG && LA105_1<=LPAREN)||LA105_1==MINUS||(LA105_1>=NATIVE && LA105_1<=NEW)||LA105_1==NOT||LA105_1==NULL||LA105_1==OCTAL_LITERAL||LA105_1==PLUS||(LA105_1>=PRIVATE && LA105_1<=PUBLIC)||LA105_1==RETURN||LA105_1==SEMI||LA105_1==SHORT||LA105_1==STATIC||(LA105_1>=STRICTFP && LA105_1<=SUPER)||LA105_1==SWITCH||(LA105_1>=SYNCHRONIZED && LA105_1<=THIS)||LA105_1==THROW||(LA105_1>=TRANSIENT && LA105_1<=TRY)||LA105_1==VOID||(LA105_1>=VOLATILE && LA105_1<=WHILE)))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1155:25: blockStatement
					{
					DebugLocation(1155, 25);
					PushFollow(Follow._blockStatement_in_switchDefaultLabel10152);
					blockStatement371=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement371.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchDefaultLabel", 97);
			LeaveRule("switchDefaultLabel", 97);
			LeaveRule_switchDefaultLabel();
			if (state.backtracking > 0) { Memoize(input, 97, switchDefaultLabel_StartIndex); }

		}
		DebugLocation(1156, 4);
		} finally { DebugExitRule(GrammarFileName, "switchDefaultLabel"); }
		return retval;

	}
	// $ANTLR end "switchDefaultLabel"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// Java.g:1158:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 98);
		TraceIn("forInit", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList373 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(1158, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// Java.g:1159:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
			int alt106=3;
			try { DebugEnterDecision(106, false);
			switch (input.LA(1))
			{
			case AT:
			case FINAL:
				{
				alt106 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt106 = 1;
				}
				else if ((EvaluatePredicate(synpred150_Java_fragment)))
				{
					alt106 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt106 = 1;
				}
				else if ((EvaluatePredicate(synpred150_Java_fragment)))
				{
					alt106 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case INC:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt106 = 2;
				}
				break;
			case SEMI:
				{
				alt106 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1159:9: localVariableDeclaration
				{
				DebugLocation(1159, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit10176);
				localVariableDeclaration372=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_localVariableDeclaration.Add(localVariableDeclaration372.Tree);


				{
				// AST REWRITE
				// elements: localVariableDeclaration
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1159:37: -> ^( FOR_INIT localVariableDeclaration )
				{
					DebugLocation(1159, 41);
					// Java.g:1159:41: ^( FOR_INIT localVariableDeclaration )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1159, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(1159, 52);
					adaptor.AddChild(root_1, stream_localVariableDeclaration.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1160:9: expressionList
				{
				DebugLocation(1160, 9);
				PushFollow(Follow._expressionList_in_forInit10198);
				expressionList373=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList373.Tree);


				{
				// AST REWRITE
				// elements: expressionList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1160:37: -> ^( FOR_INIT expressionList )
				{
					DebugLocation(1160, 41);
					// Java.g:1160:41: ^( FOR_INIT expressionList )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1160, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(1160, 52);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1161:37: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1161:37: -> ^( FOR_INIT )
				{
					DebugLocation(1161, 41);
					// Java.g:1161:41: ^( FOR_INIT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1161, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 98);
			LeaveRule("forInit", 98);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 98, forInit_StartIndex); }

		}
		DebugLocation(1162, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// Java.g:1164:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
	[GrammarRule("forCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 99);
		TraceIn("forCondition", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expression374 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(1164, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// Java.g:1165:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
			DebugEnterAlt(1);
			// Java.g:1165:9: ( expression )?
			{
			DebugLocation(1165, 9);
			// Java.g:1165:9: ( expression )?
			int alt107=2;
			try { DebugEnterSubRule(107);
			try { DebugEnterDecision(107, false);
			int LA107_1 = input.LA(1);

			if ((LA107_1==BOOLEAN||LA107_1==BYTE||(LA107_1>=CHAR && LA107_1<=CHARACTER_LITERAL)||LA107_1==DEC||LA107_1==DECIMAL_LITERAL||LA107_1==DOUBLE||LA107_1==FALSE||(LA107_1>=FLOAT && LA107_1<=FLOATING_POINT_LITERAL)||LA107_1==HEX_LITERAL||LA107_1==IDENT||LA107_1==INC||LA107_1==INT||LA107_1==LESS_THAN||LA107_1==LOGICAL_NOT||(LA107_1>=LONG && LA107_1<=LPAREN)||LA107_1==MINUS||LA107_1==NEW||LA107_1==NOT||LA107_1==NULL||LA107_1==OCTAL_LITERAL||LA107_1==PLUS||LA107_1==SHORT||(LA107_1>=STRING_LITERAL && LA107_1<=SUPER)||LA107_1==THIS||LA107_1==TRUE||LA107_1==VOID))
			{
				alt107 = 1;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1165:9: expression
				{
				DebugLocation(1165, 9);
				PushFollow(Follow._expression_in_forCondition10286);
				expression374=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression374.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(107); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1166:9: -> ^( FOR_CONDITION ( expression )? )
			{
				DebugLocation(1166, 13);
				// Java.g:1166:13: ^( FOR_CONDITION ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1166, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_1);

				DebugLocation(1166, 29);
				// Java.g:1166:29: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(1166, 29);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 99);
			LeaveRule("forCondition", 99);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 99, forCondition_StartIndex); }

		}
		DebugLocation(1167, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdater();
	partial void LeaveRule_forUpdater();
	// $ANTLR start "forUpdater"
	// Java.g:1169:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
	[GrammarRule("forUpdater")]
	private AstParserRuleReturnScope<CommonTree, IToken> forUpdater()
	{
		EnterRule_forUpdater();
		EnterRule("forUpdater", 100);
		TraceIn("forUpdater", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forUpdater_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expressionList375 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "forUpdater");
		DebugLocation(1169, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// Java.g:1170:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
			DebugEnterAlt(1);
			// Java.g:1170:9: ( expressionList )?
			{
			DebugLocation(1170, 9);
			// Java.g:1170:9: ( expressionList )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_1 = input.LA(1);

			if ((LA108_1==BOOLEAN||LA108_1==BYTE||(LA108_1>=CHAR && LA108_1<=CHARACTER_LITERAL)||LA108_1==DEC||LA108_1==DECIMAL_LITERAL||LA108_1==DOUBLE||LA108_1==FALSE||(LA108_1>=FLOAT && LA108_1<=FLOATING_POINT_LITERAL)||LA108_1==HEX_LITERAL||LA108_1==IDENT||LA108_1==INC||LA108_1==INT||LA108_1==LESS_THAN||LA108_1==LOGICAL_NOT||(LA108_1>=LONG && LA108_1<=LPAREN)||LA108_1==MINUS||LA108_1==NEW||LA108_1==NOT||LA108_1==NULL||LA108_1==OCTAL_LITERAL||LA108_1==PLUS||LA108_1==SHORT||(LA108_1>=STRING_LITERAL && LA108_1<=SUPER)||LA108_1==THIS||LA108_1==TRUE||LA108_1==VOID))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1170:9: expressionList
				{
				DebugLocation(1170, 9);
				PushFollow(Follow._expressionList_in_forUpdater10328);
				expressionList375=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList375.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(108); }



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1171:9: -> ^( FOR_UPDATE ( expressionList )? )
			{
				DebugLocation(1171, 13);
				// Java.g:1171:13: ^( FOR_UPDATE ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1171, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_UPDATE, "FOR_UPDATE"), root_1);

				DebugLocation(1171, 26);
				// Java.g:1171:26: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(1171, 26);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdater", 100);
			LeaveRule("forUpdater", 100);
			LeaveRule_forUpdater();
			if (state.backtracking > 0) { Memoize(input, 100, forUpdater_StartIndex); }

		}
		DebugLocation(1172, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdater"); }
		return retval;

	}
	// $ANTLR end "forUpdater"

	partial void EnterRule_parenthesizedExpression();
	partial void LeaveRule_parenthesizedExpression();
	// $ANTLR start "parenthesizedExpression"
	// Java.g:1176:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
	[GrammarRule("parenthesizedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression()
	{
		EnterRule_parenthesizedExpression();
		EnterRule("parenthesizedExpression", 101);
		TraceIn("parenthesizedExpression", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parenthesizedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN376 = default(IToken);
		IToken RPAREN378 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression377 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN376_tree = default(CommonTree);
		CommonTree RPAREN378_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "parenthesizedExpression");
		DebugLocation(1176, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// Java.g:1177:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
			DebugEnterAlt(1);
			// Java.g:1177:9: LPAREN expression RPAREN
			{
			DebugLocation(1177, 9);
			LPAREN376=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parenthesizedExpression10368); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN376);

			DebugLocation(1177, 16);
			PushFollow(Follow._expression_in_parenthesizedExpression10370);
			expression377=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression377.Tree);
			DebugLocation(1177, 27);
			RPAREN378=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parenthesizedExpression10372); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN378);



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1178:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
			{
				DebugLocation(1178, 13);
				// Java.g:1178:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1178, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARENTESIZED_EXPR, LPAREN376, "PARENTESIZED_EXPR"), root_1);

				DebugLocation(1178, 63);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parenthesizedExpression", 101);
			LeaveRule("parenthesizedExpression", 101);
			LeaveRule_parenthesizedExpression();
			if (state.backtracking > 0) { Memoize(input, 101, parenthesizedExpression_StartIndex); }

		}
		DebugLocation(1179, 4);
		} finally { DebugExitRule(GrammarFileName, "parenthesizedExpression"); }
		return retval;

	}
	// $ANTLR end "parenthesizedExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// Java.g:1181:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 102);
		TraceIn("expressionList", 102);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA380 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression379 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA380_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(1181, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// Java.g:1182:5: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// Java.g:1182:9: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1182, 9);
			PushFollow(Follow._expression_in_expressionList10413);
			expression379=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression379.Tree);
			DebugLocation(1182, 20);
			// Java.g:1182:20: ( COMMA ! expression )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if ((LA109_1==COMMA))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1182:21: COMMA ! expression
					{
					DebugLocation(1182, 26);
					COMMA380=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList10416); if (state.failed) return retval;
					DebugLocation(1182, 28);
					PushFollow(Follow._expression_in_expressionList10419);
					expression381=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression381.Tree);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 102);
			LeaveRule("expressionList", 102);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 102, expressionList_StartIndex); }

		}
		DebugLocation(1184, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Java.g:1186:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 103);
		TraceIn("expression", 103);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression382 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(1186, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// Java.g:1187:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
			DebugEnterAlt(1);
			// Java.g:1187:9: assignmentExpression
			{
			DebugLocation(1187, 9);
			PushFollow(Follow._assignmentExpression_in_expression10445);
			assignmentExpression382=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression382.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1188:9: -> ^( EXPR assignmentExpression )
			{
				DebugLocation(1188, 13);
				// Java.g:1188:13: ^( EXPR assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1188, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(1188, 20);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 103);
			LeaveRule("expression", 103);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 103, expression_StartIndex); }

		}
		DebugLocation(1189, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Java.g:1191:1: assignmentExpression : conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 104);
		TraceIn("assignmentExpression", 104);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN384 = default(IToken);
		IToken PLUS_ASSIGN385 = default(IToken);
		IToken MINUS_ASSIGN386 = default(IToken);
		IToken STAR_ASSIGN387 = default(IToken);
		IToken DIV_ASSIGN388 = default(IToken);
		IToken AND_ASSIGN389 = default(IToken);
		IToken OR_ASSIGN390 = default(IToken);
		IToken XOR_ASSIGN391 = default(IToken);
		IToken MOD_ASSIGN392 = default(IToken);
		IToken SHIFT_LEFT_ASSIGN393 = default(IToken);
		IToken SHIFT_RIGHT_ASSIGN394 = default(IToken);
		IToken BIT_SHIFT_RIGHT_ASSIGN395 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression396 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN384_tree = default(CommonTree);
		CommonTree PLUS_ASSIGN385_tree = default(CommonTree);
		CommonTree MINUS_ASSIGN386_tree = default(CommonTree);
		CommonTree STAR_ASSIGN387_tree = default(CommonTree);
		CommonTree DIV_ASSIGN388_tree = default(CommonTree);
		CommonTree AND_ASSIGN389_tree = default(CommonTree);
		CommonTree OR_ASSIGN390_tree = default(CommonTree);
		CommonTree XOR_ASSIGN391_tree = default(CommonTree);
		CommonTree MOD_ASSIGN392_tree = default(CommonTree);
		CommonTree SHIFT_LEFT_ASSIGN393_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT_ASSIGN394_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT_ASSIGN395_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(1191, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// Java.g:1192:5: ( conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? )
			DebugEnterAlt(1);
			// Java.g:1192:9: conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1192, 9);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression10481);
			conditionalExpression383=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression383.Tree);
			DebugLocation(1193, 9);
			// Java.g:1193:9: ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==AND_ASSIGN||LA111_1==ASSIGN||LA111_1==BIT_SHIFT_RIGHT_ASSIGN||LA111_1==DIV_ASSIGN||LA111_1==MINUS_ASSIGN||LA111_1==MOD_ASSIGN||LA111_1==OR_ASSIGN||LA111_1==PLUS_ASSIGN||LA111_1==SHIFT_LEFT_ASSIGN||LA111_1==SHIFT_RIGHT_ASSIGN||LA111_1==STAR_ASSIGN||LA111_1==XOR_ASSIGN))
			{
				alt111 = 1;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1193:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression
				{
				DebugLocation(1193, 13);
				// Java.g:1193:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^)
				int alt110=12;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, false);
				switch (input.LA(1))
				{
				case ASSIGN:
					{
					alt110 = 1;
					}
					break;
				case PLUS_ASSIGN:
					{
					alt110 = 2;
					}
					break;
				case MINUS_ASSIGN:
					{
					alt110 = 3;
					}
					break;
				case STAR_ASSIGN:
					{
					alt110 = 4;
					}
					break;
				case DIV_ASSIGN:
					{
					alt110 = 5;
					}
					break;
				case AND_ASSIGN:
					{
					alt110 = 6;
					}
					break;
				case OR_ASSIGN:
					{
					alt110 = 7;
					}
					break;
				case XOR_ASSIGN:
					{
					alt110 = 8;
					}
					break;
				case MOD_ASSIGN:
					{
					alt110 = 9;
					}
					break;
				case SHIFT_LEFT_ASSIGN:
					{
					alt110 = 10;
					}
					break;
				case SHIFT_RIGHT_ASSIGN:
					{
					alt110 = 11;
					}
					break;
				case BIT_SHIFT_RIGHT_ASSIGN:
					{
					alt110 = 12;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 110, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1193:17: ASSIGN ^
					{
					DebugLocation(1193, 23);
					ASSIGN384=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assignmentExpression10500); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ASSIGN384_tree = (CommonTree)adaptor.Create(ASSIGN384);
					root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN384_tree, root_0);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1194:17: PLUS_ASSIGN ^
					{
					DebugLocation(1194, 28);
					PLUS_ASSIGN385=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_assignmentExpression10519); if (state.failed) return retval;
					if (state.backtracking == 0) {
					PLUS_ASSIGN385_tree = (CommonTree)adaptor.Create(PLUS_ASSIGN385);
					root_0 = (CommonTree)adaptor.BecomeRoot(PLUS_ASSIGN385_tree, root_0);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:1195:17: MINUS_ASSIGN ^
					{
					DebugLocation(1195, 29);
					MINUS_ASSIGN386=(IToken)Match(input,MINUS_ASSIGN,Follow._MINUS_ASSIGN_in_assignmentExpression10538); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MINUS_ASSIGN386_tree = (CommonTree)adaptor.Create(MINUS_ASSIGN386);
					root_0 = (CommonTree)adaptor.BecomeRoot(MINUS_ASSIGN386_tree, root_0);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:1196:17: STAR_ASSIGN ^
					{
					DebugLocation(1196, 28);
					STAR_ASSIGN387=(IToken)Match(input,STAR_ASSIGN,Follow._STAR_ASSIGN_in_assignmentExpression10557); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STAR_ASSIGN387_tree = (CommonTree)adaptor.Create(STAR_ASSIGN387);
					root_0 = (CommonTree)adaptor.BecomeRoot(STAR_ASSIGN387_tree, root_0);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:1197:17: DIV_ASSIGN ^
					{
					DebugLocation(1197, 27);
					DIV_ASSIGN388=(IToken)Match(input,DIV_ASSIGN,Follow._DIV_ASSIGN_in_assignmentExpression10576); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DIV_ASSIGN388_tree = (CommonTree)adaptor.Create(DIV_ASSIGN388);
					root_0 = (CommonTree)adaptor.BecomeRoot(DIV_ASSIGN388_tree, root_0);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// Java.g:1198:17: AND_ASSIGN ^
					{
					DebugLocation(1198, 27);
					AND_ASSIGN389=(IToken)Match(input,AND_ASSIGN,Follow._AND_ASSIGN_in_assignmentExpression10595); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND_ASSIGN389_tree = (CommonTree)adaptor.Create(AND_ASSIGN389);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND_ASSIGN389_tree, root_0);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// Java.g:1199:17: OR_ASSIGN ^
					{
					DebugLocation(1199, 26);
					OR_ASSIGN390=(IToken)Match(input,OR_ASSIGN,Follow._OR_ASSIGN_in_assignmentExpression10614); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR_ASSIGN390_tree = (CommonTree)adaptor.Create(OR_ASSIGN390);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR_ASSIGN390_tree, root_0);
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// Java.g:1200:17: XOR_ASSIGN ^
					{
					DebugLocation(1200, 27);
					XOR_ASSIGN391=(IToken)Match(input,XOR_ASSIGN,Follow._XOR_ASSIGN_in_assignmentExpression10633); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR_ASSIGN391_tree = (CommonTree)adaptor.Create(XOR_ASSIGN391);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR_ASSIGN391_tree, root_0);
					}

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// Java.g:1201:17: MOD_ASSIGN ^
					{
					DebugLocation(1201, 27);
					MOD_ASSIGN392=(IToken)Match(input,MOD_ASSIGN,Follow._MOD_ASSIGN_in_assignmentExpression10652); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MOD_ASSIGN392_tree = (CommonTree)adaptor.Create(MOD_ASSIGN392);
					root_0 = (CommonTree)adaptor.BecomeRoot(MOD_ASSIGN392_tree, root_0);
					}

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// Java.g:1202:17: SHIFT_LEFT_ASSIGN ^
					{
					DebugLocation(1202, 34);
					SHIFT_LEFT_ASSIGN393=(IToken)Match(input,SHIFT_LEFT_ASSIGN,Follow._SHIFT_LEFT_ASSIGN_in_assignmentExpression10671); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_LEFT_ASSIGN393_tree = (CommonTree)adaptor.Create(SHIFT_LEFT_ASSIGN393);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT_ASSIGN393_tree, root_0);
					}

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// Java.g:1203:17: SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(1203, 35);
					SHIFT_RIGHT_ASSIGN394=(IToken)Match(input,SHIFT_RIGHT_ASSIGN,Follow._SHIFT_RIGHT_ASSIGN_in_assignmentExpression10690); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_RIGHT_ASSIGN394_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT_ASSIGN394);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT_ASSIGN394_tree, root_0);
					}

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// Java.g:1204:17: BIT_SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(1204, 39);
					BIT_SHIFT_RIGHT_ASSIGN395=(IToken)Match(input,BIT_SHIFT_RIGHT_ASSIGN,Follow._BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10709); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BIT_SHIFT_RIGHT_ASSIGN395_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT_ASSIGN395);
					root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT_ASSIGN395_tree, root_0);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(1206, 9);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression10731);
				assignmentExpression396=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression396.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 104);
			LeaveRule("assignmentExpression", 104);
			LeaveRule_assignmentExpression();
			if (state.backtracking > 0) { Memoize(input, 104, assignmentExpression_StartIndex); }

		}
		DebugLocation(1207, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// Java.g:1209:1: conditionalExpression : logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 105);
		TraceIn("conditionalExpression", 105);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION398 = default(IToken);
		IToken COLON400 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression397 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression401 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION398_tree = default(CommonTree);
		CommonTree COLON400_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1209, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// Java.g:1210:5: ( logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? )
			DebugEnterAlt(1);
			// Java.g:1210:9: logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1210, 9);
			PushFollow(Follow._logicalOrExpression_in_conditionalExpression10756);
			logicalOrExpression397=logicalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOrExpression397.Tree);
			DebugLocation(1210, 29);
			// Java.g:1210:29: ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			int LA112_1 = input.LA(1);

			if ((LA112_1==QUESTION))
			{
				alt112 = 1;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1210:30: QUESTION ^ assignmentExpression COLON ! conditionalExpression
				{
				DebugLocation(1210, 38);
				QUESTION398=(IToken)Match(input,QUESTION,Follow._QUESTION_in_conditionalExpression10759); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION398_tree = (CommonTree)adaptor.Create(QUESTION398);
				root_0 = (CommonTree)adaptor.BecomeRoot(QUESTION398_tree, root_0);
				}
				DebugLocation(1210, 40);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression10762);
				assignmentExpression399=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression399.Tree);
				DebugLocation(1210, 66);
				COLON400=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression10764); if (state.failed) return retval;
				DebugLocation(1210, 68);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression10767);
				conditionalExpression401=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression401.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 105);
			LeaveRule("conditionalExpression", 105);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 105, conditionalExpression_StartIndex); }

		}
		DebugLocation(1211, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();
	// $ANTLR start "logicalOrExpression"
	// Java.g:1213:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 106);
		TraceIn("logicalOrExpression", 106);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR403 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression402 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression404 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR403_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(1213, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// Java.g:1214:5: ( logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* )
			DebugEnterAlt(1);
			// Java.g:1214:9: logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1214, 9);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10788);
			logicalAndExpression402=logicalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression402.Tree);
			DebugLocation(1214, 30);
			// Java.g:1214:30: ( LOGICAL_OR ^ logicalAndExpression )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_1 = input.LA(1);

				if ((LA113_1==LOGICAL_OR))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1214:31: LOGICAL_OR ^ logicalAndExpression
					{
					DebugLocation(1214, 41);
					LOGICAL_OR403=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_logicalOrExpression10791); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_OR403_tree = (CommonTree)adaptor.Create(LOGICAL_OR403);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR403_tree, root_0);
					}
					DebugLocation(1214, 43);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10794);
					logicalAndExpression404=logicalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression404.Tree);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOrExpression", 106);
			LeaveRule("logicalOrExpression", 106);
			LeaveRule_logicalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 106, logicalOrExpression_StartIndex); }

		}
		DebugLocation(1215, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();
	// $ANTLR start "logicalAndExpression"
	// Java.g:1217:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 107);
		TraceIn("logicalAndExpression", 107);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalAndExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND406 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression405 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression407 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND406_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(1217, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// Java.g:1218:5: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:1218:9: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1218, 9);
			PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression10815);
			inclusiveOrExpression405=inclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression405.Tree);
			DebugLocation(1218, 31);
			// Java.g:1218:31: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==LOGICAL_AND))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1218:32: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(1218, 43);
					LOGICAL_AND406=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_logicalAndExpression10818); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_AND406_tree = (CommonTree)adaptor.Create(LOGICAL_AND406);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND406_tree, root_0);
					}
					DebugLocation(1218, 45);
					PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression10821);
					inclusiveOrExpression407=inclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression407.Tree);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAndExpression", 107);
			LeaveRule("logicalAndExpression", 107);
			LeaveRule_logicalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 107, logicalAndExpression_StartIndex); }

		}
		DebugLocation(1219, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();
	// $ANTLR start "inclusiveOrExpression"
	// Java.g:1221:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 108);
		TraceIn("inclusiveOrExpression", 108);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int inclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken OR409 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression408 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression410 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR409_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(1221, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// Java.g:1222:5: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:1222:9: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1222, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression10842);
			exclusiveOrExpression408=exclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression408.Tree);
			DebugLocation(1222, 31);
			// Java.g:1222:31: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==OR))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1222:32: OR ^ exclusiveOrExpression
					{
					DebugLocation(1222, 34);
					OR409=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression10845); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR409_tree = (CommonTree)adaptor.Create(OR409);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR409_tree, root_0);
					}
					DebugLocation(1222, 36);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression10848);
					exclusiveOrExpression410=exclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression410.Tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 108);
			LeaveRule("inclusiveOrExpression", 108);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 108, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1223, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();
	// $ANTLR start "exclusiveOrExpression"
	// Java.g:1225:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 109);
		TraceIn("exclusiveOrExpression", 109);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int exclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken XOR412 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression411 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression413 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR412_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(1225, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// Java.g:1226:5: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// Java.g:1226:9: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1226, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression10869);
			andExpression411=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression411.Tree);
			DebugLocation(1226, 23);
			// Java.g:1226:23: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==XOR))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1226:24: XOR ^ andExpression
					{
					DebugLocation(1226, 27);
					XOR412=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression10872); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR412_tree = (CommonTree)adaptor.Create(XOR412);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR412_tree, root_0);
					}
					DebugLocation(1226, 29);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression10875);
					andExpression413=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression413.Tree);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 109);
			LeaveRule("exclusiveOrExpression", 109);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 109, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1227, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Java.g:1229:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 110);
		TraceIn("andExpression", 110);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int andExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AND415 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression414 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression416 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND415_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(1229, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// Java.g:1230:5: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// Java.g:1230:9: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1230, 9);
			PushFollow(Follow._equalityExpression_in_andExpression10896);
			equalityExpression414=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression414.Tree);
			DebugLocation(1230, 28);
			// Java.g:1230:28: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_1 = input.LA(1);

				if ((LA117_1==AND))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1230:29: AND ^ equalityExpression
					{
					DebugLocation(1230, 32);
					AND415=(IToken)Match(input,AND,Follow._AND_in_andExpression10899); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND415_tree = (CommonTree)adaptor.Create(AND415);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND415_tree, root_0);
					}
					DebugLocation(1230, 34);
					PushFollow(Follow._equalityExpression_in_andExpression10902);
					equalityExpression416=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression416.Tree);

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 110);
			LeaveRule("andExpression", 110);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 110, andExpression_StartIndex); }

		}
		DebugLocation(1231, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// Java.g:1233:1: equalityExpression : instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 111);
		TraceIn("equalityExpression", 111);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EQUAL418 = default(IToken);
		IToken NOT_EQUAL419 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression420 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EQUAL418_tree = default(CommonTree);
		CommonTree NOT_EQUAL419_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1233, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// Java.g:1234:5: ( instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* )
			DebugEnterAlt(1);
			// Java.g:1234:9: instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1234, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression10923);
			instanceOfExpression417=instanceOfExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression417.Tree);
			DebugLocation(1235, 9);
			// Java.g:1235:9: ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_1 = input.LA(1);

				if ((LA119_1==EQUAL||LA119_1==NOT_EQUAL))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1235:13: ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression
					{
					DebugLocation(1235, 13);
					// Java.g:1235:13: ( EQUAL ^| NOT_EQUAL ^)
					int alt118=2;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, false);
					int LA118_1 = input.LA(1);

					if ((LA118_1==EQUAL))
					{
						alt118 = 1;
					}
					else if ((LA118_1==NOT_EQUAL))
					{
						alt118 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 118, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1235:17: EQUAL ^
						{
						DebugLocation(1235, 22);
						EQUAL418=(IToken)Match(input,EQUAL,Follow._EQUAL_in_equalityExpression10942); if (state.failed) return retval;
						if (state.backtracking == 0) {
						EQUAL418_tree = (CommonTree)adaptor.Create(EQUAL418);
						root_0 = (CommonTree)adaptor.BecomeRoot(EQUAL418_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1236:17: NOT_EQUAL ^
						{
						DebugLocation(1236, 26);
						NOT_EQUAL419=(IToken)Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_equalityExpression10961); if (state.failed) return retval;
						if (state.backtracking == 0) {
						NOT_EQUAL419_tree = (CommonTree)adaptor.Create(NOT_EQUAL419);
						root_0 = (CommonTree)adaptor.BecomeRoot(NOT_EQUAL419_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(118); }

					DebugLocation(1238, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression10991);
					instanceOfExpression420=instanceOfExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression420.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 111);
			LeaveRule("equalityExpression", 111);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 111, equalityExpression_StartIndex); }

		}
		DebugLocation(1240, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();
	// $ANTLR start "instanceOfExpression"
	// Java.g:1242:1: instanceOfExpression : relationalExpression ( INSTANCEOF ^ type )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 112);
		TraceIn("instanceOfExpression", 112);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOfExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INSTANCEOF422 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression421 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type423 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INSTANCEOF422_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(1242, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// Java.g:1243:5: ( relationalExpression ( INSTANCEOF ^ type )? )
			DebugEnterAlt(1);
			// Java.g:1243:9: relationalExpression ( INSTANCEOF ^ type )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1243, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression11021);
			relationalExpression421=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression421.Tree);
			DebugLocation(1243, 30);
			// Java.g:1243:30: ( INSTANCEOF ^ type )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_1 = input.LA(1);

			if ((LA120_1==INSTANCEOF))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1243:31: INSTANCEOF ^ type
				{
				DebugLocation(1243, 41);
				INSTANCEOF422=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression11024); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INSTANCEOF422_tree = (CommonTree)adaptor.Create(INSTANCEOF422);
				root_0 = (CommonTree)adaptor.BecomeRoot(INSTANCEOF422_tree, root_0);
				}
				DebugLocation(1243, 43);
				PushFollow(Follow._type_in_instanceOfExpression11027);
				type423=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type423.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 112);
			LeaveRule("instanceOfExpression", 112);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 112, instanceOfExpression_StartIndex); }

		}
		DebugLocation(1244, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// Java.g:1246:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 113);
		TraceIn("relationalExpression", 113);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_OR_EQUAL425 = default(IToken);
		IToken GREATER_OR_EQUAL426 = default(IToken);
		IToken LESS_THAN427 = default(IToken);
		IToken GREATER_THAN428 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression424 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression429 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_OR_EQUAL425_tree = default(CommonTree);
		CommonTree GREATER_OR_EQUAL426_tree = default(CommonTree);
		CommonTree LESS_THAN427_tree = default(CommonTree);
		CommonTree GREATER_THAN428_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1246, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// Java.g:1247:5: ( shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* )
			DebugEnterAlt(1);
			// Java.g:1247:9: shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1247, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression11048);
			shiftExpression424=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression424.Tree);
			DebugLocation(1248, 9);
			// Java.g:1248:9: ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, false);
				int LA122_1 = input.LA(1);

				if (((LA122_1>=GREATER_OR_EQUAL && LA122_1<=GREATER_THAN)||(LA122_1>=LESS_OR_EQUAL && LA122_1<=LESS_THAN)))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1248:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression
					{
					DebugLocation(1248, 13);
					// Java.g:1248:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^)
					int alt121=4;
					try { DebugEnterSubRule(121);
					try { DebugEnterDecision(121, false);
					switch (input.LA(1))
					{
					case LESS_OR_EQUAL:
						{
						alt121 = 1;
						}
						break;
					case GREATER_OR_EQUAL:
						{
						alt121 = 2;
						}
						break;
					case LESS_THAN:
						{
						alt121 = 3;
						}
						break;
					case GREATER_THAN:
						{
						alt121 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 121, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1248:17: LESS_OR_EQUAL ^
						{
						DebugLocation(1248, 30);
						LESS_OR_EQUAL425=(IToken)Match(input,LESS_OR_EQUAL,Follow._LESS_OR_EQUAL_in_relationalExpression11067); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_OR_EQUAL425_tree = (CommonTree)adaptor.Create(LESS_OR_EQUAL425);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_OR_EQUAL425_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1249:17: GREATER_OR_EQUAL ^
						{
						DebugLocation(1249, 33);
						GREATER_OR_EQUAL426=(IToken)Match(input,GREATER_OR_EQUAL,Follow._GREATER_OR_EQUAL_in_relationalExpression11086); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_OR_EQUAL426_tree = (CommonTree)adaptor.Create(GREATER_OR_EQUAL426);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_OR_EQUAL426_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:1250:17: LESS_THAN ^
						{
						DebugLocation(1250, 26);
						LESS_THAN427=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_relationalExpression11105); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_THAN427_tree = (CommonTree)adaptor.Create(LESS_THAN427);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_THAN427_tree, root_0);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// Java.g:1251:17: GREATER_THAN ^
						{
						DebugLocation(1251, 29);
						GREATER_THAN428=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_relationalExpression11124); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_THAN428_tree = (CommonTree)adaptor.Create(GREATER_THAN428);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_THAN428_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(121); }

					DebugLocation(1253, 13);
					PushFollow(Follow._shiftExpression_in_relationalExpression11153);
					shiftExpression429=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression429.Tree);

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 113);
			LeaveRule("relationalExpression", 113);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 113, relationalExpression_StartIndex); }

		}
		DebugLocation(1255, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// Java.g:1257:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 114);
		TraceIn("shiftExpression", 114);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken BIT_SHIFT_RIGHT431 = default(IToken);
		IToken SHIFT_RIGHT432 = default(IToken);
		IToken SHIFT_LEFT433 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression434 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree BIT_SHIFT_RIGHT431_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT432_tree = default(CommonTree);
		CommonTree SHIFT_LEFT433_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1257, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// Java.g:1258:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* )
			DebugEnterAlt(1);
			// Java.g:1258:9: additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1258, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression11187);
			additiveExpression430=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression430.Tree);
			DebugLocation(1259, 9);
			// Java.g:1259:9: ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_1 = input.LA(1);

				if ((LA124_1==BIT_SHIFT_RIGHT||LA124_1==SHIFT_LEFT||LA124_1==SHIFT_RIGHT))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1259:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression
					{
					DebugLocation(1259, 13);
					// Java.g:1259:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^)
					int alt123=3;
					try { DebugEnterSubRule(123);
					try { DebugEnterDecision(123, false);
					switch (input.LA(1))
					{
					case BIT_SHIFT_RIGHT:
						{
						alt123 = 1;
						}
						break;
					case SHIFT_RIGHT:
						{
						alt123 = 2;
						}
						break;
					case SHIFT_LEFT:
						{
						alt123 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 123, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1259:17: BIT_SHIFT_RIGHT ^
						{
						DebugLocation(1259, 32);
						BIT_SHIFT_RIGHT431=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_shiftExpression11205); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BIT_SHIFT_RIGHT431_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT431);
						root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT431_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1260:17: SHIFT_RIGHT ^
						{
						DebugLocation(1260, 28);
						SHIFT_RIGHT432=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_shiftExpression11224); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_RIGHT432_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT432);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT432_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:1261:17: SHIFT_LEFT ^
						{
						DebugLocation(1261, 27);
						SHIFT_LEFT433=(IToken)Match(input,SHIFT_LEFT,Follow._SHIFT_LEFT_in_shiftExpression11243); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_LEFT433_tree = (CommonTree)adaptor.Create(SHIFT_LEFT433);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT433_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(123); }

					DebugLocation(1263, 13);
					PushFollow(Follow._additiveExpression_in_shiftExpression11272);
					additiveExpression434=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression434.Tree);

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 114);
			LeaveRule("shiftExpression", 114);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 114, shiftExpression_StartIndex); }

		}
		DebugLocation(1265, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// Java.g:1267:1: additiveExpression : multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 115);
		TraceIn("additiveExpression", 115);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS436 = default(IToken);
		IToken MINUS437 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression438 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS436_tree = default(CommonTree);
		CommonTree MINUS437_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1267, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// Java.g:1268:5: ( multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// Java.g:1268:9: multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1268, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression11302);
			multiplicativeExpression435=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression435.Tree);
			DebugLocation(1269, 9);
			// Java.g:1269:9: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_1 = input.LA(1);

				if ((LA126_1==MINUS||LA126_1==PLUS))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1269:13: ( PLUS ^| MINUS ^) multiplicativeExpression
					{
					DebugLocation(1269, 13);
					// Java.g:1269:13: ( PLUS ^| MINUS ^)
					int alt125=2;
					try { DebugEnterSubRule(125);
					try { DebugEnterDecision(125, false);
					int LA125_1 = input.LA(1);

					if ((LA125_1==PLUS))
					{
						alt125 = 1;
					}
					else if ((LA125_1==MINUS))
					{
						alt125 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 125, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1269:17: PLUS ^
						{
						DebugLocation(1269, 21);
						PLUS436=(IToken)Match(input,PLUS,Follow._PLUS_in_additiveExpression11320); if (state.failed) return retval;
						if (state.backtracking == 0) {
						PLUS436_tree = (CommonTree)adaptor.Create(PLUS436);
						root_0 = (CommonTree)adaptor.BecomeRoot(PLUS436_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1270:17: MINUS ^
						{
						DebugLocation(1270, 22);
						MINUS437=(IToken)Match(input,MINUS,Follow._MINUS_in_additiveExpression11339); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MINUS437_tree = (CommonTree)adaptor.Create(MINUS437);
						root_0 = (CommonTree)adaptor.BecomeRoot(MINUS437_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(125); }

					DebugLocation(1272, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression11368);
					multiplicativeExpression438=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression438.Tree);

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 115);
			LeaveRule("additiveExpression", 115);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 115, additiveExpression_StartIndex); }

		}
		DebugLocation(1274, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// Java.g:1276:1: multiplicativeExpression : unaryExpressionAll ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 116);
		TraceIn("multiplicativeExpression", 116);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken STAR440 = default(IToken);
		IToken DIV441 = default(IToken);
		IToken MOD442 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll443 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STAR440_tree = default(CommonTree);
		CommonTree DIV441_tree = default(CommonTree);
		CommonTree MOD442_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1276, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// Java.g:1277:5: ( unaryExpressionAll ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )* )
			DebugEnterAlt(1);
			// Java.g:1277:9: unaryExpressionAll ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1277, 9);
			PushFollow(Follow._unaryExpressionAll_in_multiplicativeExpression11398);
			unaryExpressionAll439=unaryExpressionAll();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionAll439.Tree);
			DebugLocation(1278, 9);
			// Java.g:1278:9: ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_1 = input.LA(1);

				if ((LA128_1==DIV||LA128_1==MOD||LA128_1==STAR))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1278:13: ( STAR ^| DIV ^| MOD ^) unaryExpressionAll
					{
					DebugLocation(1278, 13);
					// Java.g:1278:13: ( STAR ^| DIV ^| MOD ^)
					int alt127=3;
					try { DebugEnterSubRule(127);
					try { DebugEnterDecision(127, false);
					switch (input.LA(1))
					{
					case STAR:
						{
						alt127 = 1;
						}
						break;
					case DIV:
						{
						alt127 = 2;
						}
						break;
					case MOD:
						{
						alt127 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(127); }
					switch (alt127)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1278:17: STAR ^
						{
						DebugLocation(1278, 21);
						STAR440=(IToken)Match(input,STAR,Follow._STAR_in_multiplicativeExpression11417); if (state.failed) return retval;
						if (state.backtracking == 0) {
						STAR440_tree = (CommonTree)adaptor.Create(STAR440);
						root_0 = (CommonTree)adaptor.BecomeRoot(STAR440_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1279:17: DIV ^
						{
						DebugLocation(1279, 20);
						DIV441=(IToken)Match(input,DIV,Follow._DIV_in_multiplicativeExpression11436); if (state.failed) return retval;
						if (state.backtracking == 0) {
						DIV441_tree = (CommonTree)adaptor.Create(DIV441);
						root_0 = (CommonTree)adaptor.BecomeRoot(DIV441_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:1280:17: MOD ^
						{
						DebugLocation(1280, 20);
						MOD442=(IToken)Match(input,MOD,Follow._MOD_in_multiplicativeExpression11455); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MOD442_tree = (CommonTree)adaptor.Create(MOD442);
						root_0 = (CommonTree)adaptor.BecomeRoot(MOD442_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(127); }

					DebugLocation(1282, 13);
					PushFollow(Follow._unaryExpressionAll_in_multiplicativeExpression11484);
					unaryExpressionAll443=unaryExpressionAll();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionAll443.Tree);

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 116);
			LeaveRule("multiplicativeExpression", 116);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 116, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(1284, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpressionAll();
	partial void LeaveRule_unaryExpressionAll();
	// $ANTLR start "unaryExpressionAll"
	// Java.g:1286:1: unaryExpressionAll : ( PLUS unaryExpressionAll -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll ) | MINUS unaryExpressionAll -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionRest );
	[GrammarRule("unaryExpressionAll")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll()
	{
		EnterRule_unaryExpressionAll();
		EnterRule("unaryExpressionAll", 117);
		TraceIn("unaryExpressionAll", 117);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpressionAll_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS444 = default(IToken);
		IToken MINUS446 = default(IToken);
		IToken INC448 = default(IToken);
		IToken DEC450 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll445 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll447 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression449 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression451 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionRest452 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS444_tree = default(CommonTree);
		CommonTree MINUS446_tree = default(CommonTree);
		CommonTree INC448_tree = default(CommonTree);
		CommonTree DEC450_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleSubtreeStream stream_unaryExpressionAll=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionAll");
		RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpressionAll");
		DebugLocation(1286, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// Java.g:1287:5: ( PLUS unaryExpressionAll -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll ) | MINUS unaryExpressionAll -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionRest )
			int alt129=5;
			try { DebugEnterDecision(129, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt129 = 1;
				}
				break;
			case MINUS:
				{
				alt129 = 2;
				}
				break;
			case INC:
				{
				alt129 = 3;
				}
				break;
			case DEC:
				{
				alt129 = 4;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt129 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 129, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1287:9: PLUS unaryExpressionAll
				{
				DebugLocation(1287, 9);
				PLUS444=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpressionAll11518); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PLUS.Add(PLUS444);

				DebugLocation(1287, 14);
				PushFollow(Follow._unaryExpressionAll_in_unaryExpressionAll11520);
				unaryExpressionAll445=unaryExpressionAll();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpressionAll.Add(unaryExpressionAll445.Tree);


				{
				// AST REWRITE
				// elements: unaryExpressionAll
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1287:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll )
				{
					DebugLocation(1287, 41);
					// Java.g:1287:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1287, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_PLUS, PLUS444, "UNARY_PLUS"), root_1);

					DebugLocation(1287, 75);
					adaptor.AddChild(root_1, stream_unaryExpressionAll.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1288:9: MINUS unaryExpressionAll
				{
				DebugLocation(1288, 9);
				MINUS446=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpressionAll11544); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUS.Add(MINUS446);

				DebugLocation(1288, 15);
				PushFollow(Follow._unaryExpressionAll_in_unaryExpressionAll11546);
				unaryExpressionAll447=unaryExpressionAll();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpressionAll.Add(unaryExpressionAll447.Tree);


				{
				// AST REWRITE
				// elements: unaryExpressionAll
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1288:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll )
				{
					DebugLocation(1288, 41);
					// Java.g:1288:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1288, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_MINUS, MINUS446, "UNARY_MINUS"), root_1);

					DebugLocation(1288, 78);
					adaptor.AddChild(root_1, stream_unaryExpressionAll.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1289:9: INC postfixedExpression
				{
				DebugLocation(1289, 9);
				INC448=(IToken)Match(input,INC,Follow._INC_in_unaryExpressionAll11569); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC448);

				DebugLocation(1289, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpressionAll11571);
				postfixedExpression449=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression449.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1289:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
				{
					DebugLocation(1289, 41);
					// Java.g:1289:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1289, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_INC, INC448, "PRE_INC"), root_1);

					DebugLocation(1289, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1290:9: DEC postfixedExpression
				{
				DebugLocation(1290, 9);
				DEC450=(IToken)Match(input,DEC,Follow._DEC_in_unaryExpressionAll11595); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC450);

				DebugLocation(1290, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpressionAll11597);
				postfixedExpression451=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression451.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1290:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
				{
					DebugLocation(1290, 41);
					// Java.g:1290:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1290, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_DEC, DEC450, "PRE_DEC"), root_1);

					DebugLocation(1290, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1291:9: unaryExpressionRest
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1291, 9);
				PushFollow(Follow._unaryExpressionRest_in_unaryExpressionAll11621);
				unaryExpressionRest452=unaryExpressionRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionRest452.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionAll", 117);
			LeaveRule("unaryExpressionAll", 117);
			LeaveRule_unaryExpressionAll();
			if (state.backtracking > 0) { Memoize(input, 117, unaryExpressionAll_StartIndex); }

		}
		DebugLocation(1292, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionAll"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionAll"

	partial void EnterRule_unaryExpressionRest();
	partial void LeaveRule_unaryExpressionRest();
	// $ANTLR start "unaryExpressionRest"
	// Java.g:1294:1: unaryExpressionRest : ( NOT unaryExpressionAll -> ^( NOT unaryExpressionAll ) | LOGICAL_NOT unaryExpressionAll -> ^( LOGICAL_NOT unaryExpressionAll ) | LPAREN simpleType RPAREN unaryExpressionAll -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll ) | LPAREN objectType RPAREN unaryExpressionRest -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest ) | postfixedExpression );
	[GrammarRule("unaryExpressionRest")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionRest()
	{
		EnterRule_unaryExpressionRest();
		EnterRule("unaryExpressionRest", 118);
		TraceIn("unaryExpressionRest", 118);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpressionRest_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NOT453 = default(IToken);
		IToken LOGICAL_NOT455 = default(IToken);
		IToken LPAREN457 = default(IToken);
		IToken RPAREN459 = default(IToken);
		IToken LPAREN461 = default(IToken);
		IToken RPAREN463 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll454 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll456 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> simpleType458 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionAll460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> objectType462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionRest464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression465 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NOT453_tree = default(CommonTree);
		CommonTree LOGICAL_NOT455_tree = default(CommonTree);
		CommonTree LPAREN457_tree = default(CommonTree);
		CommonTree RPAREN459_tree = default(CommonTree);
		CommonTree LPAREN461_tree = default(CommonTree);
		CommonTree RPAREN463_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_LOGICAL_NOT=new RewriteRuleITokenStream(adaptor,"token LOGICAL_NOT");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_unaryExpressionAll=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionAll");
		RewriteRuleSubtreeStream stream_simpleType=new RewriteRuleSubtreeStream(adaptor,"rule simpleType");
		RewriteRuleSubtreeStream stream_objectType=new RewriteRuleSubtreeStream(adaptor,"rule objectType");
		RewriteRuleSubtreeStream stream_unaryExpressionRest=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionRest");
		try { DebugEnterRule(GrammarFileName, "unaryExpressionRest");
		DebugLocation(1294, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// Java.g:1295:5: ( NOT unaryExpressionAll -> ^( NOT unaryExpressionAll ) | LOGICAL_NOT unaryExpressionAll -> ^( LOGICAL_NOT unaryExpressionAll ) | LPAREN simpleType RPAREN unaryExpressionAll -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll ) | LPAREN objectType RPAREN unaryExpressionRest -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest ) | postfixedExpression )
			int alt130=5;
			try { DebugEnterDecision(130, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				alt130 = 1;
				}
				break;
			case LOGICAL_NOT:
				{
				alt130 = 2;
				}
				break;
			case LPAREN:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_Java_fragment)))
				{
					alt130 = 3;
				}
				else if ((EvaluatePredicate(synpred194_Java_fragment)))
				{
					alt130 = 4;
				}
				else if ((true))
				{
					alt130 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case NEW:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt130 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1295:9: NOT unaryExpressionAll
				{
				DebugLocation(1295, 9);
				NOT453=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpressionRest11640); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT453);

				DebugLocation(1295, 13);
				PushFollow(Follow._unaryExpressionAll_in_unaryExpressionRest11642);
				unaryExpressionAll454=unaryExpressionAll();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpressionAll.Add(unaryExpressionAll454.Tree);


				{
				// AST REWRITE
				// elements: NOT, unaryExpressionAll
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1295:57: -> ^( NOT unaryExpressionAll )
				{
					DebugLocation(1295, 61);
					// Java.g:1295:61: ^( NOT unaryExpressionAll )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1295, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NOT.NextNode(), root_1);

					DebugLocation(1295, 67);
					adaptor.AddChild(root_1, stream_unaryExpressionAll.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1296:9: LOGICAL_NOT unaryExpressionAll
				{
				DebugLocation(1296, 9);
				LOGICAL_NOT455=(IToken)Match(input,LOGICAL_NOT,Follow._LOGICAL_NOT_in_unaryExpressionRest11686); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOGICAL_NOT.Add(LOGICAL_NOT455);

				DebugLocation(1296, 21);
				PushFollow(Follow._unaryExpressionAll_in_unaryExpressionRest11688);
				unaryExpressionAll456=unaryExpressionAll();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpressionAll.Add(unaryExpressionAll456.Tree);


				{
				// AST REWRITE
				// elements: LOGICAL_NOT, unaryExpressionAll
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1296:57: -> ^( LOGICAL_NOT unaryExpressionAll )
				{
					DebugLocation(1296, 61);
					// Java.g:1296:61: ^( LOGICAL_NOT unaryExpressionAll )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1296, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_LOGICAL_NOT.NextNode(), root_1);

					DebugLocation(1296, 75);
					adaptor.AddChild(root_1, stream_unaryExpressionAll.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1297:9: LPAREN simpleType RPAREN unaryExpressionAll
				{
				DebugLocation(1297, 9);
				LPAREN457=(IToken)Match(input,LPAREN,Follow._LPAREN_in_unaryExpressionRest11724); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN457);

				DebugLocation(1297, 16);
				PushFollow(Follow._simpleType_in_unaryExpressionRest11726);
				simpleType458=simpleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_simpleType.Add(simpleType458.Tree);
				DebugLocation(1297, 27);
				RPAREN459=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unaryExpressionRest11728); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN459);

				DebugLocation(1297, 34);
				PushFollow(Follow._unaryExpressionAll_in_unaryExpressionRest11730);
				unaryExpressionAll460=unaryExpressionAll();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpressionAll.Add(unaryExpressionAll460.Tree);


				{
				// AST REWRITE
				// elements: simpleType, unaryExpressionAll
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1297:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll )
				{
					DebugLocation(1297, 61);
					// Java.g:1297:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1297, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, LPAREN457, "CAST_EXPR"), root_1);

					DebugLocation(1297, 95);
					adaptor.AddChild(root_1, stream_simpleType.NextTree());
					DebugLocation(1297, 106);
					adaptor.AddChild(root_1, stream_unaryExpressionAll.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1298:9: LPAREN objectType RPAREN unaryExpressionRest
				{
				DebugLocation(1298, 9);
				LPAREN461=(IToken)Match(input,LPAREN,Follow._LPAREN_in_unaryExpressionRest11756); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN461);

				DebugLocation(1298, 16);
				PushFollow(Follow._objectType_in_unaryExpressionRest11758);
				objectType462=objectType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_objectType.Add(objectType462.Tree);
				DebugLocation(1298, 27);
				RPAREN463=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unaryExpressionRest11760); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN463);

				DebugLocation(1298, 34);
				PushFollow(Follow._unaryExpressionRest_in_unaryExpressionRest11762);
				unaryExpressionRest464=unaryExpressionRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpressionRest.Add(unaryExpressionRest464.Tree);


				{
				// AST REWRITE
				// elements: objectType, unaryExpressionRest
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1298:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest )
				{
					DebugLocation(1298, 61);
					// Java.g:1298:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1298, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, LPAREN461, "CAST_EXPR"), root_1);

					DebugLocation(1298, 95);
					adaptor.AddChild(root_1, stream_objectType.NextTree());
					DebugLocation(1298, 106);
					adaptor.AddChild(root_1, stream_unaryExpressionRest.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1299:9: postfixedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1299, 9);
				PushFollow(Follow._postfixedExpression_in_unaryExpressionRest11787);
				postfixedExpression465=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfixedExpression465.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionRest", 118);
			LeaveRule("unaryExpressionRest", 118);
			LeaveRule_unaryExpressionRest();
			if (state.backtracking > 0) { Memoize(input, 118, unaryExpressionRest_StartIndex); }

		}
		DebugLocation(1300, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionRest"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionRest"

	partial void EnterRule_postfixedExpression();
	partial void LeaveRule_postfixedExpression();
	// $ANTLR start "postfixedExpression"
	// Java.g:1302:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
	[GrammarRule("postfixedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression()
	{
		EnterRule_postfixedExpression();
		EnterRule("postfixedExpression", 119);
		TraceIn("postfixedExpression", 119);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int postfixedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken IDENT468 = default(IToken);
		IToken THIS470 = default(IToken);
		IToken SUPER473 = default(IToken);
		IToken IDENT474 = default(IToken);
		IToken LBRACK477 = default(IToken);
		IToken RBRACK479 = default(IToken);
		IToken INC480 = default(IToken);
		IToken DEC481 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified467 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments469 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified471 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments472 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression476 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression478 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree IDENT468_tree = default(CommonTree);
		CommonTree THIS470_tree = default(CommonTree);
		CommonTree SUPER473_tree = default(CommonTree);
		CommonTree IDENT474_tree = default(CommonTree);
		CommonTree LBRACK477_tree = default(CommonTree);
		CommonTree RBRACK479_tree = default(CommonTree);
		CommonTree INC480_tree = default(CommonTree);
		CommonTree DEC481_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "postfixedExpression");
		DebugLocation(1302, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 119)) { return retval; }

			// Java.g:1304:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
			DebugEnterAlt(1);
			// Java.g:1304:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			{
			DebugLocation(1304, 9);
			// Java.g:1304:9: ( primaryExpression -> primaryExpression )
			DebugEnterAlt(1);
			// Java.g:1304:13: primaryExpression
			{
			DebugLocation(1304, 13);
			PushFollow(Follow._primaryExpression_in_postfixedExpression11823);
			primaryExpression466=primaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primaryExpression.Add(primaryExpression466.Tree);


			{
			// AST REWRITE
			// elements: primaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1304:53: -> primaryExpression
			{
				DebugLocation(1304, 57);
				adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(1307, 9);
			// Java.g:1307:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=3;
				try { DebugEnterDecision(136, false);
				int LA136_1 = input.LA(1);

				if ((LA136_1==DOT))
				{
					alt136 = 1;
				}
				else if ((LA136_1==LBRACK))
				{
					alt136 = 2;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1307:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					{
					DebugLocation(1307, 21);
					outerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression11885); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(outerDot);

					DebugLocation(1310, 13);
					// Java.g:1310:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					int alt135=5;
					try { DebugEnterSubRule(135);
					try { DebugEnterDecision(135, false);
					switch (input.LA(1))
					{
					case LESS_THAN:
						{
						int LA135_2 = input.LA(2);

						if ((EvaluatePredicate(synpred197_Java_fragment)))
						{
							alt135 = 1;
						}
						else if ((EvaluatePredicate(synpred200_Java_fragment)))
						{
							alt135 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 135, 1, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENT:
						{
						alt135 = 1;
						}
						break;
					case THIS:
						{
						alt135 = 2;
						}
						break;
					case SUPER:
						{
						int LA135_2 = input.LA(2);

						if ((EvaluatePredicate(synpred200_Java_fragment)))
						{
							alt135 = 3;
						}
						else if ((EvaluatePredicate(synpred202_Java_fragment)))
						{
							alt135 = 4;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 135, 4, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case NEW:
						{
						alt135 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 135, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1310:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						{
						DebugLocation(1310, 17);
						// Java.g:1310:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
						DebugEnterAlt(1);
						// Java.g:1310:21: ( genericTypeArgumentListSimplified )? IDENT
						{
						DebugLocation(1310, 21);
						// Java.g:1310:21: ( genericTypeArgumentListSimplified )?
						int alt131=2;
						try { DebugEnterSubRule(131);
						try { DebugEnterDecision(131, false);
						int LA131_1 = input.LA(1);

						if ((LA131_1==LESS_THAN))
						{
							alt131 = 1;
						}
						} finally { DebugExitDecision(131); }
						switch (alt131)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:1310:21: genericTypeArgumentListSimplified
							{
							DebugLocation(1310, 21);
							PushFollow(Follow._genericTypeArgumentListSimplified_in_postfixedExpression11943);
							genericTypeArgumentListSimplified467=genericTypeArgumentListSimplified();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified467.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(131); }

						DebugLocation(1311, 21);
						IDENT468=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression11968); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT468);



						{
						// AST REWRITE
						// elements: DOT, postfixedExpression, IDENT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1311:53: -> ^( DOT $postfixedExpression IDENT )
						{
							DebugLocation(1311, 57);
							// Java.g:1311:57: ^( DOT $postfixedExpression IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1311, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(1311, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(1311, 84);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(1313, 17);
						// Java.g:1313:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						int alt132=2;
						try { DebugEnterSubRule(132);
						try { DebugEnterDecision(132, false);
						int LA132_1 = input.LA(1);

						if ((LA132_1==LPAREN))
						{
							alt132 = 1;
						}
						} finally { DebugExitDecision(132); }
						switch (alt132)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:1313:21: arguments
							{
							DebugLocation(1313, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12047);
							arguments469=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments469.Tree);


							{
							// AST REWRITE
							// elements: postfixedExpression, genericTypeArgumentListSimplified, arguments
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 1313:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
							{
								DebugLocation(1313, 57);
								// Java.g:1313:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(1313, 59);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(1313, 72);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(1313, 92);
								// Java.g:1313:92: ( genericTypeArgumentListSimplified )?
								if (stream_genericTypeArgumentListSimplified.HasNext)
								{
									DebugLocation(1313, 92);
									adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

								}
								stream_genericTypeArgumentListSimplified.Reset();
								DebugLocation(1313, 127);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(132); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1315:17: THIS
						{
						DebugLocation(1315, 17);
						THIS470=(IToken)Match(input,THIS,Follow._THIS_in_postfixedExpression12121); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_THIS.Add(THIS470);



						{
						// AST REWRITE
						// elements: DOT, postfixedExpression, THIS
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1315:53: -> ^( DOT $postfixedExpression THIS )
						{
							DebugLocation(1315, 57);
							// Java.g:1315:57: ^( DOT $postfixedExpression THIS )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1315, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(1315, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(1315, 84);
							adaptor.AddChild(root_1, stream_THIS.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:1316:17: ( genericTypeArgumentListSimplified )? Super= SUPER arguments
						{
						DebugLocation(1316, 17);
						// Java.g:1316:17: ( genericTypeArgumentListSimplified )?
						int alt133=2;
						try { DebugEnterSubRule(133);
						try { DebugEnterDecision(133, false);
						int LA133_1 = input.LA(1);

						if ((LA133_1==LESS_THAN))
						{
							alt133 = 1;
						}
						} finally { DebugExitDecision(133); }
						switch (alt133)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:1316:17: genericTypeArgumentListSimplified
							{
							DebugLocation(1316, 17);
							PushFollow(Follow._genericTypeArgumentListSimplified_in_postfixedExpression12182);
							genericTypeArgumentListSimplified471=genericTypeArgumentListSimplified();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified471.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(133); }

						DebugLocation(1317, 19);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12200); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(1317, 26);
						PushFollow(Follow._arguments_in_postfixedExpression12202);
						arguments472=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments472.Tree);


						{
						// AST REWRITE
						// elements: postfixedExpression, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1317:50: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
						{
							DebugLocation(1317, 54);
							// Java.g:1317:54: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1317, 56);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(1317, 114);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(1317, 134);
							// Java.g:1317:134: ( genericTypeArgumentListSimplified )?
							if (stream_genericTypeArgumentListSimplified.HasNext)
							{
								DebugLocation(1317, 134);
								adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

							}
							stream_genericTypeArgumentListSimplified.Reset();
							DebugLocation(1317, 169);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// Java.g:1318:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						{
						DebugLocation(1318, 17);
						// Java.g:1318:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
						DebugEnterAlt(1);
						// Java.g:1318:21: SUPER innerDot= DOT IDENT
						{
						DebugLocation(1318, 21);
						SUPER473=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12254); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER473);

						DebugLocation(1318, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression12258); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(1318, 40);
						IDENT474=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression12260); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT474);



						{
						// AST REWRITE
						// elements: innerDot, outerDot, postfixedExpression, SUPER, IDENT
						// token labels: innerDot, outerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1318:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
						{
							DebugLocation(1318, 57);
							// Java.g:1318:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1318, 60);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_1);

							DebugLocation(1318, 69);
							// Java.g:1318:69: ^( $outerDot $postfixedExpression SUPER )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(1318, 72);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_2);

							DebugLocation(1318, 82);
							adaptor.AddChild(root_2, stream_retval.NextTree());
							DebugLocation(1318, 102);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(1318, 109);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(1320, 17);
						// Java.g:1320:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						int alt134=2;
						try { DebugEnterSubRule(134);
						try { DebugEnterDecision(134, false);
						int LA134_1 = input.LA(1);

						if ((LA134_1==LPAREN))
						{
							alt134 = 1;
						}
						} finally { DebugExitDecision(134); }
						switch (alt134)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:1320:21: arguments
							{
							DebugLocation(1320, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12327);
							arguments475=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments475.Tree);


							{
							// AST REWRITE
							// elements: postfixedExpression, arguments
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 1320:53: -> ^( METHOD_CALL $postfixedExpression arguments )
							{
								DebugLocation(1320, 57);
								// Java.g:1320:57: ^( METHOD_CALL $postfixedExpression arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(1320, 59);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(1320, 72);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(1320, 92);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(134); }


						}
						break;
					case 5:
						DebugEnterAlt(5);
						// Java.g:1322:17: innerNewExpression
						{
						DebugLocation(1322, 17);
						PushFollow(Follow._innerNewExpression_in_postfixedExpression12398);
						innerNewExpression476=innerNewExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression476.Tree);


						{
						// AST REWRITE
						// elements: DOT, postfixedExpression, innerNewExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1322:53: -> ^( DOT $postfixedExpression innerNewExpression )
						{
							DebugLocation(1322, 57);
							// Java.g:1322:57: ^( DOT $postfixedExpression innerNewExpression )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1322, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(1322, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(1322, 84);
							adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(135); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1324:13: LBRACK expression RBRACK
					{
					DebugLocation(1324, 13);
					LBRACK477=(IToken)Match(input,LBRACK,Follow._LBRACK_in_postfixedExpression12455); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LBRACK.Add(LBRACK477);

					DebugLocation(1324, 20);
					PushFollow(Follow._expression_in_postfixedExpression12457);
					expression478=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression478.Tree);
					DebugLocation(1324, 31);
					RBRACK479=(IToken)Match(input,RBRACK,Follow._RBRACK_in_postfixedExpression12459); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RBRACK.Add(RBRACK479);



					{
					// AST REWRITE
					// elements: postfixedExpression, expression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1324:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
					{
						DebugLocation(1324, 57);
						// Java.g:1324:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1324, 59);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

						DebugLocation(1324, 81);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(1324, 101);
						adaptor.AddChild(root_1, stream_expression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(1327, 9);
			// Java.g:1327:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			int alt137=3;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			int LA137_1 = input.LA(1);

			if ((LA137_1==INC))
			{
				alt137 = 1;
			}
			else if ((LA137_1==DEC))
			{
				alt137 = 2;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1327:13: INC
				{
				DebugLocation(1327, 13);
				INC480=(IToken)Match(input,INC,Follow._INC_in_postfixedExpression12520); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC480);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1327:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
				{
					DebugLocation(1327, 20);
					// Java.g:1327:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1327, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_INC, INC480, "POST_INC"), root_1);

					DebugLocation(1327, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1328:13: DEC
				{
				DebugLocation(1328, 13);
				DEC481=(IToken)Match(input,DEC,Follow._DEC_in_postfixedExpression12544); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC481);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1328:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
				{
					DebugLocation(1328, 20);
					// Java.g:1328:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1328, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_DEC, DEC481, "POST_DEC"), root_1);

					DebugLocation(1328, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixedExpression", 119);
			LeaveRule("postfixedExpression", 119);
			LeaveRule_postfixedExpression();
			if (state.backtracking > 0) { Memoize(input, 119, postfixedExpression_StartIndex); }

		}
		DebugLocation(1330, 4);
		} finally { DebugExitRule(GrammarFileName, "postfixedExpression"); }
		return retval;

	}
	// $ANTLR end "postfixedExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// Java.g:1332:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 120);
		TraceIn("primaryExpression", 120);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SUPER487 = default(IToken);
		IToken DOT489 = default(IToken);
		IToken IDENT490 = default(IToken);
		IToken IDENT492 = default(IToken);
		IToken THIS494 = default(IToken);
		IToken THIS496 = default(IToken);
		IToken SUPER498 = default(IToken);
		IToken SUPER500 = default(IToken);
		IToken DOT501 = default(IToken);
		IToken IDENT502 = default(IToken);
		IToken DOT506 = default(IToken);
		IToken CLASS507 = default(IToken);
		IToken VOID508 = default(IToken);
		IToken DOT509 = default(IToken);
		IToken CLASS510 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal483 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newExpression484 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression485 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments493 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments497 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments499 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments503 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType504 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator505 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SUPER487_tree = default(CommonTree);
		CommonTree DOT489_tree = default(CommonTree);
		CommonTree IDENT490_tree = default(CommonTree);
		CommonTree IDENT492_tree = default(CommonTree);
		CommonTree THIS494_tree = default(CommonTree);
		CommonTree THIS496_tree = default(CommonTree);
		CommonTree SUPER498_tree = default(CommonTree);
		CommonTree SUPER500_tree = default(CommonTree);
		CommonTree DOT501_tree = default(CommonTree);
		CommonTree IDENT502_tree = default(CommonTree);
		CommonTree DOT506_tree = default(CommonTree);
		CommonTree CLASS507_tree = default(CommonTree);
		CommonTree VOID508_tree = default(CommonTree);
		CommonTree DOT509_tree = default(CommonTree);
		CommonTree CLASS510_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(1332, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 120)) { return retval; }

			// Java.g:1333:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
			int alt143=10;
			try { DebugEnterDecision(143, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt143 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				alt143 = 2;
				}
				break;
			case NEW:
				{
				alt143 = 3;
				}
				break;
			case IDENT:
				{
				alt143 = 4;
				}
				break;
			case LESS_THAN:
				{
				alt143 = 5;
				}
				break;
			case THIS:
				{
				alt143 = 6;
				}
				break;
			case SUPER:
				{
				int LA143_2 = input.LA(2);

				if ((LA143_2==DOT))
				{
					alt143 = 8;
				}
				else if ((LA143_2==LPAREN))
				{
					alt143 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 143, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt143 = 9;
				}
				break;
			case VOID:
				{
				alt143 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 143, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1333:9: parenthesizedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1333, 9);
				PushFollow(Follow._parenthesizedExpression_in_primaryExpression12592);
				parenthesizedExpression482=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parenthesizedExpression482.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1334:9: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1334, 9);
				PushFollow(Follow._literal_in_primaryExpression12602);
				literal483=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal483.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1335:9: newExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1335, 9);
				PushFollow(Follow._newExpression_in_primaryExpression12612);
				newExpression484=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newExpression484.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1336:9: qualifiedIdentExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1336, 9);
				PushFollow(Follow._qualifiedIdentExpression_in_primaryExpression12622);
				qualifiedIdentExpression485=qualifiedIdentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentExpression485.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1337:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				{
				DebugLocation(1337, 9);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_primaryExpression12632);
				genericTypeArgumentListSimplified486=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified486.Tree);
				DebugLocation(1338, 9);
				// Java.g:1338:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				int alt139=3;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, false);
				switch (input.LA(1))
				{
				case SUPER:
					{
					alt139 = 1;
					}
					break;
				case IDENT:
					{
					alt139 = 2;
					}
					break;
				case THIS:
					{
					alt139 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1338:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(1338, 13);
					SUPER487=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression12647); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(SUPER487);

					DebugLocation(1339, 13);
					// Java.g:1339:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt138=2;
					try { DebugEnterSubRule(138);
					try { DebugEnterDecision(138, false);
					int LA138_1 = input.LA(1);

					if ((LA138_1==LPAREN))
					{
						alt138 = 1;
					}
					else if ((LA138_1==DOT))
					{
						alt138 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 138, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(138); }
					switch (alt138)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1339:17: arguments
						{
						DebugLocation(1339, 17);
						PushFollow(Follow._arguments_in_primaryExpression12665);
						arguments488=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments488.Tree);


						{
						// AST REWRITE
						// elements: genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1339:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(1339, 61);
							// Java.g:1339:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1339, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER487, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(1339, 120);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(1339, 154);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1340:17: DOT IDENT arguments
						{
						DebugLocation(1340, 17);
						DOT489=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression12725); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(DOT489);

						DebugLocation(1340, 21);
						IDENT490=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression12727); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT490);

						DebugLocation(1340, 27);
						PushFollow(Follow._arguments_in_primaryExpression12729);
						arguments491=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments491.Tree);


						{
						// AST REWRITE
						// elements: DOT, SUPER, IDENT, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1340:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(1340, 61);
							// Java.g:1340:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1340, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(1340, 75);
							// Java.g:1340:75: ^( DOT SUPER IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(1340, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(1340, 81);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());
							DebugLocation(1340, 87);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(1340, 94);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(1340, 128);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(138); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1342:13: IDENT arguments
					{
					DebugLocation(1342, 13);
					IDENT492=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression12796); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT492);

					DebugLocation(1342, 19);
					PushFollow(Follow._arguments_in_primaryExpression12798);
					arguments493=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments493.Tree);


					{
					// AST REWRITE
					// elements: IDENT, genericTypeArgumentListSimplified, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1342:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(1342, 61);
						// Java.g:1342:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1342, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(1342, 75);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(1342, 81);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(1342, 115);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:1343:13: THIS arguments
					{
					DebugLocation(1343, 13);
					THIS494=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression12853); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS494);

					DebugLocation(1343, 18);
					PushFollow(Follow._arguments_in_primaryExpression12855);
					arguments495=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments495.Tree);


					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1343:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(1343, 61);
						// Java.g:1343:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1343, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS494, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(1343, 117);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(1343, 151);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(139); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1345:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				{
				DebugLocation(1345, 9);
				// Java.g:1345:9: ( THIS -> THIS )
				DebugEnterAlt(1);
				// Java.g:1345:13: THIS
				{
				DebugLocation(1345, 13);
				THIS496=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression12920); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THIS.Add(THIS496);



				{
				// AST REWRITE
				// elements: THIS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1345:57: -> THIS
				{
					DebugLocation(1345, 61);
					adaptor.AddChild(root_0, stream_THIS.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(1347, 9);
				// Java.g:1347:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, false);
				int LA140_1 = input.LA(1);

				if ((LA140_1==LPAREN))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1347:13: arguments
					{
					DebugLocation(1347, 13);
					PushFollow(Follow._arguments_in_primaryExpression12988);
					arguments497=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments497.Tree);


					{
					// AST REWRITE
					// elements: arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1347:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
					{
						DebugLocation(1347, 61);
						// Java.g:1347:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1347, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS496, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(1347, 117);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(140); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1349:9: SUPER arguments
				{
				DebugLocation(1349, 9);
				SUPER498=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13053); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER498);

				DebugLocation(1349, 15);
				PushFollow(Follow._arguments_in_primaryExpression13055);
				arguments499=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments499.Tree);


				{
				// AST REWRITE
				// elements: arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1349:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
				{
					DebugLocation(1349, 61);
					// Java.g:1349:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1349, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER498, "SUPER_CONSTRUCTOR_CALL"), root_1);

					DebugLocation(1349, 120);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1350:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				{
				DebugLocation(1350, 9);
				// Java.g:1350:9: ( SUPER DOT IDENT )
				DebugEnterAlt(1);
				// Java.g:1350:13: SUPER DOT IDENT
				{
				DebugLocation(1350, 13);
				SUPER500=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13111); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER500);

				DebugLocation(1350, 19);
				DOT501=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13113); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT501);

				DebugLocation(1350, 23);
				IDENT502=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression13115); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT502);


				}

				DebugLocation(1352, 9);
				// Java.g:1352:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, false);
				int LA141_1 = input.LA(1);

				if ((LA141_1==LPAREN))
				{
					alt141 = 1;
				}
				else if ((LA141_1==EOF||(LA141_1>=AND && LA141_1<=AND_ASSIGN)||LA141_1==ASSIGN||(LA141_1>=BIT_SHIFT_RIGHT && LA141_1<=BIT_SHIFT_RIGHT_ASSIGN)||(LA141_1>=COLON && LA141_1<=COMMA)||LA141_1==DEC||(LA141_1>=DIV && LA141_1<=DIV_ASSIGN)||LA141_1==DOT||LA141_1==EQUAL||(LA141_1>=GREATER_OR_EQUAL && LA141_1<=GREATER_THAN)||(LA141_1>=INC && LA141_1<=INSTANCEOF)||LA141_1==LBRACK||(LA141_1>=LESS_OR_EQUAL && LA141_1<=LESS_THAN)||LA141_1==LOGICAL_AND||LA141_1==LOGICAL_OR||(LA141_1>=MINUS && LA141_1<=MOD)||LA141_1==MOD_ASSIGN||LA141_1==NOT_EQUAL||(LA141_1>=OR && LA141_1<=OR_ASSIGN)||(LA141_1>=PLUS && LA141_1<=PLUS_ASSIGN)||(LA141_1>=QUESTION && LA141_1<=RCURLY)||(LA141_1>=RPAREN && LA141_1<=SHIFT_RIGHT_ASSIGN)||(LA141_1>=STAR && LA141_1<=STAR_ASSIGN)||(LA141_1>=XOR && LA141_1<=XOR_ASSIGN)))
				{
					alt141 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1352:13: arguments
					{
					DebugLocation(1352, 13);
					PushFollow(Follow._arguments_in_primaryExpression13139);
					arguments503=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments503.Tree);


					{
					// AST REWRITE
					// elements: DOT, SUPER, IDENT, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1352:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
					{
						DebugLocation(1352, 61);
						// Java.g:1352:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1352, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(1352, 75);
						// Java.g:1352:75: ^( DOT SUPER IDENT )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(1352, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

						DebugLocation(1352, 81);
						adaptor.AddChild(root_2, stream_SUPER.NextNode());
						DebugLocation(1352, 87);
						adaptor.AddChild(root_2, stream_IDENT.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(1352, 94);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1353:57: 
					{

					{
					// AST REWRITE
					// elements: DOT, SUPER, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1353:57: -> ^( DOT SUPER IDENT )
					{
						DebugLocation(1353, 61);
						// Java.g:1353:61: ^( DOT SUPER IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1353, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(1353, 67);
						adaptor.AddChild(root_1, stream_SUPER.NextNode());
						DebugLocation(1353, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(141); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:1355:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
				{
				DebugLocation(1355, 9);
				// Java.g:1355:9: ( primitiveType -> primitiveType )
				DebugEnterAlt(1);
				// Java.g:1355:13: primitiveType
				{
				DebugLocation(1355, 13);
				PushFollow(Follow._primitiveType_in_primaryExpression13281);
				primitiveType504=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType504.Tree);


				{
				// AST REWRITE
				// elements: primitiveType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1355:57: -> primitiveType
				{
					DebugLocation(1355, 61);
					adaptor.AddChild(root_0, stream_primitiveType.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(1357, 9);
				// Java.g:1357:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
				try { DebugEnterSubRule(142);
				while (true)
				{
					int alt142=2;
					try { DebugEnterDecision(142, false);
					int LA142_1 = input.LA(1);

					if ((LA142_1==LBRACK))
					{
						alt142 = 1;
					}


					} finally { DebugExitDecision(142); }
					switch ( alt142 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1357:13: arrayDeclarator
						{
						DebugLocation(1357, 13);
						PushFollow(Follow._arrayDeclarator_in_primaryExpression13340);
						arrayDeclarator505=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator505.Tree);


						{
						// AST REWRITE
						// elements: arrayDeclarator, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1357:57: -> ^( arrayDeclarator $primaryExpression)
						{
							DebugLocation(1357, 61);
							// Java.g:1357:61: ^( arrayDeclarator $primaryExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1357, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(1357, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						goto loop142;
					}
				}

				loop142:
					;

				} finally { DebugExitSubRule(142); }

				DebugLocation(1359, 9);
				DOT506=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13403); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT506);

				DebugLocation(1359, 13);
				CLASS507=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13405); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS507);



				{
				// AST REWRITE
				// elements: DOT, primaryExpression, CLASS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1359:57: -> ^( DOT $primaryExpression CLASS )
				{
					DebugLocation(1359, 61);
					// Java.g:1359:61: ^( DOT $primaryExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1359, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(1359, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(1359, 86);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:1360:9: VOID DOT CLASS
				{
				DebugLocation(1360, 9);
				VOID508=(IToken)Match(input,VOID,Follow._VOID_in_primaryExpression13465); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VOID.Add(VOID508);

				DebugLocation(1360, 14);
				DOT509=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13467); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT509);

				DebugLocation(1360, 18);
				CLASS510=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13469); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS510);



				{
				// AST REWRITE
				// elements: DOT, VOID, CLASS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1360:57: -> ^( DOT VOID CLASS )
				{
					DebugLocation(1360, 61);
					// Java.g:1360:61: ^( DOT VOID CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1360, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(1360, 67);
					adaptor.AddChild(root_1, stream_VOID.NextNode());
					DebugLocation(1360, 72);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 120);
			LeaveRule("primaryExpression", 120);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 120, primaryExpression_StartIndex); }

		}
		DebugLocation(1361, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_qualifiedIdentExpression();
	partial void LeaveRule_qualifiedIdentExpression();
	// $ANTLR start "qualifiedIdentExpression"
	// Java.g:1363:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
	[GrammarRule("qualifiedIdentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression()
	{
		EnterRule_qualifiedIdentExpression();
		EnterRule("qualifiedIdentExpression", 121);
		TraceIn("qualifiedIdentExpression", 121);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken DOT513 = default(IToken);
		IToken CLASS514 = default(IToken);
		IToken CLASS516 = default(IToken);
		IToken SUPER519 = default(IToken);
		IToken IDENT520 = default(IToken);
		IToken IDENT522 = default(IToken);
		IToken THIS524 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier511 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator512 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified517 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments518 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments525 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression526 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree DOT513_tree = default(CommonTree);
		CommonTree CLASS514_tree = default(CommonTree);
		CommonTree CLASS516_tree = default(CommonTree);
		CommonTree SUPER519_tree = default(CommonTree);
		CommonTree IDENT520_tree = default(CommonTree);
		CommonTree IDENT522_tree = default(CommonTree);
		CommonTree THIS524_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentExpression");
		DebugLocation(1363, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 121)) { return retval; }

			// Java.g:1365:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
			DebugEnterAlt(1);
			// Java.g:1365:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			{
			DebugLocation(1365, 9);
			// Java.g:1365:9: ( qualifiedIdentifier -> qualifiedIdentifier )
			DebugEnterAlt(1);
			// Java.g:1365:13: qualifiedIdentifier
			{
			DebugLocation(1365, 13);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentExpression13549);
			qualifiedIdentifier511=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentifier.Add(qualifiedIdentifier511.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1365:61: -> qualifiedIdentifier
			{
				DebugLocation(1365, 65);
				adaptor.AddChild(root_0, stream_qualifiedIdentifier.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(1368, 9);
			// Java.g:1368:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			int alt147=4;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			switch (input.LA(1))
			{
			case LBRACK:
				{
				int LA147_2 = input.LA(2);

				if ((EvaluatePredicate(synpred223_Java_fragment)))
				{
					alt147 = 1;
				}
				}
				break;
			case LPAREN:
				{
				alt147 = 2;
				}
				break;
			case DOT:
				{
				int LA147_2 = input.LA(2);

				if ((EvaluatePredicate(synpred231_Java_fragment)))
				{
					alt147 = 3;
				}
				}
				break;
			}

			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1368:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				{
				DebugLocation(1368, 13);
				// Java.g:1368:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
				int cnt144=0;
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					int LA144_1 = input.LA(1);

					if ((LA144_1==LBRACK))
					{
						alt144 = 1;
					}


					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1368:17: arrayDeclarator
						{
						DebugLocation(1368, 17);
						PushFollow(Follow._arrayDeclarator_in_qualifiedIdentExpression13619);
						arrayDeclarator512=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator512.Tree);


						{
						// AST REWRITE
						// elements: arrayDeclarator, qualifiedIdentExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1368:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
						{
							DebugLocation(1368, 61);
							// Java.g:1368:61: ^( arrayDeclarator $qualifiedIdentExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1368, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(1368, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						if (cnt144 >= 1)
							goto loop144;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee144 = new EarlyExitException( 144, input );
						DebugRecognitionException(eee144);
						throw eee144;
					}
					cnt144++;
				}
				loop144:
					;

				} finally { DebugExitSubRule(144); }

				DebugLocation(1370, 13);
				// Java.g:1370:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				DebugEnterAlt(1);
				// Java.g:1370:17: DOT CLASS
				{
				DebugLocation(1370, 17);
				DOT513=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13687); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT513);

				DebugLocation(1370, 21);
				CLASS514=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression13689); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS514);



				{
				// AST REWRITE
				// elements: DOT, qualifiedIdentExpression, CLASS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1370:57: -> ^( DOT $qualifiedIdentExpression CLASS )
				{
					DebugLocation(1370, 61);
					// Java.g:1370:61: ^( DOT $qualifiedIdentExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1370, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(1370, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(1370, 93);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1372:13: arguments
				{
				DebugLocation(1372, 13);
				PushFollow(Follow._arguments_in_qualifiedIdentExpression13759);
				arguments515=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments515.Tree);


				{
				// AST REWRITE
				// elements: qualifiedIdentifier, arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1372:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
				{
					DebugLocation(1372, 61);
					// Java.g:1372:61: ^( METHOD_CALL qualifiedIdentifier arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1372, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(1372, 75);
					adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
					DebugLocation(1372, 95);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1373:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				{
				DebugLocation(1373, 21);
				outerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13820); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(outerDot);

				DebugLocation(1374, 13);
				// Java.g:1374:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				int alt146=5;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, false);
				switch (input.LA(1))
				{
				case CLASS:
					{
					alt146 = 1;
					}
					break;
				case LESS_THAN:
					{
					alt146 = 2;
					}
					break;
				case THIS:
					{
					alt146 = 3;
					}
					break;
				case SUPER:
					{
					alt146 = 4;
					}
					break;
				case NEW:
					{
					alt146 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 146, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1374:17: CLASS
					{
					DebugLocation(1374, 17);
					CLASS516=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression13838); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLASS.Add(CLASS516);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1374:57: -> ^( DOT qualifiedIdentifier CLASS )
					{
						DebugLocation(1374, 61);
						// Java.g:1374:61: ^( DOT qualifiedIdentifier CLASS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1374, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(1374, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(1374, 87);
						adaptor.AddChild(root_1, stream_CLASS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1375:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(1375, 17);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_qualifiedIdentExpression13901);
					genericTypeArgumentListSimplified517=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified517.Tree);
					DebugLocation(1376, 17);
					// Java.g:1376:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt145=3;
					try { DebugEnterSubRule(145);
					try { DebugEnterDecision(145, false);
					int LA145_1 = input.LA(1);

					if ((LA145_1==SUPER))
					{
						int LA145_2 = input.LA(2);

						if ((LA145_2==DOT))
						{
							alt145 = 2;
						}
						else if ((LA145_2==LPAREN))
						{
							alt145 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 145, 1, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA145_1==IDENT))
					{
						alt145 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 145, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1376:21: Super= SUPER arguments
						{
						DebugLocation(1376, 26);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression13926); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(1376, 33);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression13928);
						arguments518=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments518.Tree);


						{
						// AST REWRITE
						// elements: qualifiedIdentifier, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1376:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(1376, 61);
							// Java.g:1376:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1376, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(1376, 120);
							adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
							DebugLocation(1376, 140);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(1376, 174);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:1377:21: SUPER innerDot= DOT IDENT arguments
						{
						DebugLocation(1377, 21);
						SUPER519=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression13978); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER519);

						DebugLocation(1377, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13982); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(1377, 40);
						IDENT520=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression13984); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT520);

						DebugLocation(1377, 46);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression13986);
						arguments521=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments521.Tree);


						{
						// AST REWRITE
						// elements: innerDot, outerDot, qualifiedIdentifier, SUPER, IDENT, genericTypeArgumentListSimplified, arguments
						// token labels: innerDot, outerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1377:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(1377, 61);
							// Java.g:1377:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1377, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(1377, 75);
							// Java.g:1377:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(1377, 78);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_2);

							DebugLocation(1377, 87);
							// Java.g:1377:87: ^( $outerDot qualifiedIdentifier SUPER )
							{
							CommonTree root_3 = (CommonTree)adaptor.Nil();
							DebugLocation(1377, 90);
							root_3 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_3);

							DebugLocation(1377, 99);
							adaptor.AddChild(root_3, stream_qualifiedIdentifier.NextTree());
							DebugLocation(1377, 119);
							adaptor.AddChild(root_3, stream_SUPER.NextNode());

							adaptor.AddChild(root_2, root_3);
							}
							DebugLocation(1377, 126);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(1377, 133);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(1377, 167);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:1378:21: IDENT arguments
						{
						DebugLocation(1378, 21);
						IDENT522=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression14036); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT522);

						DebugLocation(1378, 27);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14038);
						arguments523=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments523.Tree);


						{
						// AST REWRITE
						// elements: DOT, qualifiedIdentifier, IDENT, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 1378:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(1378, 61);
							// Java.g:1378:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(1378, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(1378, 75);
							// Java.g:1378:75: ^( DOT qualifiedIdentifier IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(1378, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(1378, 81);
							adaptor.AddChild(root_2, stream_qualifiedIdentifier.NextTree());
							DebugLocation(1378, 101);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(1378, 108);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(1378, 142);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(145); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:1380:17: THIS
					{
					DebugLocation(1380, 17);
					THIS524=(IToken)Match(input,THIS,Follow._THIS_in_qualifiedIdentExpression14113); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS524);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, THIS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1380:57: -> ^( DOT qualifiedIdentifier THIS )
					{
						DebugLocation(1380, 61);
						// Java.g:1380:61: ^( DOT qualifiedIdentifier THIS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1380, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(1380, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(1380, 87);
						adaptor.AddChild(root_1, stream_THIS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:1381:17: Super= SUPER arguments
					{
					DebugLocation(1381, 22);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14179); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(Super);

					DebugLocation(1381, 29);
					PushFollow(Follow._arguments_in_qualifiedIdentExpression14181);
					arguments525=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments525.Tree);


					{
					// AST REWRITE
					// elements: qualifiedIdentifier, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1381:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
					{
						DebugLocation(1381, 61);
						// Java.g:1381:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1381, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(1381, 120);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(1381, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:1382:17: innerNewExpression
					{
					DebugLocation(1382, 17);
					PushFollow(Follow._innerNewExpression_in_qualifiedIdentExpression14229);
					innerNewExpression526=innerNewExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression526.Tree);


					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, innerNewExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1382:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
					{
						DebugLocation(1382, 61);
						// Java.g:1382:61: ^( DOT qualifiedIdentifier innerNewExpression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1382, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(1382, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(1382, 87);
						adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(146); }


				}
				break;

			}
			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentExpression", 121);
			LeaveRule("qualifiedIdentExpression", 121);
			LeaveRule_qualifiedIdentExpression();
			if (state.backtracking > 0) { Memoize(input, 121, qualifiedIdentExpression_StartIndex); }

		}
		DebugLocation(1385, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentExpression"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentExpression"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// Java.g:1387:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
	[GrammarRule("newExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 122);
		TraceIn("newExpression", 122);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW527 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction529 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified530 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified531 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction532 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments533 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody534 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW527_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(1387, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 122)) { return retval; }

			// Java.g:1388:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
			DebugEnterAlt(1);
			// Java.g:1388:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			{
			DebugLocation(1388, 9);
			NEW527=(IToken)Match(input,NEW,Follow._NEW_in_newExpression14305); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW527);

			DebugLocation(1389, 9);
			// Java.g:1389:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			int alt151=2;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, false);
			int LA151_1 = input.LA(1);

			if ((LA151_1==BOOLEAN||LA151_1==BYTE||LA151_1==CHAR||LA151_1==DOUBLE||LA151_1==FLOAT||LA151_1==INT||LA151_1==LONG||LA151_1==SHORT))
			{
				alt151 = 1;
			}
			else if ((LA151_1==IDENT||LA151_1==LESS_THAN))
			{
				alt151 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1389:13: primitiveType newArrayConstruction
				{
				DebugLocation(1389, 13);
				PushFollow(Follow._primitiveType_in_newExpression14321);
				primitiveType528=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType528.Tree);
				DebugLocation(1389, 27);
				PushFollow(Follow._newArrayConstruction_in_newExpression14323);
				newArrayConstruction529=newArrayConstruction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction529.Tree);


				{
				// AST REWRITE
				// elements: primitiveType, newArrayConstruction
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1390:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
				{
					DebugLocation(1390, 17);
					// Java.g:1390:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1390, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW527, "STATIC_ARRAY_CREATOR"), root_1);

					DebugLocation(1390, 70);
					adaptor.AddChild(root_1, stream_primitiveType.NextTree());
					DebugLocation(1390, 84);
					adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1391:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				{
				DebugLocation(1391, 13);
				// Java.g:1391:13: ( genericTypeArgumentListSimplified )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, false);
				int LA148_1 = input.LA(1);

				if ((LA148_1==LESS_THAN))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1391:13: genericTypeArgumentListSimplified
					{
					DebugLocation(1391, 13);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_newExpression14367);
					genericTypeArgumentListSimplified530=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified530.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(1391, 48);
				PushFollow(Follow._qualifiedTypeIdentSimplified_in_newExpression14370);
				qualifiedTypeIdentSimplified531=qualifiedTypeIdentSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified531.Tree);
				DebugLocation(1392, 13);
				// Java.g:1392:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, false);
				int LA150_1 = input.LA(1);

				if ((LA150_1==LBRACK))
				{
					alt150 = 1;
				}
				else if ((LA150_1==LPAREN))
				{
					alt150 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 150, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1392:17: newArrayConstruction
					{
					DebugLocation(1392, 17);
					PushFollow(Follow._newArrayConstruction_in_newExpression14388);
					newArrayConstruction532=newArrayConstruction();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction532.Tree);


					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, newArrayConstruction
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1393:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
					{
						DebugLocation(1393, 21);
						// Java.g:1393:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1393, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW527, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(1393, 74);
						// Java.g:1393:74: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(1393, 74);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(1393, 109);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(1393, 138);
						adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1394:17: arguments ( classBody )?
					{
					DebugLocation(1394, 17);
					PushFollow(Follow._arguments_in_newExpression14453);
					arguments533=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments533.Tree);
					DebugLocation(1394, 27);
					// Java.g:1394:27: ( classBody )?
					int alt149=2;
					try { DebugEnterSubRule(149);
					try { DebugEnterDecision(149, false);
					int LA149_1 = input.LA(1);

					if ((LA149_1==LCURLY))
					{
						alt149 = 1;
					}
					} finally { DebugExitDecision(149); }
					switch (alt149)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1394:27: classBody
						{
						DebugLocation(1394, 27);
						PushFollow(Follow._classBody_in_newExpression14455);
						classBody534=classBody();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_classBody.Add(classBody534.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(149); }



					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, arguments, classBody
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1395:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
					{
						DebugLocation(1395, 21);
						// Java.g:1395:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1395, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW527, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(1395, 76);
						// Java.g:1395:76: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(1395, 76);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(1395, 111);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(1395, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());
						DebugLocation(1395, 150);
						// Java.g:1395:150: ( classBody )?
						if (stream_classBody.HasNext)
						{
							DebugLocation(1395, 150);
							adaptor.AddChild(root_1, stream_classBody.NextTree());

						}
						stream_classBody.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(150); }


				}
				break;

			}
			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 122);
			LeaveRule("newExpression", 122);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 122, newExpression_StartIndex); }

		}
		DebugLocation(1398, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_innerNewExpression();
	partial void LeaveRule_innerNewExpression();
	// $ANTLR start "innerNewExpression"
	// Java.g:1400:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
	[GrammarRule("innerNewExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression()
	{
		EnterRule_innerNewExpression();
		EnterRule("innerNewExpression", 123);
		TraceIn("innerNewExpression", 123);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int innerNewExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW535 = default(IToken);
		IToken IDENT537 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified536 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments538 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody539 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW535_tree = default(CommonTree);
		CommonTree IDENT537_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		try { DebugEnterRule(GrammarFileName, "innerNewExpression");
		DebugLocation(1400, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 123)) { return retval; }

			// Java.g:1401:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
			DebugEnterAlt(1);
			// Java.g:1401:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
			{
			DebugLocation(1401, 9);
			NEW535=(IToken)Match(input,NEW,Follow._NEW_in_innerNewExpression14554); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW535);

			DebugLocation(1401, 13);
			// Java.g:1401:13: ( genericTypeArgumentListSimplified )?
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			int LA152_1 = input.LA(1);

			if ((LA152_1==LESS_THAN))
			{
				alt152 = 1;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1401:13: genericTypeArgumentListSimplified
				{
				DebugLocation(1401, 13);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_innerNewExpression14556);
				genericTypeArgumentListSimplified536=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified536.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(152); }

			DebugLocation(1401, 48);
			IDENT537=(IToken)Match(input,IDENT,Follow._IDENT_in_innerNewExpression14559); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT537);

			DebugLocation(1401, 54);
			PushFollow(Follow._arguments_in_innerNewExpression14561);
			arguments538=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_arguments.Add(arguments538.Tree);
			DebugLocation(1401, 64);
			// Java.g:1401:64: ( classBody )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_1 = input.LA(1);

			if ((LA153_1==LCURLY))
			{
				alt153 = 1;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1401:64: classBody
				{
				DebugLocation(1401, 64);
				PushFollow(Follow._classBody_in_innerNewExpression14563);
				classBody539=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classBody.Add(classBody539.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(153); }



			{
			// AST REWRITE
			// elements: genericTypeArgumentListSimplified, IDENT, arguments, classBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1402:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
			{
				DebugLocation(1402, 13);
				// Java.g:1402:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1402, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW535, "STATIC_ARRAY_CREATOR"), root_1);

				DebugLocation(1402, 68);
				// Java.g:1402:68: ( genericTypeArgumentListSimplified )?
				if (stream_genericTypeArgumentListSimplified.HasNext)
				{
					DebugLocation(1402, 68);
					adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

				}
				stream_genericTypeArgumentListSimplified.Reset();
				DebugLocation(1402, 103);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(1402, 109);
				adaptor.AddChild(root_1, stream_arguments.NextTree());
				DebugLocation(1402, 119);
				// Java.g:1402:119: ( classBody )?
				if (stream_classBody.HasNext)
				{
					DebugLocation(1402, 119);
					adaptor.AddChild(root_1, stream_classBody.NextTree());

				}
				stream_classBody.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerNewExpression", 123);
			LeaveRule("innerNewExpression", 123);
			LeaveRule_innerNewExpression();
			if (state.backtracking > 0) { Memoize(input, 123, innerNewExpression_StartIndex); }

		}
		DebugLocation(1403, 4);
		} finally { DebugExitRule(GrammarFileName, "innerNewExpression"); }
		return retval;

	}
	// $ANTLR end "innerNewExpression"

	partial void EnterRule_newArrayConstruction();
	partial void LeaveRule_newArrayConstruction();
	// $ANTLR start "newArrayConstruction"
	// Java.g:1405:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? );
	[GrammarRule("newArrayConstruction")]
	private AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction()
	{
		EnterRule_newArrayConstruction();
		EnterRule("newArrayConstruction", 124);
		TraceIn("newArrayConstruction", 124);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newArrayConstruction_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK542 = default(IToken);
		IToken RBRACK544 = default(IToken);
		IToken LBRACK545 = default(IToken);
		IToken RBRACK547 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList540 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer541 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression543 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression546 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList548 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LBRACK542_tree = default(CommonTree);
		CommonTree RBRACK544_tree = default(CommonTree);
		CommonTree LBRACK545_tree = default(CommonTree);
		CommonTree RBRACK547_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "newArrayConstruction");
		DebugLocation(1405, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 124)) { return retval; }

			// Java.g:1406:5: ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? )
			int alt156=2;
			try { DebugEnterDecision(156, false);
			int LA156_1 = input.LA(1);

			if ((LA156_1==LBRACK))
			{
				int LA156_2 = input.LA(2);

				if ((LA156_2==RBRACK))
				{
					alt156 = 1;
				}
				else if ((LA156_2==BOOLEAN||LA156_2==BYTE||(LA156_2>=CHAR && LA156_2<=CHARACTER_LITERAL)||LA156_2==DEC||LA156_2==DECIMAL_LITERAL||LA156_2==DOUBLE||LA156_2==FALSE||(LA156_2>=FLOAT && LA156_2<=FLOATING_POINT_LITERAL)||LA156_2==HEX_LITERAL||LA156_2==IDENT||LA156_2==INC||LA156_2==INT||LA156_2==LESS_THAN||LA156_2==LOGICAL_NOT||(LA156_2>=LONG && LA156_2<=LPAREN)||LA156_2==MINUS||LA156_2==NEW||LA156_2==NOT||LA156_2==NULL||LA156_2==OCTAL_LITERAL||LA156_2==PLUS||LA156_2==SHORT||(LA156_2>=STRING_LITERAL && LA156_2<=SUPER)||LA156_2==THIS||LA156_2==TRUE||LA156_2==VOID))
				{
					alt156 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 156, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 156, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1406:9: arrayDeclaratorList arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1406, 9);
				PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction14609);
				arrayDeclaratorList540=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList540.Tree);
				DebugLocation(1406, 29);
				PushFollow(Follow._arrayInitializer_in_newArrayConstruction14611);
				arrayInitializer541=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer541.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1407:9: LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1407, 15);
				LBRACK542=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14621); if (state.failed) return retval;
				DebugLocation(1407, 17);
				PushFollow(Follow._expression_in_newArrayConstruction14624);
				expression543=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression543.Tree);
				DebugLocation(1407, 34);
				RBRACK544=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14626); if (state.failed) return retval;
				DebugLocation(1407, 36);
				// Java.g:1407:36: ( LBRACK ! expression RBRACK !)*
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					int LA154_1 = input.LA(1);

					if ((LA154_1==LBRACK))
					{
						int LA154_2 = input.LA(2);

						if ((EvaluatePredicate(synpred239_Java_fragment)))
						{
							alt154 = 1;
						}


					}


					} finally { DebugExitDecision(154); }
					switch ( alt154 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1407:37: LBRACK ! expression RBRACK !
						{
						DebugLocation(1407, 43);
						LBRACK545=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14630); if (state.failed) return retval;
						DebugLocation(1407, 45);
						PushFollow(Follow._expression_in_newArrayConstruction14633);
						expression546=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression546.Tree);
						DebugLocation(1407, 62);
						RBRACK547=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14635); if (state.failed) return retval;

						}
						break;

					default:
						goto loop154;
					}
				}

				loop154:
					;

				} finally { DebugExitSubRule(154); }

				DebugLocation(1407, 66);
				// Java.g:1407:66: ( arrayDeclaratorList )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, false);
				int LA155_1 = input.LA(1);

				if ((LA155_1==LBRACK))
				{
					int LA155_2 = input.LA(2);

					if ((LA155_2==RBRACK))
					{
						alt155 = 1;
					}
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1407:66: arrayDeclaratorList
					{
					DebugLocation(1407, 66);
					PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction14640);
					arrayDeclaratorList548=arrayDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList548.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(155); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newArrayConstruction", 124);
			LeaveRule("newArrayConstruction", 124);
			LeaveRule_newArrayConstruction();
			if (state.backtracking > 0) { Memoize(input, 124, newArrayConstruction_StartIndex); }

		}
		DebugLocation(1408, 4);
		} finally { DebugExitRule(GrammarFileName, "newArrayConstruction"); }
		return retval;

	}
	// $ANTLR end "newArrayConstruction"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// Java.g:1410:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<CommonTree, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 125);
		TraceIn("arguments", 125);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN549 = default(IToken);
		IToken RPAREN551 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList550 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN549_tree = default(CommonTree);
		CommonTree RPAREN551_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1410, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 125)) { return retval; }

			// Java.g:1411:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
			DebugEnterAlt(1);
			// Java.g:1411:9: LPAREN ( expressionList )? RPAREN
			{
			DebugLocation(1411, 9);
			LPAREN549=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments14660); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN549);

			DebugLocation(1411, 16);
			// Java.g:1411:16: ( expressionList )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if ((LA157_1==BOOLEAN||LA157_1==BYTE||(LA157_1>=CHAR && LA157_1<=CHARACTER_LITERAL)||LA157_1==DEC||LA157_1==DECIMAL_LITERAL||LA157_1==DOUBLE||LA157_1==FALSE||(LA157_1>=FLOAT && LA157_1<=FLOATING_POINT_LITERAL)||LA157_1==HEX_LITERAL||LA157_1==IDENT||LA157_1==INC||LA157_1==INT||LA157_1==LESS_THAN||LA157_1==LOGICAL_NOT||(LA157_1>=LONG && LA157_1<=LPAREN)||LA157_1==MINUS||LA157_1==NEW||LA157_1==NOT||LA157_1==NULL||LA157_1==OCTAL_LITERAL||LA157_1==PLUS||LA157_1==SHORT||(LA157_1>=STRING_LITERAL && LA157_1<=SUPER)||LA157_1==THIS||LA157_1==TRUE||LA157_1==VOID))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1411:16: expressionList
				{
				DebugLocation(1411, 16);
				PushFollow(Follow._expressionList_in_arguments14662);
				expressionList550=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList550.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(1411, 32);
			RPAREN551=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments14665); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN551);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1412:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
			{
				DebugLocation(1412, 13);
				// Java.g:1412:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1412, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, LPAREN549, "ARGUMENT_LIST"), root_1);

				DebugLocation(1412, 55);
				// Java.g:1412:55: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(1412, 55);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 125);
			LeaveRule("arguments", 125);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 125, arguments_StartIndex); }

		}
		DebugLocation(1413, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Java.g:1415:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 126);
		TraceIn("literal", 126);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set552 = default(IToken);

		CommonTree set552_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1415, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 126)) { return retval; }

			// Java.g:1416:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1416, 5);

			set552=(IToken)input.LT(1);
			if (input.LA(1)==CHARACTER_LITERAL||input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATING_POINT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==NULL||input.LA(1)==OCTAL_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set552));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 126);
			LeaveRule("literal", 126);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 126, literal_StartIndex); }

		}
		DebugLocation(1425, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_synpred14_Java_fragment();
	partial void LeaveRule_synpred14_Java_fragment();

	// $ANTLR start synpred14_Java
	public void synpred14_Java_fragment()
	{
		EnterRule_synpred14_Java_fragment();
		EnterRule("synpred14_Java_fragment", 140);
		TraceIn("synpred14_Java_fragment", 140);
		try
		{
			// Java.g:626:13: ( GREATER_THAN )
			DebugEnterAlt(1);
			// Java.g:626:13: GREATER_THAN
			{
			DebugLocation(626, 13);
			Match(input,GREATER_THAN,Follow._GREATER_THAN_in_synpred14_Java5240); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Java_fragment", 140);
			LeaveRule("synpred14_Java_fragment", 140);
			LeaveRule_synpred14_Java_fragment();
		}
	}
	// $ANTLR end synpred14_Java

	partial void EnterRule_synpred15_Java_fragment();
	partial void LeaveRule_synpred15_Java_fragment();

	// $ANTLR start synpred15_Java
	public void synpred15_Java_fragment()
	{
		EnterRule_synpred15_Java_fragment();
		EnterRule("synpred15_Java_fragment", 141);
		TraceIn("synpred15_Java_fragment", 141);
		try
		{
			// Java.g:629:13: ( SHIFT_RIGHT )
			DebugEnterAlt(1);
			// Java.g:629:13: SHIFT_RIGHT
			{
			DebugLocation(629, 13);
			Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_synpred15_Java5256); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Java_fragment", 141);
			LeaveRule("synpred15_Java_fragment", 141);
			LeaveRule_synpred15_Java_fragment();
		}
	}
	// $ANTLR end synpred15_Java

	partial void EnterRule_synpred16_Java_fragment();
	partial void LeaveRule_synpred16_Java_fragment();

	// $ANTLR start synpred16_Java
	public void synpred16_Java_fragment()
	{
		JavaParser.genericTypeListClosing_return count = default(JavaParser.genericTypeListClosing_return);

		EnterRule_synpred16_Java_fragment();
		EnterRule("synpred16_Java_fragment", 142);
		TraceIn("synpred16_Java_fragment", 142);
		try
		{
			// Java.g:636:17: (count= genericTypeListClosing )
			DebugEnterAlt(1);
			// Java.g:636:17: count= genericTypeListClosing
			{
			DebugLocation(636, 23);
			PushFollow(Follow._genericTypeListClosing_in_synpred16_Java5309);
			count=genericTypeListClosing();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Java_fragment", 142);
			LeaveRule("synpred16_Java_fragment", 142);
			LeaveRule_synpred16_Java_fragment();
		}
	}
	// $ANTLR end synpred16_Java

	partial void EnterRule_synpred17_Java_fragment();
	partial void LeaveRule_synpred17_Java_fragment();

	// $ANTLR start synpred17_Java
	public void synpred17_Java_fragment()
	{
		JavaParser.genericTypeListClosing_return count = default(JavaParser.genericTypeListClosing_return);

		EnterRule_synpred17_Java_fragment();
		EnterRule("synpred17_Java_fragment", 143);
		TraceIn("synpred17_Java_fragment", 143);
		try
		{
			// Java.g:632:13: ( BIT_SHIFT_RIGHT (count= genericTypeListClosing )? )
			DebugEnterAlt(1);
			// Java.g:632:13: BIT_SHIFT_RIGHT (count= genericTypeListClosing )?
			{
			DebugLocation(632, 13);
			Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_synpred17_Java5272); if (state.failed) return;
			DebugLocation(636, 13);
			// Java.g:636:13: (count= genericTypeListClosing )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, false);
			int LA158_1 = input.LA(1);

			if ((LA158_1==BIT_SHIFT_RIGHT||LA158_1==GREATER_THAN||LA158_1==SHIFT_RIGHT))
			{
				alt158 = 1;
			}
			else if ((LA158_1==EOF))
			{
				int LA158_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_Java_fragment)))
				{
					alt158 = 1;
				}
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:636:17: count= genericTypeListClosing
				{
				DebugLocation(636, 23);
				PushFollow(Follow._genericTypeListClosing_in_synpred17_Java5309);
				count=genericTypeListClosing();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(158); }


			}

		}
		finally
		{
			TraceOut("synpred17_Java_fragment", 143);
			LeaveRule("synpred17_Java_fragment", 143);
			LeaveRule_synpred17_Java_fragment();
		}
	}
	// $ANTLR end synpred17_Java

	partial void EnterRule_synpred18_Java_fragment();
	partial void LeaveRule_synpred18_Java_fragment();

	// $ANTLR start synpred18_Java
	public void synpred18_Java_fragment()
	{
		EnterRule_synpred18_Java_fragment();
		EnterRule("synpred18_Java_fragment", 144);
		TraceIn("synpred18_Java_fragment", 144);
		try
		{
			// Java.g:670:15: ( bound )
			DebugEnterAlt(1);
			// Java.g:670:15: bound
			{
			DebugLocation(670, 15);
			PushFollow(Follow._bound_in_synpred18_Java5400);
			bound();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_Java_fragment", 144);
			LeaveRule("synpred18_Java_fragment", 144);
			LeaveRule_synpred18_Java_fragment();
		}
	}
	// $ANTLR end synpred18_Java

	partial void EnterRule_synpred34_Java_fragment();
	partial void LeaveRule_synpred34_Java_fragment();

	// $ANTLR start synpred34_Java
	public void synpred34_Java_fragment()
	{
		EnterRule_synpred34_Java_fragment();
		EnterRule("synpred34_Java_fragment", 160);
		TraceIn("synpred34_Java_fragment", 160);
		try
		{
			// Java.g:727:9: ( STATIC block )
			DebugEnterAlt(1);
			// Java.g:727:9: STATIC block
			{
			DebugLocation(727, 9);
			Match(input,STATIC,Follow._STATIC_in_synpred34_Java5934); if (state.failed) return;
			DebugLocation(727, 16);
			PushFollow(Follow._block_in_synpred34_Java5936);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred34_Java_fragment", 160);
			LeaveRule("synpred34_Java_fragment", 160);
			LeaveRule_synpred34_Java_fragment();
		}
	}
	// $ANTLR end synpred34_Java

	partial void EnterRule_synpred44_Java_fragment();
	partial void LeaveRule_synpred44_Java_fragment();

	// $ANTLR start synpred44_Java
	public void synpred44_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred44_Java_fragment();
		EnterRule("synpred44_Java_fragment", 170);
		TraceIn("synpred44_Java_fragment", 170);
		try
		{
			// Java.g:729:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) )
			DebugEnterAlt(1);
			// Java.g:729:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			{
			DebugLocation(729, 13);
			// Java.g:729:13: ( genericTypeParameterList )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_1 = input.LA(1);

			if ((LA164_1==LESS_THAN))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:729:13: genericTypeParameterList
				{
				DebugLocation(729, 13);
				PushFollow(Follow._genericTypeParameterList_in_synpred44_Java5973);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(730, 13);
			// Java.g:730:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			int alt171=3;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt171 = 1;
				}
				break;
			case IDENT:
				{
				int LA171_2 = input.LA(2);

				if ((LA171_2==DOT||LA171_2==IDENT||LA171_2==LBRACK||LA171_2==LESS_THAN))
				{
					alt171 = 1;
				}
				else if ((LA171_2==LPAREN))
				{
					alt171 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 171, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				alt171 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 171, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:730:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(730, 17);
				PushFollow(Follow._type_in_synpred44_Java5992);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(730, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred44_Java5994); if (state.failed) return;
				DebugLocation(730, 28);
				PushFollow(Follow._formalParameterList_in_synpred44_Java5996);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(730, 48);
				// Java.g:730:48: ( arrayDeclaratorList )?
				int alt165=2;
				try { DebugEnterSubRule(165);
				try { DebugEnterDecision(165, false);
				int LA165_1 = input.LA(1);

				if ((LA165_1==LBRACK))
				{
					alt165 = 1;
				}
				} finally { DebugExitDecision(165); }
				switch (alt165)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:730:48: arrayDeclaratorList
					{
					DebugLocation(730, 48);
					PushFollow(Follow._arrayDeclaratorList_in_synpred44_Java5998);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(165); }

				DebugLocation(730, 69);
				// Java.g:730:69: ( throwsClause )?
				int alt166=2;
				try { DebugEnterSubRule(166);
				try { DebugEnterDecision(166, false);
				int LA166_1 = input.LA(1);

				if ((LA166_1==THROWS))
				{
					alt166 = 1;
				}
				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:730:69: throwsClause
					{
					DebugLocation(730, 69);
					PushFollow(Follow._throwsClause_in_synpred44_Java6001);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(166); }

				DebugLocation(730, 83);
				// Java.g:730:83: ( block | SEMI )
				int alt167=2;
				try { DebugEnterSubRule(167);
				try { DebugEnterDecision(167, false);
				int LA167_1 = input.LA(1);

				if ((LA167_1==LCURLY))
				{
					alt167 = 1;
				}
				else if ((LA167_1==SEMI))
				{
					alt167 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 167, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(167); }
				switch (alt167)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:730:84: block
					{
					DebugLocation(730, 84);
					PushFollow(Follow._block_in_synpred44_Java6005);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:730:92: SEMI
					{
					DebugLocation(730, 92);
					Match(input,SEMI,Follow._SEMI_in_synpred44_Java6009); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(167); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:732:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(732, 17);
				Match(input,VOID,Follow._VOID_in_synpred44_Java6071); if (state.failed) return;
				DebugLocation(732, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred44_Java6073); if (state.failed) return;
				DebugLocation(732, 28);
				PushFollow(Follow._formalParameterList_in_synpred44_Java6075);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(732, 48);
				// Java.g:732:48: ( throwsClause )?
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				int LA168_1 = input.LA(1);

				if ((LA168_1==THROWS))
				{
					alt168 = 1;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:732:48: throwsClause
					{
					DebugLocation(732, 48);
					PushFollow(Follow._throwsClause_in_synpred44_Java6077);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(168); }

				DebugLocation(732, 62);
				// Java.g:732:62: ( block | SEMI )
				int alt169=2;
				try { DebugEnterSubRule(169);
				try { DebugEnterDecision(169, false);
				int LA169_1 = input.LA(1);

				if ((LA169_1==LCURLY))
				{
					alt169 = 1;
				}
				else if ((LA169_1==SEMI))
				{
					alt169 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 169, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:732:63: block
					{
					DebugLocation(732, 63);
					PushFollow(Follow._block_in_synpred44_Java6081);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:732:71: SEMI
					{
					DebugLocation(732, 71);
					Match(input,SEMI,Follow._SEMI_in_synpred44_Java6085); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(169); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:734:17: ident= IDENT formalParameterList ( throwsClause )? block
				{
				DebugLocation(734, 22);
				ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred44_Java6144); if (state.failed) return;
				DebugLocation(734, 29);
				PushFollow(Follow._formalParameterList_in_synpred44_Java6146);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(734, 49);
				// Java.g:734:49: ( throwsClause )?
				int alt170=2;
				try { DebugEnterSubRule(170);
				try { DebugEnterDecision(170, false);
				int LA170_1 = input.LA(1);

				if ((LA170_1==THROWS))
				{
					alt170 = 1;
				}
				} finally { DebugExitDecision(170); }
				switch (alt170)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:734:49: throwsClause
					{
					DebugLocation(734, 49);
					PushFollow(Follow._throwsClause_in_synpred44_Java6148);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(170); }

				DebugLocation(734, 63);
				PushFollow(Follow._block_in_synpred44_Java6151);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(171); }


			}

		}
		finally
		{
			TraceOut("synpred44_Java_fragment", 170);
			LeaveRule("synpred44_Java_fragment", 170);
			LeaveRule_synpred44_Java_fragment();
		}
	}
	// $ANTLR end synpred44_Java

	partial void EnterRule_synpred45_Java_fragment();
	partial void LeaveRule_synpred45_Java_fragment();

	// $ANTLR start synpred45_Java
	public void synpred45_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred45_Java_fragment();
		EnterRule("synpred45_Java_fragment", 171);
		TraceIn("synpred45_Java_fragment", 171);
		try
		{
			// Java.g:728:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// Java.g:728:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
			{
			DebugLocation(728, 9);
			PushFollow(Follow._modifierList_in_synpred45_Java5959);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(729, 9);
			// Java.g:729:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			switch (input.LA(1))
			{
			case LESS_THAN:
			case VOID:
				{
				alt180 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA180_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt180 = 1;
				}
				else if ((true))
				{
					alt180 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 180, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA180_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt180 = 1;
				}
				else if ((true))
				{
					alt180 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 180, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 180, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:729:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				{
				DebugLocation(729, 13);
				// Java.g:729:13: ( genericTypeParameterList )?
				int alt172=2;
				try { DebugEnterSubRule(172);
				try { DebugEnterDecision(172, false);
				int LA172_1 = input.LA(1);

				if ((LA172_1==LESS_THAN))
				{
					alt172 = 1;
				}
				} finally { DebugExitDecision(172); }
				switch (alt172)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:729:13: genericTypeParameterList
					{
					DebugLocation(729, 13);
					PushFollow(Follow._genericTypeParameterList_in_synpred45_Java5973);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(172); }

				DebugLocation(730, 13);
				// Java.g:730:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				int alt179=3;
				try { DebugEnterSubRule(179);
				try { DebugEnterDecision(179, false);
				switch (input.LA(1))
				{
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					alt179 = 1;
					}
					break;
				case IDENT:
					{
					int LA179_2 = input.LA(2);

					if ((LA179_2==DOT||LA179_2==IDENT||LA179_2==LBRACK||LA179_2==LESS_THAN))
					{
						alt179 = 1;
					}
					else if ((LA179_2==LPAREN))
					{
						alt179 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 179, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VOID:
					{
					alt179 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 179, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:730:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(730, 17);
					PushFollow(Follow._type_in_synpred45_Java5992);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(730, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred45_Java5994); if (state.failed) return;
					DebugLocation(730, 28);
					PushFollow(Follow._formalParameterList_in_synpred45_Java5996);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(730, 48);
					// Java.g:730:48: ( arrayDeclaratorList )?
					int alt173=2;
					try { DebugEnterSubRule(173);
					try { DebugEnterDecision(173, false);
					int LA173_1 = input.LA(1);

					if ((LA173_1==LBRACK))
					{
						alt173 = 1;
					}
					} finally { DebugExitDecision(173); }
					switch (alt173)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:730:48: arrayDeclaratorList
						{
						DebugLocation(730, 48);
						PushFollow(Follow._arrayDeclaratorList_in_synpred45_Java5998);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(173); }

					DebugLocation(730, 69);
					// Java.g:730:69: ( throwsClause )?
					int alt174=2;
					try { DebugEnterSubRule(174);
					try { DebugEnterDecision(174, false);
					int LA174_1 = input.LA(1);

					if ((LA174_1==THROWS))
					{
						alt174 = 1;
					}
					} finally { DebugExitDecision(174); }
					switch (alt174)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:730:69: throwsClause
						{
						DebugLocation(730, 69);
						PushFollow(Follow._throwsClause_in_synpred45_Java6001);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(174); }

					DebugLocation(730, 83);
					// Java.g:730:83: ( block | SEMI )
					int alt175=2;
					try { DebugEnterSubRule(175);
					try { DebugEnterDecision(175, false);
					int LA175_1 = input.LA(1);

					if ((LA175_1==LCURLY))
					{
						alt175 = 1;
					}
					else if ((LA175_1==SEMI))
					{
						alt175 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 175, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(175); }
					switch (alt175)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:730:84: block
						{
						DebugLocation(730, 84);
						PushFollow(Follow._block_in_synpred45_Java6005);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:730:92: SEMI
						{
						DebugLocation(730, 92);
						Match(input,SEMI,Follow._SEMI_in_synpred45_Java6009); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(175); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:732:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(732, 17);
					Match(input,VOID,Follow._VOID_in_synpred45_Java6071); if (state.failed) return;
					DebugLocation(732, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred45_Java6073); if (state.failed) return;
					DebugLocation(732, 28);
					PushFollow(Follow._formalParameterList_in_synpred45_Java6075);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(732, 48);
					// Java.g:732:48: ( throwsClause )?
					int alt176=2;
					try { DebugEnterSubRule(176);
					try { DebugEnterDecision(176, false);
					int LA176_1 = input.LA(1);

					if ((LA176_1==THROWS))
					{
						alt176 = 1;
					}
					} finally { DebugExitDecision(176); }
					switch (alt176)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:732:48: throwsClause
						{
						DebugLocation(732, 48);
						PushFollow(Follow._throwsClause_in_synpred45_Java6077);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(176); }

					DebugLocation(732, 62);
					// Java.g:732:62: ( block | SEMI )
					int alt177=2;
					try { DebugEnterSubRule(177);
					try { DebugEnterDecision(177, false);
					int LA177_1 = input.LA(1);

					if ((LA177_1==LCURLY))
					{
						alt177 = 1;
					}
					else if ((LA177_1==SEMI))
					{
						alt177 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 177, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:732:63: block
						{
						DebugLocation(732, 63);
						PushFollow(Follow._block_in_synpred45_Java6081);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:732:71: SEMI
						{
						DebugLocation(732, 71);
						Match(input,SEMI,Follow._SEMI_in_synpred45_Java6085); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(177); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:734:17: ident= IDENT formalParameterList ( throwsClause )? block
					{
					DebugLocation(734, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred45_Java6144); if (state.failed) return;
					DebugLocation(734, 29);
					PushFollow(Follow._formalParameterList_in_synpred45_Java6146);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(734, 49);
					// Java.g:734:49: ( throwsClause )?
					int alt178=2;
					try { DebugEnterSubRule(178);
					try { DebugEnterDecision(178, false);
					int LA178_1 = input.LA(1);

					if ((LA178_1==THROWS))
					{
						alt178 = 1;
					}
					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:734:49: throwsClause
						{
						DebugLocation(734, 49);
						PushFollow(Follow._throwsClause_in_synpred45_Java6148);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(178); }

					DebugLocation(734, 63);
					PushFollow(Follow._block_in_synpred45_Java6151);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(179); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:737:13: type classFieldDeclaratorList SEMI
				{
				DebugLocation(737, 13);
				PushFollow(Follow._type_in_synpred45_Java6215);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(737, 18);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred45_Java6217);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(737, 43);
				Match(input,SEMI,Follow._SEMI_in_synpred45_Java6219); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(180); }


			}

		}
		finally
		{
			TraceOut("synpred45_Java_fragment", 171);
			LeaveRule("synpred45_Java_fragment", 171);
			LeaveRule_synpred45_Java_fragment();
		}
	}
	// $ANTLR end synpred45_Java

	partial void EnterRule_synpred46_Java_fragment();
	partial void LeaveRule_synpred46_Java_fragment();

	// $ANTLR start synpred46_Java
	public void synpred46_Java_fragment()
	{
		EnterRule_synpred46_Java_fragment();
		EnterRule("synpred46_Java_fragment", 172);
		TraceIn("synpred46_Java_fragment", 172);
		try
		{
			// Java.g:740:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// Java.g:740:9: typeDeclaration
			{
			DebugLocation(740, 9);
			PushFollow(Follow._typeDeclaration_in_synpred46_Java6264);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Java_fragment", 172);
			LeaveRule("synpred46_Java_fragment", 172);
			LeaveRule_synpred46_Java_fragment();
		}
	}
	// $ANTLR end synpred46_Java

	partial void EnterRule_synpred52_Java_fragment();
	partial void LeaveRule_synpred52_Java_fragment();

	// $ANTLR start synpred52_Java
	public void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 178);
		TraceIn("synpred52_Java_fragment", 178);
		try
		{
			// Java.g:746:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
			DebugEnterAlt(1);
			// Java.g:746:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			{
			DebugLocation(746, 13);
			// Java.g:746:13: ( genericTypeParameterList )?
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, false);
			int LA183_1 = input.LA(1);

			if ((LA183_1==LESS_THAN))
			{
				alt183 = 1;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:746:13: genericTypeParameterList
				{
				DebugLocation(746, 13);
				PushFollow(Follow._genericTypeParameterList_in_synpred52_Java6320);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(183); }

			DebugLocation(747, 13);
			// Java.g:747:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			int LA187_1 = input.LA(1);

			if ((LA187_1==BOOLEAN||LA187_1==BYTE||LA187_1==CHAR||LA187_1==DOUBLE||LA187_1==FLOAT||LA187_1==IDENT||LA187_1==INT||LA187_1==LONG||LA187_1==SHORT))
			{
				alt187 = 1;
			}
			else if ((LA187_1==VOID))
			{
				alt187 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 187, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:747:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
				{
				DebugLocation(747, 17);
				PushFollow(Follow._type_in_synpred52_Java6339);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(747, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred52_Java6341); if (state.failed) return;
				DebugLocation(747, 28);
				PushFollow(Follow._formalParameterList_in_synpred52_Java6343);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(747, 48);
				// Java.g:747:48: ( arrayDeclaratorList )?
				int alt184=2;
				try { DebugEnterSubRule(184);
				try { DebugEnterDecision(184, false);
				int LA184_1 = input.LA(1);

				if ((LA184_1==LBRACK))
				{
					alt184 = 1;
				}
				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:747:48: arrayDeclaratorList
					{
					DebugLocation(747, 48);
					PushFollow(Follow._arrayDeclaratorList_in_synpred52_Java6345);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(184); }

				DebugLocation(747, 69);
				// Java.g:747:69: ( throwsClause )?
				int alt185=2;
				try { DebugEnterSubRule(185);
				try { DebugEnterDecision(185, false);
				int LA185_1 = input.LA(1);

				if ((LA185_1==THROWS))
				{
					alt185 = 1;
				}
				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:747:69: throwsClause
					{
					DebugLocation(747, 69);
					PushFollow(Follow._throwsClause_in_synpred52_Java6348);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(185); }

				DebugLocation(747, 83);
				Match(input,SEMI,Follow._SEMI_in_synpred52_Java6351); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:749:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
				{
				DebugLocation(749, 17);
				Match(input,VOID,Follow._VOID_in_synpred52_Java6409); if (state.failed) return;
				DebugLocation(749, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred52_Java6411); if (state.failed) return;
				DebugLocation(749, 28);
				PushFollow(Follow._formalParameterList_in_synpred52_Java6413);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(749, 48);
				// Java.g:749:48: ( throwsClause )?
				int alt186=2;
				try { DebugEnterSubRule(186);
				try { DebugEnterDecision(186, false);
				int LA186_1 = input.LA(1);

				if ((LA186_1==THROWS))
				{
					alt186 = 1;
				}
				} finally { DebugExitDecision(186); }
				switch (alt186)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:749:48: throwsClause
					{
					DebugLocation(749, 48);
					PushFollow(Follow._throwsClause_in_synpred52_Java6415);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(186); }

				DebugLocation(749, 62);
				Match(input,SEMI,Follow._SEMI_in_synpred52_Java6418); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(187); }


			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 178);
			LeaveRule("synpred52_Java_fragment", 178);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java

	partial void EnterRule_synpred53_Java_fragment();
	partial void LeaveRule_synpred53_Java_fragment();

	// $ANTLR start synpred53_Java
	public void synpred53_Java_fragment()
	{
		EnterRule_synpred53_Java_fragment();
		EnterRule("synpred53_Java_fragment", 179);
		TraceIn("synpred53_Java_fragment", 179);
		try
		{
			// Java.g:745:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// Java.g:745:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			{
			DebugLocation(745, 9);
			PushFollow(Follow._modifierList_in_synpred53_Java6306);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(746, 9);
			// Java.g:746:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			int alt193=2;
			try { DebugEnterSubRule(193);
			try { DebugEnterDecision(193, false);
			switch (input.LA(1))
			{
			case LESS_THAN:
			case VOID:
				{
				alt193 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA193_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt193 = 1;
				}
				else if ((true))
				{
					alt193 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 193, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA193_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt193 = 1;
				}
				else if ((true))
				{
					alt193 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 193, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 193, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(193); }
			switch (alt193)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:746:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				{
				DebugLocation(746, 13);
				// Java.g:746:13: ( genericTypeParameterList )?
				int alt188=2;
				try { DebugEnterSubRule(188);
				try { DebugEnterDecision(188, false);
				int LA188_1 = input.LA(1);

				if ((LA188_1==LESS_THAN))
				{
					alt188 = 1;
				}
				} finally { DebugExitDecision(188); }
				switch (alt188)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:746:13: genericTypeParameterList
					{
					DebugLocation(746, 13);
					PushFollow(Follow._genericTypeParameterList_in_synpred53_Java6320);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(188); }

				DebugLocation(747, 13);
				// Java.g:747:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				int alt192=2;
				try { DebugEnterSubRule(192);
				try { DebugEnterDecision(192, false);
				int LA192_1 = input.LA(1);

				if ((LA192_1==BOOLEAN||LA192_1==BYTE||LA192_1==CHAR||LA192_1==DOUBLE||LA192_1==FLOAT||LA192_1==IDENT||LA192_1==INT||LA192_1==LONG||LA192_1==SHORT))
				{
					alt192 = 1;
				}
				else if ((LA192_1==VOID))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 192, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(192); }
				switch (alt192)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:747:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
					{
					DebugLocation(747, 17);
					PushFollow(Follow._type_in_synpred53_Java6339);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(747, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred53_Java6341); if (state.failed) return;
					DebugLocation(747, 28);
					PushFollow(Follow._formalParameterList_in_synpred53_Java6343);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(747, 48);
					// Java.g:747:48: ( arrayDeclaratorList )?
					int alt189=2;
					try { DebugEnterSubRule(189);
					try { DebugEnterDecision(189, false);
					int LA189_1 = input.LA(1);

					if ((LA189_1==LBRACK))
					{
						alt189 = 1;
					}
					} finally { DebugExitDecision(189); }
					switch (alt189)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:747:48: arrayDeclaratorList
						{
						DebugLocation(747, 48);
						PushFollow(Follow._arrayDeclaratorList_in_synpred53_Java6345);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(189); }

					DebugLocation(747, 69);
					// Java.g:747:69: ( throwsClause )?
					int alt190=2;
					try { DebugEnterSubRule(190);
					try { DebugEnterDecision(190, false);
					int LA190_1 = input.LA(1);

					if ((LA190_1==THROWS))
					{
						alt190 = 1;
					}
					} finally { DebugExitDecision(190); }
					switch (alt190)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:747:69: throwsClause
						{
						DebugLocation(747, 69);
						PushFollow(Follow._throwsClause_in_synpred53_Java6348);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(190); }

					DebugLocation(747, 83);
					Match(input,SEMI,Follow._SEMI_in_synpred53_Java6351); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:749:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
					{
					DebugLocation(749, 17);
					Match(input,VOID,Follow._VOID_in_synpred53_Java6409); if (state.failed) return;
					DebugLocation(749, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred53_Java6411); if (state.failed) return;
					DebugLocation(749, 28);
					PushFollow(Follow._formalParameterList_in_synpred53_Java6413);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(749, 48);
					// Java.g:749:48: ( throwsClause )?
					int alt191=2;
					try { DebugEnterSubRule(191);
					try { DebugEnterDecision(191, false);
					int LA191_1 = input.LA(1);

					if ((LA191_1==THROWS))
					{
						alt191 = 1;
					}
					} finally { DebugExitDecision(191); }
					switch (alt191)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:749:48: throwsClause
						{
						DebugLocation(749, 48);
						PushFollow(Follow._throwsClause_in_synpred53_Java6415);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(191); }

					DebugLocation(749, 62);
					Match(input,SEMI,Follow._SEMI_in_synpred53_Java6418); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(192); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:752:13: type interfaceFieldDeclaratorList SEMI
				{
				DebugLocation(752, 13);
				PushFollow(Follow._type_in_synpred53_Java6481);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(752, 18);
				PushFollow(Follow._interfaceFieldDeclaratorList_in_synpred53_Java6483);
				interfaceFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(752, 47);
				Match(input,SEMI,Follow._SEMI_in_synpred53_Java6485); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(193); }


			}

		}
		finally
		{
			TraceOut("synpred53_Java_fragment", 179);
			LeaveRule("synpred53_Java_fragment", 179);
			LeaveRule_synpred53_Java_fragment();
		}
	}
	// $ANTLR end synpred53_Java

	partial void EnterRule_synpred54_Java_fragment();
	partial void LeaveRule_synpred54_Java_fragment();

	// $ANTLR start synpred54_Java
	public void synpred54_Java_fragment()
	{
		EnterRule_synpred54_Java_fragment();
		EnterRule("synpred54_Java_fragment", 180);
		TraceIn("synpred54_Java_fragment", 180);
		try
		{
			// Java.g:755:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// Java.g:755:9: typeDeclaration
			{
			DebugLocation(755, 9);
			PushFollow(Follow._typeDeclaration_in_synpred54_Java6530);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_Java_fragment", 180);
			LeaveRule("synpred54_Java_fragment", 180);
			LeaveRule_synpred54_Java_fragment();
		}
	}
	// $ANTLR end synpred54_Java

	partial void EnterRule_synpred60_Java_fragment();
	partial void LeaveRule_synpred60_Java_fragment();

	// $ANTLR start synpred60_Java
	public void synpred60_Java_fragment()
	{
		EnterRule_synpred60_Java_fragment();
		EnterRule("synpred60_Java_fragment", 186);
		TraceIn("synpred60_Java_fragment", 186);
		try
		{
			// Java.g:794:9: ( arrayDeclarator )
			DebugEnterAlt(1);
			// Java.g:794:9: arrayDeclarator
			{
			DebugLocation(794, 9);
			PushFollow(Follow._arrayDeclarator_in_synpred60_Java6832);
			arrayDeclarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred60_Java_fragment", 186);
			LeaveRule("synpred60_Java_fragment", 186);
			LeaveRule_synpred60_Java_fragment();
		}
	}
	// $ANTLR end synpred60_Java

	partial void EnterRule_synpred78_Java_fragment();
	partial void LeaveRule_synpred78_Java_fragment();

	// $ANTLR start synpred78_Java
	public void synpred78_Java_fragment()
	{
		EnterRule_synpred78_Java_fragment();
		EnterRule("synpred78_Java_fragment", 204);
		TraceIn("synpred78_Java_fragment", 204);
		try
		{
			// Java.g:843:23: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// Java.g:843:23: arrayDeclaratorList
			{
			DebugLocation(843, 23);
			PushFollow(Follow._arrayDeclaratorList_in_synpred78_Java7233);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred78_Java_fragment", 204);
			LeaveRule("synpred78_Java_fragment", 204);
			LeaveRule_synpred78_Java_fragment();
		}
	}
	// $ANTLR end synpred78_Java

	partial void EnterRule_synpred79_Java_fragment();
	partial void LeaveRule_synpred79_Java_fragment();

	// $ANTLR start synpred79_Java
	public void synpred79_Java_fragment()
	{
		EnterRule_synpred79_Java_fragment();
		EnterRule("synpred79_Java_fragment", 205);
		TraceIn("synpred79_Java_fragment", 205);
		try
		{
			// Java.g:848:28: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// Java.g:848:28: arrayDeclaratorList
			{
			DebugLocation(848, 28);
			PushFollow(Follow._arrayDeclaratorList_in_synpred79_Java7282);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred79_Java_fragment", 205);
			LeaveRule("synpred79_Java_fragment", 205);
			LeaveRule_synpred79_Java_fragment();
		}
	}
	// $ANTLR end synpred79_Java

	partial void EnterRule_synpred81_Java_fragment();
	partial void LeaveRule_synpred81_Java_fragment();

	// $ANTLR start synpred81_Java
	public void synpred81_Java_fragment()
	{
		EnterRule_synpred81_Java_fragment();
		EnterRule("synpred81_Java_fragment", 207);
		TraceIn("synpred81_Java_fragment", 207);
		try
		{
			// Java.g:858:20: ( DOT typeIdent )
			DebugEnterAlt(1);
			// Java.g:858:20: DOT typeIdent
			{
			DebugLocation(858, 20);
			Match(input,DOT,Follow._DOT_in_synpred81_Java7367); if (state.failed) return;
			DebugLocation(858, 24);
			PushFollow(Follow._typeIdent_in_synpred81_Java7369);
			typeIdent();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred81_Java_fragment", 207);
			LeaveRule("synpred81_Java_fragment", 207);
			LeaveRule_synpred81_Java_fragment();
		}
	}
	// $ANTLR end synpred81_Java

	partial void EnterRule_synpred92_Java_fragment();
	partial void LeaveRule_synpred92_Java_fragment();

	// $ANTLR start synpred92_Java
	public void synpred92_Java_fragment()
	{
		EnterRule_synpred92_Java_fragment();
		EnterRule("synpred92_Java_fragment", 218);
		TraceIn("synpred92_Java_fragment", 218);
		try
		{
			// Java.g:887:40: ( COMMA genericTypeArgument )
			DebugEnterAlt(1);
			// Java.g:887:40: COMMA genericTypeArgument
			{
			DebugLocation(887, 40);
			Match(input,COMMA,Follow._COMMA_in_synpred92_Java7594); if (state.failed) return;
			DebugLocation(887, 46);
			PushFollow(Follow._genericTypeArgument_in_synpred92_Java7596);
			genericTypeArgument();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred92_Java_fragment", 218);
			LeaveRule("synpred92_Java_fragment", 218);
			LeaveRule_synpred92_Java_fragment();
		}
	}
	// $ANTLR end synpred92_Java

	partial void EnterRule_synpred94_Java_fragment();
	partial void LeaveRule_synpred94_Java_fragment();

	// $ANTLR start synpred94_Java
	public void synpred94_Java_fragment()
	{
		EnterRule_synpred94_Java_fragment();
		EnterRule("synpred94_Java_fragment", 220);
		TraceIn("synpred94_Java_fragment", 220);
		try
		{
			// Java.g:893:18: ( genericWildcardBoundType )
			DebugEnterAlt(1);
			// Java.g:893:18: genericWildcardBoundType
			{
			DebugLocation(893, 18);
			PushFollow(Follow._genericWildcardBoundType_in_synpred94_Java7650);
			genericWildcardBoundType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred94_Java_fragment", 220);
			LeaveRule("synpred94_Java_fragment", 220);
			LeaveRule_synpred94_Java_fragment();
		}
	}
	// $ANTLR end synpred94_Java

	partial void EnterRule_synpred99_Java_fragment();
	partial void LeaveRule_synpred99_Java_fragment();

	// $ANTLR start synpred99_Java
	public void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 225);
		TraceIn("synpred99_Java_fragment", 225);
		try
		{
			// Java.g:918:42: ( COMMA formalParameterStandardDecl )
			DebugEnterAlt(1);
			// Java.g:918:42: COMMA formalParameterStandardDecl
			{
			DebugLocation(918, 42);
			Match(input,COMMA,Follow._COMMA_in_synpred99_Java7868); if (state.failed) return;
			DebugLocation(918, 48);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred99_Java7870);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 225);
			LeaveRule("synpred99_Java_fragment", 225);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java

	partial void EnterRule_synpred101_Java_fragment();
	partial void LeaveRule_synpred101_Java_fragment();

	// $ANTLR start synpred101_Java
	public void synpred101_Java_fragment()
	{
		EnterRule_synpred101_Java_fragment();
		EnterRule("synpred101_Java_fragment", 227);
		TraceIn("synpred101_Java_fragment", 227);
		try
		{
			// Java.g:918:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
			DebugEnterAlt(1);
			// Java.g:918:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
			{
			DebugLocation(918, 13);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred101_Java7865);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(918, 41);
			// Java.g:918:41: ( COMMA formalParameterStandardDecl )*
			try { DebugEnterSubRule(196);
			while (true)
			{
				int alt196=2;
				try { DebugEnterDecision(196, false);
				int LA196_1 = input.LA(1);

				if ((LA196_1==COMMA))
				{
					int LA196_2 = input.LA(2);

					if ((EvaluatePredicate(synpred99_Java_fragment)))
					{
						alt196 = 1;
					}


				}


				} finally { DebugExitDecision(196); }
				switch ( alt196 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:918:42: COMMA formalParameterStandardDecl
					{
					DebugLocation(918, 42);
					Match(input,COMMA,Follow._COMMA_in_synpred101_Java7868); if (state.failed) return;
					DebugLocation(918, 48);
					PushFollow(Follow._formalParameterStandardDecl_in_synpred101_Java7870);
					formalParameterStandardDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop196;
				}
			}

			loop196:
				;

			} finally { DebugExitSubRule(196); }

			DebugLocation(918, 78);
			// Java.g:918:78: ( COMMA formalParameterVarArgDecl )?
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			int LA197_1 = input.LA(1);

			if ((LA197_1==COMMA))
			{
				alt197 = 1;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:918:79: COMMA formalParameterVarArgDecl
				{
				DebugLocation(918, 79);
				Match(input,COMMA,Follow._COMMA_in_synpred101_Java7875); if (state.failed) return;
				DebugLocation(918, 85);
				PushFollow(Follow._formalParameterVarArgDecl_in_synpred101_Java7877);
				formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(197); }


			}

		}
		finally
		{
			TraceOut("synpred101_Java_fragment", 227);
			LeaveRule("synpred101_Java_fragment", 227);
			LeaveRule_synpred101_Java_fragment();
		}
	}
	// $ANTLR end synpred101_Java

	partial void EnterRule_synpred102_Java_fragment();
	partial void LeaveRule_synpred102_Java_fragment();

	// $ANTLR start synpred102_Java
	public void synpred102_Java_fragment()
	{
		EnterRule_synpred102_Java_fragment();
		EnterRule("synpred102_Java_fragment", 228);
		TraceIn("synpred102_Java_fragment", 228);
		try
		{
			// Java.g:921:13: ( formalParameterVarArgDecl )
			DebugEnterAlt(1);
			// Java.g:921:13: formalParameterVarArgDecl
			{
			DebugLocation(921, 13);
			PushFollow(Follow._formalParameterVarArgDecl_in_synpred102_Java7934);
			formalParameterVarArgDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred102_Java_fragment", 228);
			LeaveRule("synpred102_Java_fragment", 228);
			LeaveRule_synpred102_Java_fragment();
		}
	}
	// $ANTLR end synpred102_Java

	partial void EnterRule_synpred103_Java_fragment();
	partial void LeaveRule_synpred103_Java_fragment();

	// $ANTLR start synpred103_Java
	public void synpred103_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred103_Java_fragment();
		EnterRule("synpred103_Java_fragment", 229);
		TraceIn("synpred103_Java_fragment", 229);
		try
		{
			// Java.g:942:13: ( DOT ident= IDENT )
			DebugEnterAlt(1);
			// Java.g:942:13: DOT ident= IDENT
			{
			DebugLocation(942, 13);
			Match(input,DOT,Follow._DOT_in_synpred103_Java8179); if (state.failed) return;
			DebugLocation(942, 22);
			ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred103_Java8183); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_Java_fragment", 229);
			LeaveRule("synpred103_Java_fragment", 229);
			LeaveRule_synpred103_Java_fragment();
		}
	}
	// $ANTLR end synpred103_Java

	partial void EnterRule_synpred104_Java_fragment();
	partial void LeaveRule_synpred104_Java_fragment();

	// $ANTLR start synpred104_Java
	public void synpred104_Java_fragment()
	{
		EnterRule_synpred104_Java_fragment();
		EnterRule("synpred104_Java_fragment", 230);
		TraceIn("synpred104_Java_fragment", 230);
		try
		{
			// Java.g:949:9: ( annotation )
			DebugEnterAlt(1);
			// Java.g:949:9: annotation
			{
			DebugLocation(949, 9);
			PushFollow(Follow._annotation_in_synpred104_Java8236);
			annotation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred104_Java_fragment", 230);
			LeaveRule("synpred104_Java_fragment", 230);
			LeaveRule_synpred104_Java_fragment();
		}
	}
	// $ANTLR end synpred104_Java

	partial void EnterRule_synpred117_Java_fragment();
	partial void LeaveRule_synpred117_Java_fragment();

	// $ANTLR start synpred117_Java
	public void synpred117_Java_fragment()
	{
		EnterRule_synpred117_Java_fragment();
		EnterRule("synpred117_Java_fragment", 243);
		TraceIn("synpred117_Java_fragment", 243);
		try
		{
			// Java.g:1000:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// Java.g:1000:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			{
			DebugLocation(1000, 9);
			PushFollow(Follow._modifierList_in_synpred117_Java8692);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1000, 22);
			PushFollow(Follow._type_in_synpred117_Java8694);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1001, 9);
			// Java.g:1001:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_1 = input.LA(1);

			if ((LA202_1==IDENT))
			{
				int LA202_2 = input.LA(2);

				if ((LA202_2==LPAREN))
				{
					alt202 = 1;
				}
				else if ((LA202_2==ASSIGN||LA202_2==COMMA||LA202_2==LBRACK||LA202_2==SEMI))
				{
					alt202 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 202, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 202, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1001:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
				{
				DebugLocation(1001, 13);
				Match(input,IDENT,Follow._IDENT_in_synpred117_Java8708); if (state.failed) return;
				DebugLocation(1001, 19);
				Match(input,LPAREN,Follow._LPAREN_in_synpred117_Java8710); if (state.failed) return;
				DebugLocation(1001, 26);
				Match(input,RPAREN,Follow._RPAREN_in_synpred117_Java8712); if (state.failed) return;
				DebugLocation(1001, 33);
				// Java.g:1001:33: ( annotationDefaultValue )?
				int alt201=2;
				try { DebugEnterSubRule(201);
				try { DebugEnterDecision(201, false);
				int LA201_1 = input.LA(1);

				if ((LA201_1==DEFAULT))
				{
					alt201 = 1;
				}
				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1001:33: annotationDefaultValue
					{
					DebugLocation(1001, 33);
					PushFollow(Follow._annotationDefaultValue_in_synpred117_Java8714);
					annotationDefaultValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(201); }

				DebugLocation(1001, 57);
				Match(input,SEMI,Follow._SEMI_in_synpred117_Java8717); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1003:13: classFieldDeclaratorList SEMI
				{
				DebugLocation(1003, 13);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred117_Java8759);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1003, 38);
				Match(input,SEMI,Follow._SEMI_in_synpred117_Java8761); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(202); }


			}

		}
		finally
		{
			TraceOut("synpred117_Java_fragment", 243);
			LeaveRule("synpred117_Java_fragment", 243);
			LeaveRule_synpred117_Java_fragment();
		}
	}
	// $ANTLR end synpred117_Java

	partial void EnterRule_synpred119_Java_fragment();
	partial void LeaveRule_synpred119_Java_fragment();

	// $ANTLR start synpred119_Java
	public void synpred119_Java_fragment()
	{
		EnterRule_synpred119_Java_fragment();
		EnterRule("synpred119_Java_fragment", 245);
		TraceIn("synpred119_Java_fragment", 245);
		try
		{
			// Java.g:1021:9: ( localVariableDeclaration SEMI )
			DebugEnterAlt(1);
			// Java.g:1021:9: localVariableDeclaration SEMI
			{
			DebugLocation(1021, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred119_Java8896);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1021, 34);
			Match(input,SEMI,Follow._SEMI_in_synpred119_Java8898); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Java_fragment", 245);
			LeaveRule("synpred119_Java_fragment", 245);
			LeaveRule_synpred119_Java_fragment();
		}
	}
	// $ANTLR end synpred119_Java

	partial void EnterRule_synpred120_Java_fragment();
	partial void LeaveRule_synpred120_Java_fragment();

	// $ANTLR start synpred120_Java
	public void synpred120_Java_fragment()
	{
		EnterRule_synpred120_Java_fragment();
		EnterRule("synpred120_Java_fragment", 246);
		TraceIn("synpred120_Java_fragment", 246);
		try
		{
			// Java.g:1022:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// Java.g:1022:9: typeDeclaration
			{
			DebugLocation(1022, 9);
			PushFollow(Follow._typeDeclaration_in_synpred120_Java8909);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred120_Java_fragment", 246);
			LeaveRule("synpred120_Java_fragment", 246);
			LeaveRule_synpred120_Java_fragment();
		}
	}
	// $ANTLR end synpred120_Java

	partial void EnterRule_synpred124_Java_fragment();
	partial void LeaveRule_synpred124_Java_fragment();

	// $ANTLR start synpred124_Java
	public void synpred124_Java_fragment()
	{
		EnterRule_synpred124_Java_fragment();
		EnterRule("synpred124_Java_fragment", 250);
		TraceIn("synpred124_Java_fragment", 250);
		try
		{
			// Java.g:1038:9: ( forStatement )
			DebugEnterAlt(1);
			// Java.g:1038:9: forStatement
			{
			DebugLocation(1038, 9);
			PushFollow(Follow._forStatement_in_synpred124_Java9050);
			forStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred124_Java_fragment", 250);
			LeaveRule("synpred124_Java_fragment", 250);
			LeaveRule_synpred124_Java_fragment();
		}
	}
	// $ANTLR end synpred124_Java

	partial void EnterRule_synpred125_Java_fragment();
	partial void LeaveRule_synpred125_Java_fragment();

	// $ANTLR start synpred125_Java
	public void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 251);
		TraceIn("synpred125_Java_fragment", 251);
		try
		{
			// Java.g:1039:7: ( forEachStatement )
			DebugEnterAlt(1);
			// Java.g:1039:7: forEachStatement
			{
			DebugLocation(1039, 7);
			PushFollow(Follow._forEachStatement_in_synpred125_Java9058);
			forEachStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 251);
			LeaveRule("synpred125_Java_fragment", 251);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java

	partial void EnterRule_synpred135_Java_fragment();
	partial void LeaveRule_synpred135_Java_fragment();

	// $ANTLR start synpred135_Java
	public void synpred135_Java_fragment()
	{
		EnterRule_synpred135_Java_fragment();
		EnterRule("synpred135_Java_fragment", 261);
		TraceIn("synpred135_Java_fragment", 261);
		try
		{
			// Java.g:1049:9: ( labeledStatement )
			DebugEnterAlt(1);
			// Java.g:1049:9: labeledStatement
			{
			DebugLocation(1049, 9);
			PushFollow(Follow._labeledStatement_in_synpred135_Java9158);
			labeledStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred135_Java_fragment", 261);
			LeaveRule("synpred135_Java_fragment", 261);
			LeaveRule_synpred135_Java_fragment();
		}
	}
	// $ANTLR end synpred135_Java

	partial void EnterRule_synpred137_Java_fragment();
	partial void LeaveRule_synpred137_Java_fragment();

	// $ANTLR start synpred137_Java
	public void synpred137_Java_fragment()
	{
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);

		EnterRule_synpred137_Java_fragment();
		EnterRule("synpred137_Java_fragment", 263);
		TraceIn("synpred137_Java_fragment", 263);
		try
		{
			// Java.g:1062:13: ( ELSE elseStat= statement )
			DebugEnterAlt(1);
			// Java.g:1062:13: ELSE elseStat= statement
			{
			DebugLocation(1062, 13);
			Match(input,ELSE,Follow._ELSE_in_synpred137_Java9326); if (state.failed) return;
			DebugLocation(1062, 26);
			PushFollow(Follow._statement_in_synpred137_Java9330);
			elseStat=statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred137_Java_fragment", 263);
			LeaveRule("synpred137_Java_fragment", 263);
			LeaveRule_synpred137_Java_fragment();
		}
	}
	// $ANTLR end synpred137_Java

	partial void EnterRule_synpred146_Java_fragment();
	partial void LeaveRule_synpred146_Java_fragment();

	// $ANTLR start synpred146_Java
	public void synpred146_Java_fragment()
	{
		EnterRule_synpred146_Java_fragment();
		EnterRule("synpred146_Java_fragment", 272);
		TraceIn("synpred146_Java_fragment", 272);
		try
		{
			// Java.g:1147:9: ( switchCaseLabel )
			DebugEnterAlt(1);
			// Java.g:1147:9: switchCaseLabel
			{
			DebugLocation(1147, 9);
			PushFollow(Follow._switchCaseLabel_in_synpred146_Java10086);
			switchCaseLabel();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred146_Java_fragment", 272);
			LeaveRule("synpred146_Java_fragment", 272);
			LeaveRule_synpred146_Java_fragment();
		}
	}
	// $ANTLR end synpred146_Java

	partial void EnterRule_synpred149_Java_fragment();
	partial void LeaveRule_synpred149_Java_fragment();

	// $ANTLR start synpred149_Java
	public void synpred149_Java_fragment()
	{
		EnterRule_synpred149_Java_fragment();
		EnterRule("synpred149_Java_fragment", 275);
		TraceIn("synpred149_Java_fragment", 275);
		try
		{
			// Java.g:1159:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// Java.g:1159:9: localVariableDeclaration
			{
			DebugLocation(1159, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred149_Java10176);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred149_Java_fragment", 275);
			LeaveRule("synpred149_Java_fragment", 275);
			LeaveRule_synpred149_Java_fragment();
		}
	}
	// $ANTLR end synpred149_Java

	partial void EnterRule_synpred150_Java_fragment();
	partial void LeaveRule_synpred150_Java_fragment();

	// $ANTLR start synpred150_Java
	public void synpred150_Java_fragment()
	{
		EnterRule_synpred150_Java_fragment();
		EnterRule("synpred150_Java_fragment", 276);
		TraceIn("synpred150_Java_fragment", 276);
		try
		{
			// Java.g:1160:9: ( expressionList )
			DebugEnterAlt(1);
			// Java.g:1160:9: expressionList
			{
			DebugLocation(1160, 9);
			PushFollow(Follow._expressionList_in_synpred150_Java10198);
			expressionList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred150_Java_fragment", 276);
			LeaveRule("synpred150_Java_fragment", 276);
			LeaveRule_synpred150_Java_fragment();
		}
	}
	// $ANTLR end synpred150_Java

	partial void EnterRule_synpred193_Java_fragment();
	partial void LeaveRule_synpred193_Java_fragment();

	// $ANTLR start synpred193_Java
	public void synpred193_Java_fragment()
	{
		EnterRule_synpred193_Java_fragment();
		EnterRule("synpred193_Java_fragment", 319);
		TraceIn("synpred193_Java_fragment", 319);
		try
		{
			// Java.g:1297:9: ( LPAREN simpleType RPAREN unaryExpressionAll )
			DebugEnterAlt(1);
			// Java.g:1297:9: LPAREN simpleType RPAREN unaryExpressionAll
			{
			DebugLocation(1297, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred193_Java11724); if (state.failed) return;
			DebugLocation(1297, 16);
			PushFollow(Follow._simpleType_in_synpred193_Java11726);
			simpleType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1297, 27);
			Match(input,RPAREN,Follow._RPAREN_in_synpred193_Java11728); if (state.failed) return;
			DebugLocation(1297, 34);
			PushFollow(Follow._unaryExpressionAll_in_synpred193_Java11730);
			unaryExpressionAll();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred193_Java_fragment", 319);
			LeaveRule("synpred193_Java_fragment", 319);
			LeaveRule_synpred193_Java_fragment();
		}
	}
	// $ANTLR end synpred193_Java

	partial void EnterRule_synpred194_Java_fragment();
	partial void LeaveRule_synpred194_Java_fragment();

	// $ANTLR start synpred194_Java
	public void synpred194_Java_fragment()
	{
		EnterRule_synpred194_Java_fragment();
		EnterRule("synpred194_Java_fragment", 320);
		TraceIn("synpred194_Java_fragment", 320);
		try
		{
			// Java.g:1298:9: ( LPAREN objectType RPAREN unaryExpressionRest )
			DebugEnterAlt(1);
			// Java.g:1298:9: LPAREN objectType RPAREN unaryExpressionRest
			{
			DebugLocation(1298, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred194_Java11756); if (state.failed) return;
			DebugLocation(1298, 16);
			PushFollow(Follow._objectType_in_synpred194_Java11758);
			objectType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1298, 27);
			Match(input,RPAREN,Follow._RPAREN_in_synpred194_Java11760); if (state.failed) return;
			DebugLocation(1298, 34);
			PushFollow(Follow._unaryExpressionRest_in_synpred194_Java11762);
			unaryExpressionRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred194_Java_fragment", 320);
			LeaveRule("synpred194_Java_fragment", 320);
			LeaveRule_synpred194_Java_fragment();
		}
	}
	// $ANTLR end synpred194_Java

	partial void EnterRule_synpred197_Java_fragment();
	partial void LeaveRule_synpred197_Java_fragment();

	// $ANTLR start synpred197_Java
	public void synpred197_Java_fragment()
	{
		EnterRule_synpred197_Java_fragment();
		EnterRule("synpred197_Java_fragment", 323);
		TraceIn("synpred197_Java_fragment", 323);
		try
		{
			// Java.g:1310:17: ( ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )? )
			DebugEnterAlt(1);
			// Java.g:1310:17: ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )?
			{
			DebugLocation(1310, 17);
			// Java.g:1310:17: ( ( genericTypeArgumentListSimplified )? IDENT )
			DebugEnterAlt(1);
			// Java.g:1310:21: ( genericTypeArgumentListSimplified )? IDENT
			{
			DebugLocation(1310, 21);
			// Java.g:1310:21: ( genericTypeArgumentListSimplified )?
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, false);
			int LA204_1 = input.LA(1);

			if ((LA204_1==LESS_THAN))
			{
				alt204 = 1;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1310:21: genericTypeArgumentListSimplified
				{
				DebugLocation(1310, 21);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred197_Java11943);
				genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(204); }

			DebugLocation(1311, 21);
			Match(input,IDENT,Follow._IDENT_in_synpred197_Java11968); if (state.failed) return;

			}

			DebugLocation(1313, 17);
			// Java.g:1313:17: ( arguments )?
			int alt205=2;
			try { DebugEnterSubRule(205);
			try { DebugEnterDecision(205, false);
			int LA205_1 = input.LA(1);

			if ((LA205_1==LPAREN))
			{
				alt205 = 1;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1313:21: arguments
				{
				DebugLocation(1313, 21);
				PushFollow(Follow._arguments_in_synpred197_Java12047);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(205); }


			}

		}
		finally
		{
			TraceOut("synpred197_Java_fragment", 323);
			LeaveRule("synpred197_Java_fragment", 323);
			LeaveRule_synpred197_Java_fragment();
		}
	}
	// $ANTLR end synpred197_Java

	partial void EnterRule_synpred200_Java_fragment();
	partial void LeaveRule_synpred200_Java_fragment();

	// $ANTLR start synpred200_Java
	public void synpred200_Java_fragment()
	{
		IToken Super = default(IToken);

		EnterRule_synpred200_Java_fragment();
		EnterRule("synpred200_Java_fragment", 326);
		TraceIn("synpred200_Java_fragment", 326);
		try
		{
			// Java.g:1316:17: ( ( genericTypeArgumentListSimplified )? Super= SUPER arguments )
			DebugEnterAlt(1);
			// Java.g:1316:17: ( genericTypeArgumentListSimplified )? Super= SUPER arguments
			{
			DebugLocation(1316, 17);
			// Java.g:1316:17: ( genericTypeArgumentListSimplified )?
			int alt206=2;
			try { DebugEnterSubRule(206);
			try { DebugEnterDecision(206, false);
			int LA206_1 = input.LA(1);

			if ((LA206_1==LESS_THAN))
			{
				alt206 = 1;
			}
			} finally { DebugExitDecision(206); }
			switch (alt206)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1316:17: genericTypeArgumentListSimplified
				{
				DebugLocation(1316, 17);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred200_Java12182);
				genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(206); }

			DebugLocation(1317, 19);
			Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred200_Java12200); if (state.failed) return;
			DebugLocation(1317, 26);
			PushFollow(Follow._arguments_in_synpred200_Java12202);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred200_Java_fragment", 326);
			LeaveRule("synpred200_Java_fragment", 326);
			LeaveRule_synpred200_Java_fragment();
		}
	}
	// $ANTLR end synpred200_Java

	partial void EnterRule_synpred202_Java_fragment();
	partial void LeaveRule_synpred202_Java_fragment();

	// $ANTLR start synpred202_Java
	public void synpred202_Java_fragment()
	{
		IToken innerDot = default(IToken);

		EnterRule_synpred202_Java_fragment();
		EnterRule("synpred202_Java_fragment", 328);
		TraceIn("synpred202_Java_fragment", 328);
		try
		{
			// Java.g:1318:17: ( ( SUPER innerDot= DOT IDENT ) ( arguments )? )
			DebugEnterAlt(1);
			// Java.g:1318:17: ( SUPER innerDot= DOT IDENT ) ( arguments )?
			{
			DebugLocation(1318, 17);
			// Java.g:1318:17: ( SUPER innerDot= DOT IDENT )
			DebugEnterAlt(1);
			// Java.g:1318:21: SUPER innerDot= DOT IDENT
			{
			DebugLocation(1318, 21);
			Match(input,SUPER,Follow._SUPER_in_synpred202_Java12254); if (state.failed) return;
			DebugLocation(1318, 35);
			innerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred202_Java12258); if (state.failed) return;
			DebugLocation(1318, 40);
			Match(input,IDENT,Follow._IDENT_in_synpred202_Java12260); if (state.failed) return;

			}

			DebugLocation(1320, 17);
			// Java.g:1320:17: ( arguments )?
			int alt207=2;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, false);
			int LA207_1 = input.LA(1);

			if ((LA207_1==LPAREN))
			{
				alt207 = 1;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1320:21: arguments
				{
				DebugLocation(1320, 21);
				PushFollow(Follow._arguments_in_synpred202_Java12327);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(207); }


			}

		}
		finally
		{
			TraceOut("synpred202_Java_fragment", 328);
			LeaveRule("synpred202_Java_fragment", 328);
			LeaveRule_synpred202_Java_fragment();
		}
	}
	// $ANTLR end synpred202_Java

	partial void EnterRule_synpred223_Java_fragment();
	partial void LeaveRule_synpred223_Java_fragment();

	// $ANTLR start synpred223_Java
	public void synpred223_Java_fragment()
	{
		EnterRule_synpred223_Java_fragment();
		EnterRule("synpred223_Java_fragment", 349);
		TraceIn("synpred223_Java_fragment", 349);
		try
		{
			// Java.g:1368:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
			DebugEnterAlt(1);
			// Java.g:1368:13: ( arrayDeclarator )+ ( DOT CLASS )
			{
			DebugLocation(1368, 13);
			// Java.g:1368:13: ( arrayDeclarator )+
			int cnt219=0;
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, false);
				int LA219_1 = input.LA(1);

				if ((LA219_1==LBRACK))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch (alt219)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1368:17: arrayDeclarator
					{
					DebugLocation(1368, 17);
					PushFollow(Follow._arrayDeclarator_in_synpred223_Java13619);
					arrayDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt219 >= 1)
						goto loop219;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee219 = new EarlyExitException( 219, input );
					DebugRecognitionException(eee219);
					throw eee219;
				}
				cnt219++;
			}
			loop219:
				;

			} finally { DebugExitSubRule(219); }

			DebugLocation(1370, 13);
			// Java.g:1370:13: ( DOT CLASS )
			DebugEnterAlt(1);
			// Java.g:1370:17: DOT CLASS
			{
			DebugLocation(1370, 17);
			Match(input,DOT,Follow._DOT_in_synpred223_Java13687); if (state.failed) return;
			DebugLocation(1370, 21);
			Match(input,CLASS,Follow._CLASS_in_synpred223_Java13689); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred223_Java_fragment", 349);
			LeaveRule("synpred223_Java_fragment", 349);
			LeaveRule_synpred223_Java_fragment();
		}
	}
	// $ANTLR end synpred223_Java

	partial void EnterRule_synpred231_Java_fragment();
	partial void LeaveRule_synpred231_Java_fragment();

	// $ANTLR start synpred231_Java
	public void synpred231_Java_fragment()
	{
		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);

		EnterRule_synpred231_Java_fragment();
		EnterRule("synpred231_Java_fragment", 357);
		TraceIn("synpred231_Java_fragment", 357);
		try
		{
			// Java.g:1373:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression ) )
			DebugEnterAlt(1);
			// Java.g:1373:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			{
			DebugLocation(1373, 21);
			outerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred231_Java13820); if (state.failed) return;
			DebugLocation(1374, 13);
			// Java.g:1374:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			int alt222=5;
			try { DebugEnterSubRule(222);
			try { DebugEnterDecision(222, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt222 = 1;
				}
				break;
			case LESS_THAN:
				{
				alt222 = 2;
				}
				break;
			case THIS:
				{
				alt222 = 3;
				}
				break;
			case SUPER:
				{
				alt222 = 4;
				}
				break;
			case NEW:
				{
				alt222 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 222, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1374:17: CLASS
				{
				DebugLocation(1374, 17);
				Match(input,CLASS,Follow._CLASS_in_synpred231_Java13838); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1375:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				{
				DebugLocation(1375, 17);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred231_Java13901);
				genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1376, 17);
				// Java.g:1376:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				int alt221=3;
				try { DebugEnterSubRule(221);
				try { DebugEnterDecision(221, false);
				int LA221_1 = input.LA(1);

				if ((LA221_1==SUPER))
				{
					int LA221_2 = input.LA(2);

					if ((LA221_2==DOT))
					{
						alt221 = 2;
					}
					else if ((LA221_2==LPAREN))
					{
						alt221 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 221, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA221_1==IDENT))
				{
					alt221 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 221, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(221); }
				switch (alt221)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1376:21: Super= SUPER arguments
					{
					DebugLocation(1376, 26);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred231_Java13926); if (state.failed) return;
					DebugLocation(1376, 33);
					PushFollow(Follow._arguments_in_synpred231_Java13928);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1377:21: SUPER innerDot= DOT IDENT arguments
					{
					DebugLocation(1377, 21);
					Match(input,SUPER,Follow._SUPER_in_synpred231_Java13978); if (state.failed) return;
					DebugLocation(1377, 35);
					innerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred231_Java13982); if (state.failed) return;
					DebugLocation(1377, 40);
					Match(input,IDENT,Follow._IDENT_in_synpred231_Java13984); if (state.failed) return;
					DebugLocation(1377, 46);
					PushFollow(Follow._arguments_in_synpred231_Java13986);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:1378:21: IDENT arguments
					{
					DebugLocation(1378, 21);
					Match(input,IDENT,Follow._IDENT_in_synpred231_Java14036); if (state.failed) return;
					DebugLocation(1378, 27);
					PushFollow(Follow._arguments_in_synpred231_Java14038);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(221); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1380:17: THIS
				{
				DebugLocation(1380, 17);
				Match(input,THIS,Follow._THIS_in_synpred231_Java14113); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1381:17: Super= SUPER arguments
				{
				DebugLocation(1381, 22);
				Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred231_Java14179); if (state.failed) return;
				DebugLocation(1381, 29);
				PushFollow(Follow._arguments_in_synpred231_Java14181);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1382:17: innerNewExpression
				{
				DebugLocation(1382, 17);
				PushFollow(Follow._innerNewExpression_in_synpred231_Java14229);
				innerNewExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(222); }


			}

		}
		finally
		{
			TraceOut("synpred231_Java_fragment", 357);
			LeaveRule("synpred231_Java_fragment", 357);
			LeaveRule_synpred231_Java_fragment();
		}
	}
	// $ANTLR end synpred231_Java

	partial void EnterRule_synpred239_Java_fragment();
	partial void LeaveRule_synpred239_Java_fragment();

	// $ANTLR start synpred239_Java
	public void synpred239_Java_fragment()
	{
		EnterRule_synpred239_Java_fragment();
		EnterRule("synpred239_Java_fragment", 365);
		TraceIn("synpred239_Java_fragment", 365);
		try
		{
			// Java.g:1407:37: ( LBRACK expression RBRACK )
			DebugEnterAlt(1);
			// Java.g:1407:37: LBRACK expression RBRACK
			{
			DebugLocation(1407, 37);
			Match(input,LBRACK,Follow._LBRACK_in_synpred239_Java14630); if (state.failed) return;
			DebugLocation(1407, 45);
			PushFollow(Follow._expression_in_synpred239_Java14633);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1407, 56);
			Match(input,RBRACK,Follow._RBRACK_in_synpred239_Java14635); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Java_fragment", 365);
			LeaveRule("synpred239_Java_fragment", 365);
			LeaveRule_synpred239_Java_fragment();
		}
	}
	// $ANTLR end synpred239_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _compilationUnit_in_javaSource4590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationList_in_compilationUnit4626 = new BitSet(new ulong[]{0x400001000400012UL,0x1000001080000010UL,0x40041050081C040UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit4637 = new BitSet(new ulong[]{0x400001000400012UL,0x1000001080000010UL,0x40041050081C000UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit4649 = new BitSet(new ulong[]{0x400001000400012UL,0x1000001080000010UL,0x40041050081C000UL});
		public static readonly BitSet _typeDecls_in_compilationUnit4661 = new BitSet(new ulong[]{0x400001000400012UL,0x1000001000000010UL,0x40041050081C000UL});
		public static readonly BitSet _typeDeclaration_in_typeDecls4681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDecls4691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration4711 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_packageDeclaration4714 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration4716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration4742 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x100000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration4745 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_importDeclaration4748 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _DOTSTAR_in_importDeclaration4750 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_importDeclaration4753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_typeDeclaration4777 = new BitSet(new ulong[]{0x400001000400000UL,0x1000000000UL});
		public static readonly BitSet _classTypeDeclaration_in_typeDeclaration4792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceTypeDeclaration_in_typeDeclaration4807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumTypeDeclaration_in_typeDeclaration4822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_typeDeclaration4837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_classTypeDeclaration4872 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_classTypeDeclaration4874 = new BitSet(new ulong[]{0x0UL,0x500020000001UL});
		public static readonly BitSet _genericTypeParameterList_in_classTypeDeclaration4876 = new BitSet(new ulong[]{0x0UL,0x100020000001UL});
		public static readonly BitSet _classExtendsClause_in_classTypeDeclaration4879 = new BitSet(new ulong[]{0x0UL,0x100020000000UL});
		public static readonly BitSet _implementsClause_in_classTypeDeclaration4882 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _classBody_in_classTypeDeclaration4885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_classExtendsClause4938 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_classExtendsClause4940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_interfaceExtendsClause4984 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _typeList_in_interfaceExtendsClause4986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_implementsClause5030 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _typeList_in_implementsClause5032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeParameterList5077 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5079 = new BitSet(new ulong[]{0x40000800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _COMMA_in_genericTypeParameterList5082 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5084 = new BitSet(new ulong[]{0x40000800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeParameterList5088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_genericTypeListClosing5240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_genericTypeListClosing5256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_genericTypeListClosing5272 = new BitSet(new ulong[]{0x800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeListClosing5309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_genericTypeParameter5398 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _bound_in_genericTypeParameter5400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_bound5446 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_bound5448 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_bound5451 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_bound5453 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _ENUM_in_enumTypeDeclaration5494 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_enumTypeDeclaration5496 = new BitSet(new ulong[]{0x0UL,0x100020000000UL});
		public static readonly BitSet _implementsClause_in_enumTypeDeclaration5498 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _enumBody_in_enumTypeDeclaration5501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_enumBody5548 = new BitSet(new ulong[]{0x40000400000UL,0x8000000UL,0x900000UL});
		public static readonly BitSet _enumScopeDeclarations_in_enumBody5550 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RCURLY_in_enumBody5552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstants_in_enumScopeDeclarations5590 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _COMMA_in_enumScopeDeclarations5594 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _enumClassScopeDeclarations_in_enumScopeDeclarations5599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumClassScopeDeclarations5619 = new BitSet(new ulong[]{0x480001428400012UL,0x1010501408000050UL,0x50041051081C000UL});
		public static readonly BitSet _classScopeDeclarations_in_enumClassScopeDeclarations5621 = new BitSet(new ulong[]{0x480001428400012UL,0x1010501408000050UL,0x50041051081C000UL});
		public static readonly BitSet _enumConstant_in_enumConstants5660 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_enumConstants5663 = new BitSet(new ulong[]{0x400000UL,0x8000000UL});
		public static readonly BitSet _enumConstant_in_enumConstants5666 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _annotationList_in_enumConstant5691 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_enumConstant5693 = new BitSet(new ulong[]{0x2UL,0x20100000000000UL});
		public static readonly BitSet _arguments_in_enumConstant5696 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _classBody_in_enumConstant5699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_in_interfaceTypeDeclaration5724 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_interfaceTypeDeclaration5726 = new BitSet(new ulong[]{0x0UL,0x500000000001UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceTypeDeclaration5728 = new BitSet(new ulong[]{0x0UL,0x100000000001UL});
		public static readonly BitSet _interfaceExtendsClause_in_interfaceTypeDeclaration5731 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _interfaceBody_in_interfaceTypeDeclaration5734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList5784 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_typeList5787 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_typeList5790 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _LCURLY_in_classBody5815 = new BitSet(new ulong[]{0x480001428400010UL,0x1010501408000050UL,0x50041051091C000UL});
		public static readonly BitSet _classScopeDeclarations_in_classBody5817 = new BitSet(new ulong[]{0x480001428400010UL,0x1010501408000050UL,0x50041051091C000UL});
		public static readonly BitSet _RCURLY_in_classBody5820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_interfaceBody5862 = new BitSet(new ulong[]{0x480001428400010UL,0x1010401408000050UL,0x50041051091C000UL});
		public static readonly BitSet _interfaceScopeDeclarations_in_interfaceBody5864 = new BitSet(new ulong[]{0x480001428400010UL,0x1010401408000050UL,0x50041051091C000UL});
		public static readonly BitSet _RCURLY_in_interfaceBody5867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_classScopeDeclarations5905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classScopeDeclarations5934 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations5959 = new BitSet(new ulong[]{0x80000428000000UL,0x10400408000040UL,0x100000010000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations5973 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x100000010000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations5992 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5994 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5996 = new BitSet(new ulong[]{0x0UL,0x180000000000UL,0x100000800000UL});
		public static readonly BitSet _arrayDeclaratorList_in_classScopeDeclarations5998 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations6001 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x800000UL});
		public static readonly BitSet _block_in_classScopeDeclarations6005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_classScopeDeclarations6071 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations6073 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations6075 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations6077 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x800000UL});
		public static readonly BitSet _block_in_classScopeDeclarations6081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations6144 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations6146 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations6148 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations6151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_classScopeDeclarations6215 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_classScopeDeclarations6217 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_classScopeDeclarations6264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations6306 = new BitSet(new ulong[]{0x80000428000000UL,0x10400408000040UL,0x100000010000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations6320 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x100000010000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6339 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6341 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6343 = new BitSet(new ulong[]{0x0UL,0x80000000000UL,0x100000800000UL});
		public static readonly BitSet _arrayDeclaratorList_in_interfaceScopeDeclarations6345 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6348 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_interfaceScopeDeclarations6409 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6411 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6413 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6415 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6481 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6483 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_interfaceScopeDeclarations6530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6560 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_classFieldDeclaratorList6563 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6565 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_classFieldDeclarator6604 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _ASSIGN_in_classFieldDeclarator6607 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B450050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _variableInitializer_in_classFieldDeclarator6609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6654 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaratorList6657 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6659 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_interfaceFieldDeclarator6698 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ASSIGN_in_interfaceFieldDeclarator6700 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B450050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _variableInitializer_in_interfaceFieldDeclarator6702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_variableDeclaratorId6744 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_variableDeclaratorId6747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer6767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer6777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayDeclarator6796 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _RBRACK_in_arrayDeclarator6798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_arrayDeclaratorList6832 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _LCURLY_in_arrayInitializer6877 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B450050A0000C8UL,0x10082181010010AUL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6880 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6883 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B450050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6885 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6889 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RCURLY_in_arrayInitializer6894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROWS_in_throwsClause6932 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _qualifiedIdentList_in_throwsClause6934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifierList6971 = new BitSet(new ulong[]{0x400012UL,0x1000000000000010UL,0x40041050001C000UL});
		public static readonly BitSet _PUBLIC_in_modifier7012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_modifier7022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_modifier7032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier7042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSTRACT_in_modifier7052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIVE_in_modifier7062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifier7072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSIENT_in_modifier7082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOLATILE_in_modifier7092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRICTFP_in_modifier7102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_modifier7112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_localModifierList7131 = new BitSet(new ulong[]{0x400002UL,0x10UL});
		public static readonly BitSet _FINAL_in_localModifier7172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_localModifier7182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleType_in_type7201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectType_in_type7211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_simpleType7231 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_simpleType7233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdent_in_objectType7280 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectType7282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_objectTypeSimplified7322 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectTypeSimplified7324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7364 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdent7367 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7369 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7409 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdentSimplified7412 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7414 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _IDENT_in_typeIdent7454 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _genericTypeArgumentList_in_typeIdent7457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_typeIdentSimplified7477 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_typeIdentSimplified7480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentList7589 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10040000UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7591 = new BitSet(new ulong[]{0x40000800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentList7594 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10040000UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7596 = new BitSet(new ulong[]{0x40000800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentList7600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgument7638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgument7648 = new BitSet(new ulong[]{0x2UL,0x1UL,0x1000000000UL});
		public static readonly BitSet _genericWildcardBoundType_in_genericTypeArgument7650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_genericWildcardBoundType7692 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_genericWildcardBoundType7701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentListSimplified7720 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10040000UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7722 = new BitSet(new ulong[]{0x40000800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentListSimplified7725 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10040000UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7727 = new BitSet(new ulong[]{0x40000800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentListSimplified7731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgumentSimplified7773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgumentSimplified7783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7806 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_qualifiedIdentList7809 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7812 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _LPAREN_in_formalParameterList7837 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10400000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7865 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7868 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7870 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7875 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10000000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7877 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7934 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_formalParameterList8011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterStandardDecl8034 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_formalParameterStandardDecl8036 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterStandardDecl8038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterVarArgDecl8082 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_formalParameterVarArgDecl8084 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _ELLIPSIS_in_formalParameterVarArgDecl8086 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterVarArgDecl8088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier8136 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedIdentifier8179 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier8183 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _annotation_in_annotationList8236 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _AT_in_annotation8274 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_annotation8277 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _annotationInit_in_annotation8279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_annotationInit8303 = new BitSet(new ulong[]{0x81400C28400000UL,0xA0B450050A0000C8UL,0x10082181040010AUL});
		public static readonly BitSet _annotationInitializers_in_annotationInit8305 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_annotationInit8308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8346 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_annotationInitializers8349 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8351 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializers8381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_annotationInitializer8422 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ASSIGN_in_annotationInitializer8425 = new BitSet(new ulong[]{0x81400C28400000UL,0xA0B450050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializer8428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueExpression_in_annotationElementValue8451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_annotationElementValue8461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueArrayInitializer_in_annotationElementValue8471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_annotationElementValueExpression8494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationElementValueArrayInitializer8534 = new BitSet(new ulong[]{0x81440C28400000UL,0xA0B450050A0000C8UL,0x10082181010010AUL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8537 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8540 = new BitSet(new ulong[]{0x81400C28400000UL,0xA0B450050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8542 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RCURLY_in_annotationElementValueArrayInitializer8553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_annotationTypeDeclaration8596 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration8598 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_annotationTypeDeclaration8600 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _annotationBody_in_annotationTypeDeclaration8602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationBody8645 = new BitSet(new ulong[]{0x480001428400010UL,0x1010001408000050UL,0x40041051011C000UL});
		public static readonly BitSet _annotationScopeDeclarations_in_annotationBody8647 = new BitSet(new ulong[]{0x480001428400010UL,0x1010001408000050UL,0x40041051011C000UL});
		public static readonly BitSet _RCURLY_in_annotationBody8650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations8692 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations8694 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_annotationScopeDeclarations8708 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _LPAREN_in_annotationScopeDeclarations8710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_annotationScopeDeclarations8712 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _annotationDefaultValue_in_annotationScopeDeclarations8714 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_annotationScopeDeclarations8759 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_annotationScopeDeclarations8806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_annotationDefaultValue8829 = new BitSet(new ulong[]{0x81400C28400000UL,0xA0B450050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _annotationElementValue_in_annotationDefaultValue8832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_block8853 = new BitSet(new ulong[]{0x491601C38500010UL,0xB0B450151A0002D8UL,0xD01CB5D10B1C10AUL});
		public static readonly BitSet _blockStatement_in_block8855 = new BitSet(new ulong[]{0x491601C38500010UL,0xB0B450151A0002D8UL,0xD01CB5D10B1C10AUL});
		public static readonly BitSet _RCURLY_in_block8858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_blockStatement8896 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_blockStatement8898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_blockStatement8909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement8919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_localVariableDeclaration8960 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_localVariableDeclaration8962 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_localVariableDeclaration8964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement9017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assertStatement_in_statement9027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement9037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_statement9050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forEachStatement_in_statement9058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_statement9068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doWhileStatement_in_statement9078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statement9088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statement9098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _synchronizedStatement_in_statement9108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statement9118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statement9128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statement9138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statement9148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labeledStatement_in_statement9158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statement9168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_assertStatement9193 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_assertStatement9197 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _COLON_in_assertStatement9212 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_assertStatement9216 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_assertStatement9218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_assertStatement9244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifStatement9305 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_ifStatement9307 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_ifStatement9311 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _ELSE_in_ifStatement9326 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_ifStatement9330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forStatement9420 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _LPAREN_in_forStatement9422 = new BitSet(new ulong[]{0x81400C28400000UL,0xA0B440050A0000D8UL,0x10082181080010AUL});
		public static readonly BitSet _forInit_in_forStatement9424 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_forStatement9426 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181080010AUL});
		public static readonly BitSet _forCondition_in_forStatement9428 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_forStatement9430 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181040010AUL});
		public static readonly BitSet _forUpdater_in_forStatement9432 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_forStatement9434 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_forStatement9436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forEachStatement9471 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _LPAREN_in_forEachStatement9473 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10000000UL});
		public static readonly BitSet _localModifierList_in_forEachStatement9475 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_forEachStatement9477 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_forEachStatement9479 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_forEachStatement9481 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_forEachStatement9483 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_forEachStatement9485 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_forEachStatement9487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement9525 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_whileStatement9527 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_whileStatement9529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_doWhileStatement9560 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_doWhileStatement9562 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _WHILE_in_doWhileStatement9564 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_doWhileStatement9566 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_doWhileStatement9568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_tryStatement9599 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_tryStatement9601 = new BitSet(new ulong[]{0x100000000UL,0x20UL});
		public static readonly BitSet _catches_in_tryStatement9604 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _finallyClause_in_tryStatement9606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_tryStatement9611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_switchStatement9647 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_switchStatement9649 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _LCURLY_in_switchStatement9651 = new BitSet(new ulong[]{0x2000040000000UL});
		public static readonly BitSet _switchBlockLabels_in_switchStatement9653 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RCURLY_in_switchStatement9655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_synchronizedStatement9686 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_synchronizedStatement9688 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_synchronizedStatement9690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_returnStatement9721 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181080010AUL});
		public static readonly BitSet _expression_in_returnStatement9723 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_returnStatement9726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_throwStatement9754 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_throwStatement9756 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_throwStatement9758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_breakStatement9785 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x800000UL});
		public static readonly BitSet _IDENT_in_breakStatement9787 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_breakStatement9790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_continueStatement9818 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x800000UL});
		public static readonly BitSet _IDENT_in_continueStatement9820 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_continueStatement9823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_labeledStatement9851 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_labeledStatement9853 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_labeledStatement9855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement9884 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_expressionStatement9886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_expressionStatement9897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches9922 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _CATCH_in_catchClause9964 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _LPAREN_in_catchClause9967 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_catchClause9970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_catchClause9972 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_catchClause9975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause9994 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_finallyClause9996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10030 = new BitSet(new ulong[]{0x2000040000000UL});
		public static readonly BitSet _switchDefaultLabel_in_switchBlockLabels10032 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_switchCaseLabels10086 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _CASE_in_switchCaseLabel10114 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_switchCaseLabel10117 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_switchCaseLabel10119 = new BitSet(new ulong[]{0x491601C38500012UL,0xB0B450151A0002D8UL,0xD01CB5D10A1C10AUL});
		public static readonly BitSet _blockStatement_in_switchCaseLabel10122 = new BitSet(new ulong[]{0x491601C38500012UL,0xB0B450151A0002D8UL,0xD01CB5D10A1C10AUL});
		public static readonly BitSet _DEFAULT_in_switchDefaultLabel10146 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_switchDefaultLabel10149 = new BitSet(new ulong[]{0x491601C38500012UL,0xB0B450151A0002D8UL,0xD01CB5D10A1C10AUL});
		public static readonly BitSet _blockStatement_in_switchDefaultLabel10152 = new BitSet(new ulong[]{0x491601C38500012UL,0xB0B450151A0002D8UL,0xD01CB5D10A1C10AUL});
		public static readonly BitSet _localVariableDeclaration_in_forInit10176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit10198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_forCondition10286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forUpdater10328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parenthesizedExpression10368 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_parenthesizedExpression10370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_parenthesizedExpression10372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList10413 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_expressionList10416 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_expressionList10419 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _assignmentExpression_in_expression10445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression10481 = new BitSet(new ulong[]{0x8000001200042UL,0x900000000000000UL,0x400000008A000220UL});
		public static readonly BitSet _ASSIGN_in_assignmentExpression10500 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _PLUS_ASSIGN_in_assignmentExpression10519 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _MINUS_ASSIGN_in_assignmentExpression10538 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _STAR_ASSIGN_in_assignmentExpression10557 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _DIV_ASSIGN_in_assignmentExpression10576 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _AND_ASSIGN_in_assignmentExpression10595 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _OR_ASSIGN_in_assignmentExpression10614 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _XOR_ASSIGN_in_assignmentExpression10633 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _MOD_ASSIGN_in_assignmentExpression10652 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _SHIFT_LEFT_ASSIGN_in_assignmentExpression10671 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _SHIFT_RIGHT_ASSIGN_in_assignmentExpression10690 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10709 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression10731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOrExpression_in_conditionalExpression10756 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _QUESTION_in_conditionalExpression10759 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression10762 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression10764 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression10767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10788 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _LOGICAL_OR_in_logicalOrExpression10791 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10794 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression10815 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _LOGICAL_AND_in_logicalAndExpression10818 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression10821 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression10842 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression10845 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression10848 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression10869 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression10872 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression10875 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _equalityExpression_in_andExpression10896 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_andExpression10899 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _equalityExpression_in_andExpression10902 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression10923 = new BitSet(new ulong[]{0x1000000000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _EQUAL_in_equalityExpression10942 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _NOT_EQUAL_in_equalityExpression10961 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression10991 = new BitSet(new ulong[]{0x1000000000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression11021 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression11024 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_instanceOfExpression11027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11048 = new BitSet(new ulong[]{0x2UL,0x600000600000UL});
		public static readonly BitSet _LESS_OR_EQUAL_in_relationalExpression11067 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _GREATER_OR_EQUAL_in_relationalExpression11086 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _LESS_THAN_in_relationalExpression11105 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _GREATER_THAN_in_relationalExpression11124 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11153 = new BitSet(new ulong[]{0x2UL,0x600000600000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11187 = new BitSet(new ulong[]{0x800002UL,0x0UL,0x5000000UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_shiftExpression11205 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _SHIFT_RIGHT_in_shiftExpression11224 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _SHIFT_LEFT_in_shiftExpression11243 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11272 = new BitSet(new ulong[]{0x800002UL,0x0UL,0x5000000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11302 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL,0x100UL});
		public static readonly BitSet _PLUS_in_additiveExpression11320 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _MINUS_in_additiveExpression11339 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11368 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL,0x100UL});
		public static readonly BitSet _unaryExpressionAll_in_multiplicativeExpression11398 = new BitSet(new ulong[]{0x4000000000002UL,0x200000000000000UL,0x40000000UL});
		public static readonly BitSet _STAR_in_multiplicativeExpression11417 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _DIV_in_multiplicativeExpression11436 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _MOD_in_multiplicativeExpression11455 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _unaryExpressionAll_in_multiplicativeExpression11484 = new BitSet(new ulong[]{0x4000000000002UL,0x200000000000000UL,0x40000000UL});
		public static readonly BitSet _PLUS_in_unaryExpressionAll11518 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _unaryExpressionAll_in_unaryExpressionAll11520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unaryExpressionAll11544 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _unaryExpressionAll_in_unaryExpressionAll11546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryExpressionAll11569 = new BitSet(new ulong[]{0x81000C28000000UL,0x203040040A0000C8UL,0x10082181000000AUL});
		public static readonly BitSet _postfixedExpression_in_unaryExpressionAll11571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryExpressionAll11595 = new BitSet(new ulong[]{0x81000C28000000UL,0x203040040A0000C8UL,0x10082181000000AUL});
		public static readonly BitSet _postfixedExpression_in_unaryExpressionAll11597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionRest_in_unaryExpressionAll11621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryExpressionRest11640 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _unaryExpressionAll_in_unaryExpressionRest11642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOGICAL_NOT_in_unaryExpressionRest11686 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _unaryExpressionAll_in_unaryExpressionRest11688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_unaryExpressionRest11724 = new BitSet(new ulong[]{0x80000428000000UL,0x10000400000040UL,0x10000000UL});
		public static readonly BitSet _simpleType_in_unaryExpressionRest11726 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_unaryExpressionRest11728 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _unaryExpressionAll_in_unaryExpressionRest11730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_unaryExpressionRest11756 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _objectType_in_unaryExpressionRest11758 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_unaryExpressionRest11760 = new BitSet(new ulong[]{0x81000C28000000UL,0xA03440040A0000C8UL,0x10082181000000AUL});
		public static readonly BitSet _unaryExpressionRest_in_unaryExpressionRest11762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpressionRest11787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_postfixedExpression11823 = new BitSet(new ulong[]{0x20400000000002UL,0x80100000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression11885 = new BitSet(new ulong[]{0x0UL,0x2000400008000000UL,0x21000000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_postfixedExpression11943 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression11968 = new BitSet(new ulong[]{0x20400000000002UL,0x20080100000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12047 = new BitSet(new ulong[]{0x20400000000002UL,0x80100000000UL});
		public static readonly BitSet _THIS_in_postfixedExpression12121 = new BitSet(new ulong[]{0x20400000000002UL,0x80100000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_postfixedExpression12182 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12200 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12202 = new BitSet(new ulong[]{0x20400000000002UL,0x80100000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12254 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression12258 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression12260 = new BitSet(new ulong[]{0x20400000000002UL,0x20080100000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12327 = new BitSet(new ulong[]{0x20400000000002UL,0x80100000000UL});
		public static readonly BitSet _innerNewExpression_in_postfixedExpression12398 = new BitSet(new ulong[]{0x20400000000002UL,0x80100000000UL});
		public static readonly BitSet _LBRACK_in_postfixedExpression12455 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_postfixedExpression12457 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _RBRACK_in_postfixedExpression12459 = new BitSet(new ulong[]{0x20400000000002UL,0x80100000000UL});
		public static readonly BitSet _INC_in_postfixedExpression12520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixedExpression12544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parenthesizedExpression_in_primaryExpression12592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression12602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression12612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentExpression_in_primaryExpression12622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_primaryExpression12632 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x21000000000UL});
		public static readonly BitSet _SUPER_in_primaryExpression12647 = new BitSet(new ulong[]{0x20000000000000UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression12725 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_primaryExpression12727 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_primaryExpression12796 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression12853 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression12920 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13053 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13111 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13113 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_primaryExpression13115 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primaryExpression13281 = new BitSet(new ulong[]{0x20000000000000UL,0x80000000000UL});
		public static readonly BitSet _arrayDeclarator_in_primaryExpression13340 = new BitSet(new ulong[]{0x20000000000000UL,0x80000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13403 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primaryExpression13465 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13467 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentExpression13549 = new BitSet(new ulong[]{0x20000000000002UL,0x20080000000000UL});
		public static readonly BitSet _arrayDeclarator_in_qualifiedIdentExpression13619 = new BitSet(new ulong[]{0x20000000000000UL,0x80000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13687 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression13689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression13759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13820 = new BitSet(new ulong[]{0x1000000000UL,0x2000400000000000UL,0x21000000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression13838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_qualifiedIdentExpression13901 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x1000000000UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression13926 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression13928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression13978 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13982 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression13984 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression13986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression14036 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_qualifiedIdentExpression14113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14179 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_qualifiedIdentExpression14229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_newExpression14305 = new BitSet(new ulong[]{0x80000428000000UL,0x10400408000040UL,0x10000000UL});
		public static readonly BitSet _primitiveType_in_newExpression14321 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_newExpression14367 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_newExpression14370 = new BitSet(new ulong[]{0x0UL,0x20080000000000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_newExpression14453 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _classBody_in_newExpression14455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_innerNewExpression14554 = new BitSet(new ulong[]{0x0UL,0x400008000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_innerNewExpression14556 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_innerNewExpression14559 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_innerNewExpression14561 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _classBody_in_innerNewExpression14563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction14609 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _arrayInitializer_in_newArrayConstruction14611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14621 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_newArrayConstruction14624 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14626 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14630 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_newArrayConstruction14633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14635 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction14640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments14660 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181040010AUL});
		public static readonly BitSet _expressionList_in_arguments14662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_arguments14665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_synpred14_Java5240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_synpred15_Java5256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeListClosing_in_synpred16_Java5309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_synpred17_Java5272 = new BitSet(new ulong[]{0x800000UL,0x400000UL,0x4000000UL});
		public static readonly BitSet _genericTypeListClosing_in_synpred17_Java5309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bound_in_synpred18_Java5400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_synpred34_Java5934 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_synpred34_Java5936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred44_Java5973 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x100000010000000UL});
		public static readonly BitSet _type_in_synpred44_Java5992 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred44_Java5994 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred44_Java5996 = new BitSet(new ulong[]{0x0UL,0x180000000000UL,0x100000800000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred44_Java5998 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred44_Java6001 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x800000UL});
		public static readonly BitSet _block_in_synpred44_Java6005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred44_Java6009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred44_Java6071 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred44_Java6073 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred44_Java6075 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred44_Java6077 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x800000UL});
		public static readonly BitSet _block_in_synpred44_Java6081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred44_Java6085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred44_Java6144 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred44_Java6146 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000000000UL});
		public static readonly BitSet _throwsClause_in_synpred44_Java6148 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_synpred44_Java6151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred45_Java5959 = new BitSet(new ulong[]{0x80000428000000UL,0x10400408000040UL,0x100000010000000UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred45_Java5973 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x100000010000000UL});
		public static readonly BitSet _type_in_synpred45_Java5992 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred45_Java5994 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred45_Java5996 = new BitSet(new ulong[]{0x0UL,0x180000000000UL,0x100000800000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred45_Java5998 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred45_Java6001 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x800000UL});
		public static readonly BitSet _block_in_synpred45_Java6005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred45_Java6009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred45_Java6071 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred45_Java6073 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred45_Java6075 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred45_Java6077 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x800000UL});
		public static readonly BitSet _block_in_synpred45_Java6081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred45_Java6085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred45_Java6144 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred45_Java6146 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x100000000000UL});
		public static readonly BitSet _throwsClause_in_synpred45_Java6148 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _block_in_synpred45_Java6151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred45_Java6215 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred45_Java6217 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred45_Java6219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred46_Java6264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred52_Java6320 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x100000010000000UL});
		public static readonly BitSet _type_in_synpred52_Java6339 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred52_Java6341 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred52_Java6343 = new BitSet(new ulong[]{0x0UL,0x80000000000UL,0x100000800000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred52_Java6345 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred52_Java6348 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred52_Java6351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred52_Java6409 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred52_Java6411 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred52_Java6413 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred52_Java6415 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred52_Java6418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred53_Java6306 = new BitSet(new ulong[]{0x80000428000000UL,0x10400408000040UL,0x100000010000000UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred53_Java6320 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x100000010000000UL});
		public static readonly BitSet _type_in_synpred53_Java6339 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred53_Java6341 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred53_Java6343 = new BitSet(new ulong[]{0x0UL,0x80000000000UL,0x100000800000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred53_Java6345 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred53_Java6348 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred53_Java6351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred53_Java6409 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred53_Java6411 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred53_Java6413 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000UL});
		public static readonly BitSet _throwsClause_in_synpred53_Java6415 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred53_Java6418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred53_Java6481 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_synpred53_Java6483 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred53_Java6485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred54_Java6530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred60_Java6832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred78_Java7233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred79_Java7282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred81_Java7367 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _typeIdent_in_synpred81_Java7369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred92_Java7594 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10040000UL});
		public static readonly BitSet _genericTypeArgument_in_synpred92_Java7596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericWildcardBoundType_in_synpred94_Java7650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred99_Java7868 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred99_Java7870 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred101_Java7865 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_synpred101_Java7868 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred101_Java7870 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_synpred101_Java7875 = new BitSet(new ulong[]{0x80000428400000UL,0x10000408000050UL,0x10000000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred101_Java7877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred102_Java7934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred103_Java8179 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred103_Java8183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_synpred104_Java8236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred117_Java8692 = new BitSet(new ulong[]{0x80000428000000UL,0x10000408000040UL,0x10000000UL});
		public static readonly BitSet _type_in_synpred117_Java8694 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred117_Java8708 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _LPAREN_in_synpred117_Java8710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_synpred117_Java8712 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _annotationDefaultValue_in_synpred117_Java8714 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred117_Java8717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred117_Java8759 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred117_Java8761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred119_Java8896 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _SEMI_in_synpred119_Java8898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred120_Java8909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_synpred124_Java9050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forEachStatement_in_synpred125_Java9058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labeledStatement_in_synpred135_Java9158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred137_Java9326 = new BitSet(new ulong[]{0x91600C38100000UL,0xA0B450051A0002C8UL,0x9018B5810A0010AUL});
		public static readonly BitSet _statement_in_synpred137_Java9330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_synpred146_Java10086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred149_Java10176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_synpred150_Java10198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred193_Java11724 = new BitSet(new ulong[]{0x80000428000000UL,0x10000400000040UL,0x10000000UL});
		public static readonly BitSet _simpleType_in_synpred193_Java11726 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_synpred193_Java11728 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _unaryExpressionAll_in_synpred193_Java11730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred194_Java11756 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _objectType_in_synpred194_Java11758 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _RPAREN_in_synpred194_Java11760 = new BitSet(new ulong[]{0x81000C28000000UL,0xA03440040A0000C8UL,0x10082181000000AUL});
		public static readonly BitSet _unaryExpressionRest_in_synpred194_Java11762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred197_Java11943 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred197_Java11968 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_synpred197_Java12047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred200_Java12182 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _SUPER_in_synpred200_Java12200 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_synpred200_Java12202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred202_Java12254 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _DOT_in_synpred202_Java12258 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred202_Java12260 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_synpred202_Java12327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred223_Java13619 = new BitSet(new ulong[]{0x20000000000000UL,0x80000000000UL});
		public static readonly BitSet _DOT_in_synpred223_Java13687 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_synpred223_Java13689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred231_Java13820 = new BitSet(new ulong[]{0x1000000000UL,0x2000400000000000UL,0x21000000000UL});
		public static readonly BitSet _CLASS_in_synpred231_Java13838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred231_Java13901 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x1000000000UL});
		public static readonly BitSet _SUPER_in_synpred231_Java13926 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_synpred231_Java13928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred231_Java13978 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _DOT_in_synpred231_Java13982 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_synpred231_Java13984 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_synpred231_Java13986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred231_Java14036 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_synpred231_Java14038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_synpred231_Java14113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred231_Java14179 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _arguments_in_synpred231_Java14181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_synpred231_Java14229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_synpred239_Java14630 = new BitSet(new ulong[]{0x81400C28000000UL,0xA0B440050A0000C8UL,0x10082181000010AUL});
		public static readonly BitSet _expression_in_synpred239_Java14633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _RBRACK_in_synpred239_Java14635 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
