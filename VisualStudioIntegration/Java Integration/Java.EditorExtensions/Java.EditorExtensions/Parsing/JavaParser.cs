//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Java.g 2012-04-09 13:43:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *         
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMP", "AMPAMP", "AMPEQ", "ASSERT", "BANG", "BANGEQ", "BAR", "BARBAR", "BAREQ", "BOOLEAN", "BREAK", "BYTE", "CARET", "CARETEQ", "CASE", "CATCH", "CHAR", "CHARLITERAL", "CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONTINUE", "DEFAULT", "DO", "DOT", "DOUBLE", "DOUBLELITERAL", "DoubleSuffix", "ELLIPSIS", "ELSE", "ENUM", "EQ", "EQEQ", "EXTENDS", "EscapeSequence", "Exponent", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATLITERAL", "FOR", "FloatSuffix", "GOTO", "GT", "HexDigit", "HexPrefix", "IDENTIFIER", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "INTLITERAL", "IdentifierPart", "IdentifierStart", "IntegerNumber", "LBRACE", "LBRACKET", "LINE_COMMENT", "LONG", "LONGLITERAL", "LPAREN", "LT", "LongSuffix", "MONKEYS_AT", "NATIVE", "NEW", "NULL", "NonIntegerNumber", "PACKAGE", "PERCENT", "PERCENTEQ", "PLUS", "PLUSEQ", "PLUSPLUS", "PRIVATE", "PROTECTED", "PUBLIC", "QUES", "RBRACE", "RBRACKET", "RETURN", "RPAREN", "SEMI", "SHORT", "SLASH", "SLASHEQ", "STAR", "STAREQ", "STATIC", "STRICTFP", "STRINGLITERAL", "SUB", "SUBEQ", "SUBSUB", "SUPER", "SWITCH", "SYNCHRONIZED", "SurrogateIdentifer", "THIS", "THROW", "THROWS", "TILDE", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "WS"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AMP=5;
	public const int AMPAMP=6;
	public const int AMPEQ=7;
	public const int ASSERT=8;
	public const int BANG=9;
	public const int BANGEQ=10;
	public const int BAR=11;
	public const int BARBAR=12;
	public const int BAREQ=13;
	public const int BOOLEAN=14;
	public const int BREAK=15;
	public const int BYTE=16;
	public const int CARET=17;
	public const int CARETEQ=18;
	public const int CASE=19;
	public const int CATCH=20;
	public const int CHAR=21;
	public const int CHARLITERAL=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMMA=25;
	public const int COMMENT=26;
	public const int CONST=27;
	public const int CONTINUE=28;
	public const int DEFAULT=29;
	public const int DO=30;
	public const int DOT=31;
	public const int DOUBLE=32;
	public const int DOUBLELITERAL=33;
	public const int DoubleSuffix=34;
	public const int ELLIPSIS=35;
	public const int ELSE=36;
	public const int ENUM=37;
	public const int EQ=38;
	public const int EQEQ=39;
	public const int EXTENDS=40;
	public const int EscapeSequence=41;
	public const int Exponent=42;
	public const int FALSE=43;
	public const int FINAL=44;
	public const int FINALLY=45;
	public const int FLOAT=46;
	public const int FLOATLITERAL=47;
	public const int FOR=48;
	public const int FloatSuffix=49;
	public const int GOTO=50;
	public const int GT=51;
	public const int HexDigit=52;
	public const int HexPrefix=53;
	public const int IDENTIFIER=54;
	public const int IF=55;
	public const int IMPLEMENTS=56;
	public const int IMPORT=57;
	public const int INSTANCEOF=58;
	public const int INT=59;
	public const int INTERFACE=60;
	public const int INTLITERAL=61;
	public const int IdentifierPart=62;
	public const int IdentifierStart=63;
	public const int IntegerNumber=64;
	public const int LBRACE=65;
	public const int LBRACKET=66;
	public const int LINE_COMMENT=67;
	public const int LONG=68;
	public const int LONGLITERAL=69;
	public const int LPAREN=70;
	public const int LT=71;
	public const int LongSuffix=72;
	public const int MONKEYS_AT=73;
	public const int NATIVE=74;
	public const int NEW=75;
	public const int NULL=76;
	public const int NonIntegerNumber=77;
	public const int PACKAGE=78;
	public const int PERCENT=79;
	public const int PERCENTEQ=80;
	public const int PLUS=81;
	public const int PLUSEQ=82;
	public const int PLUSPLUS=83;
	public const int PRIVATE=84;
	public const int PROTECTED=85;
	public const int PUBLIC=86;
	public const int QUES=87;
	public const int RBRACE=88;
	public const int RBRACKET=89;
	public const int RETURN=90;
	public const int RPAREN=91;
	public const int SEMI=92;
	public const int SHORT=93;
	public const int SLASH=94;
	public const int SLASHEQ=95;
	public const int STAR=96;
	public const int STAREQ=97;
	public const int STATIC=98;
	public const int STRICTFP=99;
	public const int STRINGLITERAL=100;
	public const int SUB=101;
	public const int SUBEQ=102;
	public const int SUBSUB=103;
	public const int SUPER=104;
	public const int SWITCH=105;
	public const int SYNCHRONIZED=106;
	public const int SurrogateIdentifer=107;
	public const int THIS=108;
	public const int THROW=109;
	public const int THROWS=110;
	public const int TILDE=111;
	public const int TRANSIENT=112;
	public const int TRUE=113;
	public const int TRY=114;
	public const int VOID=115;
	public const int VOLATILE=116;
	public const int WHILE=117;
	public const int WS=118;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[381+1];


		OnCreated();
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "Java.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// Java.g:296:1: compilationUnit : ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ;
	[GrammarRule("compilationUnit")]
	private void compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 1);
		TraceIn("compilationUnit", 1);
		int compilationUnit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(296, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return; }

			// Java.g:297:5: ( ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:297:9: ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
			{
			DebugLocation(297, 9);
			// Java.g:297:9: ( ( annotations )? packageDeclaration )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==MONKEYS_AT))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Java_fragment)))
				{
					alt2 = 1;
				}
			}
			else if ((LA2_1==PACKAGE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:297:13: ( annotations )? packageDeclaration
				{
				DebugLocation(297, 13);
				// Java.g:297:13: ( annotations )?
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==MONKEYS_AT))
				{
					alt1 = 1;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:297:14: annotations
					{
					DebugLocation(297, 14);
					PushFollow(Follow._annotations_in_compilationUnit82);
					annotations();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(1); }

				DebugLocation(299, 13);
				PushFollow(Follow._packageDeclaration_in_compilationUnit111);
				packageDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(301, 9);
			// Java.g:301:9: ( importDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==IMPORT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:301:10: importDeclaration
					{
					DebugLocation(301, 10);
					PushFollow(Follow._importDeclaration_in_compilationUnit133);
					importDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(303, 9);
			// Java.g:303:9: ( typeDeclaration )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ABSTRACT||LA4_1==BOOLEAN||LA4_1==BYTE||LA4_1==CHAR||LA4_1==CLASS||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==IDENTIFIER||(LA4_1>=INT && LA4_1<=INTERFACE)||LA4_1==LONG||LA4_1==LT||(LA4_1>=MONKEYS_AT && LA4_1<=NATIVE)||(LA4_1>=PRIVATE && LA4_1<=PUBLIC)||(LA4_1>=SEMI && LA4_1<=SHORT)||(LA4_1>=STATIC && LA4_1<=STRICTFP)||LA4_1==SYNCHRONIZED||LA4_1==TRANSIENT||(LA4_1>=VOID && LA4_1<=VOLATILE)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:303:10: typeDeclaration
					{
					DebugLocation(303, 10);
					PushFollow(Follow._typeDeclaration_in_compilationUnit155);
					typeDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compilationUnit", 1);
			LeaveRule("compilationUnit", 1);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 1, compilationUnit_StartIndex); }

		}
		DebugLocation(305, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// Java.g:307:1: packageDeclaration : 'package' qualifiedName ';' ;
	[GrammarRule("packageDeclaration")]
	private void packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
		int packageDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(307, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return; }

			// Java.g:308:5: ( 'package' qualifiedName ';' )
			DebugEnterAlt(1);
			// Java.g:308:9: 'package' qualifiedName ';'
			{
			DebugLocation(308, 9);
			Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration186); if (state.failed) return;
			DebugLocation(308, 19);
			PushFollow(Follow._qualifiedName_in_packageDeclaration188);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(309, 9);
			Match(input,SEMI,Follow._SEMI_in_packageDeclaration198); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

		}
		DebugLocation(310, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// Java.g:312:1: importDeclaration : ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' );
	[GrammarRule("importDeclaration")]
	private void importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		int importDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(312, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return; }

			// Java.g:313:5: ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==IMPORT))
			{
				int LA9_2 = input.LA(2);

				if ((LA9_2==STATIC))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==IDENTIFIER))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==DOT))
						{
							int LA9_5 = input.LA(5);

							if ((LA9_5==STAR))
							{
								alt9 = 1;
							}
							else if ((LA9_5==IDENTIFIER))
							{
								alt9 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA9_2==IDENTIFIER))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==DOT))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==STAR))
						{
							alt9 = 1;
						}
						else if ((LA9_4==IDENTIFIER))
						{
							alt9 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:313:9: 'import' ( 'static' )? IDENTIFIER '.' '*' ';'
				{
				DebugLocation(313, 9);
				Match(input,IMPORT,Follow._IMPORT_in_importDeclaration219); if (state.failed) return;
				DebugLocation(314, 9);
				// Java.g:314:9: ( 'static' )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==STATIC))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:314:10: 'static'
					{
					DebugLocation(314, 10);
					Match(input,STATIC,Follow._STATIC_in_importDeclaration231); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(316, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration252); if (state.failed) return;
				DebugLocation(316, 20);
				Match(input,DOT,Follow._DOT_in_importDeclaration254); if (state.failed) return;
				DebugLocation(316, 24);
				Match(input,STAR,Follow._STAR_in_importDeclaration256); if (state.failed) return;
				DebugLocation(317, 9);
				Match(input,SEMI,Follow._SEMI_in_importDeclaration266); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:318:9: 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';'
				{
				DebugLocation(318, 9);
				Match(input,IMPORT,Follow._IMPORT_in_importDeclaration283); if (state.failed) return;
				DebugLocation(319, 9);
				// Java.g:319:9: ( 'static' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==STATIC))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:319:10: 'static'
					{
					DebugLocation(319, 10);
					Match(input,STATIC,Follow._STATIC_in_importDeclaration295); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(321, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration316); if (state.failed) return;
				DebugLocation(322, 9);
				// Java.g:322:9: ( '.' IDENTIFIER )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==DOT))
					{
						int LA7_2 = input.LA(2);

						if ((LA7_2==IDENTIFIER))
						{
							alt7 = 1;
						}


					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:322:10: '.' IDENTIFIER
						{
						DebugLocation(322, 10);
						Match(input,DOT,Follow._DOT_in_importDeclaration327); if (state.failed) return;
						DebugLocation(322, 14);
						Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration329); if (state.failed) return;

						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(324, 9);
				// Java.g:324:9: ( '.' '*' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==DOT))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:324:10: '.' '*'
					{
					DebugLocation(324, 10);
					Match(input,DOT,Follow._DOT_in_importDeclaration351); if (state.failed) return;
					DebugLocation(324, 14);
					Match(input,STAR,Follow._STAR_in_importDeclaration353); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(326, 9);
				Match(input,SEMI,Follow._SEMI_in_importDeclaration374); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

		}
		DebugLocation(327, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_qualifiedImportName();
	partial void LeaveRule_qualifiedImportName();
	// $ANTLR start "qualifiedImportName"
	// Java.g:329:1: qualifiedImportName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedImportName")]
	private void qualifiedImportName()
	{
		EnterRule_qualifiedImportName();
		EnterRule("qualifiedImportName", 4);
		TraceIn("qualifiedImportName", 4);
		int qualifiedImportName_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedImportName");
		DebugLocation(329, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return; }

			// Java.g:330:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:330:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			DebugLocation(330, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName394); if (state.failed) return;
			DebugLocation(331, 9);
			// Java.g:331:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==DOT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:331:10: '.' IDENTIFIER
					{
					DebugLocation(331, 10);
					Match(input,DOT,Follow._DOT_in_qualifiedImportName405); if (state.failed) return;
					DebugLocation(331, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName407); if (state.failed) return;

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedImportName", 4);
			LeaveRule("qualifiedImportName", 4);
			LeaveRule_qualifiedImportName();
			if (state.backtracking > 0) { Memoize(input, 4, qualifiedImportName_StartIndex); }

		}
		DebugLocation(333, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedImportName"); }
		return;

	}
	// $ANTLR end "qualifiedImportName"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// Java.g:335:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
	[GrammarRule("typeDeclaration")]
	private void typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 5);
		TraceIn("typeDeclaration", 5);
		int typeDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(335, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return; }

			// Java.g:336:5: ( classOrInterfaceDeclaration | ';' )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==ABSTRACT||LA11_1==BOOLEAN||LA11_1==BYTE||LA11_1==CHAR||LA11_1==CLASS||LA11_1==DOUBLE||LA11_1==ENUM||LA11_1==FINAL||LA11_1==FLOAT||LA11_1==IDENTIFIER||(LA11_1>=INT && LA11_1<=INTERFACE)||LA11_1==LONG||LA11_1==LT||(LA11_1>=MONKEYS_AT && LA11_1<=NATIVE)||(LA11_1>=PRIVATE && LA11_1<=PUBLIC)||LA11_1==SHORT||(LA11_1>=STATIC && LA11_1<=STRICTFP)||LA11_1==SYNCHRONIZED||LA11_1==TRANSIENT||(LA11_1>=VOID && LA11_1<=VOLATILE)))
			{
				alt11 = 1;
			}
			else if ((LA11_1==SEMI))
			{
				alt11 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:336:9: classOrInterfaceDeclaration
				{
				DebugLocation(336, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_typeDeclaration438);
				classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:337:9: ';'
				{
				DebugLocation(337, 9);
				Match(input,SEMI,Follow._SEMI_in_typeDeclaration448); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeDeclaration", 5);
			LeaveRule("typeDeclaration", 5);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, typeDeclaration_StartIndex); }

		}
		DebugLocation(338, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classOrInterfaceDeclaration();
	partial void LeaveRule_classOrInterfaceDeclaration();
	// $ANTLR start "classOrInterfaceDeclaration"
	// Java.g:340:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );
	[GrammarRule("classOrInterfaceDeclaration")]
	private void classOrInterfaceDeclaration()
	{
		EnterRule_classOrInterfaceDeclaration();
		EnterRule("classOrInterfaceDeclaration", 6);
		TraceIn("classOrInterfaceDeclaration", 6);
		int classOrInterfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classOrInterfaceDeclaration");
		DebugLocation(340, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return; }

			// Java.g:341:5: ( classDeclaration | interfaceDeclaration )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:341:10: classDeclaration
				{
				DebugLocation(341, 10);
				PushFollow(Follow._classDeclaration_in_classOrInterfaceDeclaration469);
				classDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:342:9: interfaceDeclaration
				{
				DebugLocation(342, 9);
				PushFollow(Follow._interfaceDeclaration_in_classOrInterfaceDeclaration479);
				interfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classOrInterfaceDeclaration", 6);
			LeaveRule("classOrInterfaceDeclaration", 6);
			LeaveRule_classOrInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(343, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceDeclaration"); }
		return;

	}
	// $ANTLR end "classOrInterfaceDeclaration"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();
	// $ANTLR start "modifiers"
	// Java.g:346:1: modifiers : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* ;
	[GrammarRule("modifiers")]
	private void modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 7);
		TraceIn("modifiers", 7);
		int modifiers_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(346, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return; }

			// Java.g:347:5: ( ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* )
			DebugEnterAlt(1);
			// Java.g:348:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			{
			DebugLocation(348, 5);
			// Java.g:348:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=13;
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case MONKEYS_AT:
					{
					int LA13_2 = input.LA(2);

					if ((LA13_2==IDENTIFIER))
					{
						alt13 = 1;
					}


					}
					break;
				case PUBLIC:
					{
					alt13 = 2;
					}
					break;
				case PROTECTED:
					{
					alt13 = 3;
					}
					break;
				case PRIVATE:
					{
					alt13 = 4;
					}
					break;
				case STATIC:
					{
					alt13 = 5;
					}
					break;
				case ABSTRACT:
					{
					alt13 = 6;
					}
					break;
				case FINAL:
					{
					alt13 = 7;
					}
					break;
				case NATIVE:
					{
					alt13 = 8;
					}
					break;
				case SYNCHRONIZED:
					{
					alt13 = 9;
					}
					break;
				case TRANSIENT:
					{
					alt13 = 10;
					}
					break;
				case VOLATILE:
					{
					alt13 = 11;
					}
					break;
				case STRICTFP:
					{
					alt13 = 12;
					}
					break;
				}

				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:348:10: annotation
					{
					DebugLocation(348, 10);
					PushFollow(Follow._annotation_in_modifiers514);
					annotation();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:349:9: 'public'
					{
					DebugLocation(349, 9);
					Match(input,PUBLIC,Follow._PUBLIC_in_modifiers524); if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:350:9: 'protected'
					{
					DebugLocation(350, 9);
					Match(input,PROTECTED,Follow._PROTECTED_in_modifiers534); if (state.failed) return;

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:351:9: 'private'
					{
					DebugLocation(351, 9);
					Match(input,PRIVATE,Follow._PRIVATE_in_modifiers544); if (state.failed) return;

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:352:9: 'static'
					{
					DebugLocation(352, 9);
					Match(input,STATIC,Follow._STATIC_in_modifiers554); if (state.failed) return;

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// Java.g:353:9: 'abstract'
					{
					DebugLocation(353, 9);
					Match(input,ABSTRACT,Follow._ABSTRACT_in_modifiers564); if (state.failed) return;

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// Java.g:354:9: 'final'
					{
					DebugLocation(354, 9);
					Match(input,FINAL,Follow._FINAL_in_modifiers574); if (state.failed) return;

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// Java.g:355:9: 'native'
					{
					DebugLocation(355, 9);
					Match(input,NATIVE,Follow._NATIVE_in_modifiers584); if (state.failed) return;

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// Java.g:356:9: 'synchronized'
					{
					DebugLocation(356, 9);
					Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifiers594); if (state.failed) return;

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// Java.g:357:9: 'transient'
					{
					DebugLocation(357, 9);
					Match(input,TRANSIENT,Follow._TRANSIENT_in_modifiers604); if (state.failed) return;

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// Java.g:358:9: 'volatile'
					{
					DebugLocation(358, 9);
					Match(input,VOLATILE,Follow._VOLATILE_in_modifiers614); if (state.failed) return;

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// Java.g:359:9: 'strictfp'
					{
					DebugLocation(359, 9);
					Match(input,STRICTFP,Follow._STRICTFP_in_modifiers624); if (state.failed) return;

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifiers", 7);
			LeaveRule("modifiers", 7);
			LeaveRule_modifiers();
			if (state.backtracking > 0) { Memoize(input, 7, modifiers_StartIndex); }

		}
		DebugLocation(361, 4);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_variableModifiers();
	partial void LeaveRule_variableModifiers();
	// $ANTLR start "variableModifiers"
	// Java.g:364:1: variableModifiers : ( 'final' | annotation )* ;
	[GrammarRule("variableModifiers")]
	private void variableModifiers()
	{
		EnterRule_variableModifiers();
		EnterRule("variableModifiers", 8);
		TraceIn("variableModifiers", 8);
		int variableModifiers_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableModifiers");
		DebugLocation(364, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return; }

			// Java.g:365:5: ( ( 'final' | annotation )* )
			DebugEnterAlt(1);
			// Java.g:365:9: ( 'final' | annotation )*
			{
			DebugLocation(365, 9);
			// Java.g:365:9: ( 'final' | annotation )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==FINAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==MONKEYS_AT))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:365:13: 'final'
					{
					DebugLocation(365, 13);
					Match(input,FINAL,Follow._FINAL_in_variableModifiers656); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:366:13: annotation
					{
					DebugLocation(366, 13);
					PushFollow(Follow._annotation_in_variableModifiers670);
					annotation();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableModifiers", 8);
			LeaveRule("variableModifiers", 8);
			LeaveRule_variableModifiers();
			if (state.backtracking > 0) { Memoize(input, 8, variableModifiers_StartIndex); }

		}
		DebugLocation(368, 4);
		} finally { DebugExitRule(GrammarFileName, "variableModifiers"); }
		return;

	}
	// $ANTLR end "variableModifiers"

	partial void EnterRule_classDeclaration();
	partial void LeaveRule_classDeclaration();
	// $ANTLR start "classDeclaration"
	// Java.g:371:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
	[GrammarRule("classDeclaration")]
	private void classDeclaration()
	{
		EnterRule_classDeclaration();
		EnterRule("classDeclaration", 9);
		TraceIn("classDeclaration", 9);
		int classDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classDeclaration");
		DebugLocation(371, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return; }

			// Java.g:372:5: ( normalClassDeclaration | enumDeclaration )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt15 = 1;
				}
				break;
			case ENUM:
				{
				alt15 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:372:9: normalClassDeclaration
				{
				DebugLocation(372, 9);
				PushFollow(Follow._normalClassDeclaration_in_classDeclaration706);
				normalClassDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:373:9: enumDeclaration
				{
				DebugLocation(373, 9);
				PushFollow(Follow._enumDeclaration_in_classDeclaration716);
				enumDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classDeclaration", 9);
			LeaveRule("classDeclaration", 9);
			LeaveRule_classDeclaration();
			if (state.backtracking > 0) { Memoize(input, 9, classDeclaration_StartIndex); }

		}
		DebugLocation(374, 4);
		} finally { DebugExitRule(GrammarFileName, "classDeclaration"); }
		return;

	}
	// $ANTLR end "classDeclaration"

	partial void EnterRule_normalClassDeclaration();
	partial void LeaveRule_normalClassDeclaration();
	// $ANTLR start "normalClassDeclaration"
	// Java.g:376:1: normalClassDeclaration : modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody ;
	[GrammarRule("normalClassDeclaration")]
	private void normalClassDeclaration()
	{
		EnterRule_normalClassDeclaration();
		EnterRule("normalClassDeclaration", 10);
		TraceIn("normalClassDeclaration", 10);
		int normalClassDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "normalClassDeclaration");
		DebugLocation(376, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return; }

			// Java.g:377:5: ( modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody )
			DebugEnterAlt(1);
			// Java.g:377:9: modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
			{
			DebugLocation(377, 9);
			PushFollow(Follow._modifiers_in_normalClassDeclaration736);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(377, 20);
			Match(input,CLASS,Follow._CLASS_in_normalClassDeclaration739); if (state.failed) return;
			DebugLocation(377, 28);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalClassDeclaration741); if (state.failed) return;
			DebugLocation(378, 9);
			// Java.g:378:9: ( typeParameters )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==LT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:378:10: typeParameters
				{
				DebugLocation(378, 10);
				PushFollow(Follow._typeParameters_in_normalClassDeclaration752);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(380, 9);
			// Java.g:380:9: ( 'extends' type )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==EXTENDS))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:380:10: 'extends' type
				{
				DebugLocation(380, 10);
				Match(input,EXTENDS,Follow._EXTENDS_in_normalClassDeclaration774); if (state.failed) return;
				DebugLocation(380, 20);
				PushFollow(Follow._type_in_normalClassDeclaration776);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(382, 9);
			// Java.g:382:9: ( 'implements' typeList )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==IMPLEMENTS))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:382:10: 'implements' typeList
				{
				DebugLocation(382, 10);
				Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_normalClassDeclaration798); if (state.failed) return;
				DebugLocation(382, 23);
				PushFollow(Follow._typeList_in_normalClassDeclaration800);
				typeList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(384, 9);
			PushFollow(Follow._classBody_in_normalClassDeclaration833);
			classBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalClassDeclaration", 10);
			LeaveRule("normalClassDeclaration", 10);
			LeaveRule_normalClassDeclaration();
			if (state.backtracking > 0) { Memoize(input, 10, normalClassDeclaration_StartIndex); }

		}
		DebugLocation(385, 4);
		} finally { DebugExitRule(GrammarFileName, "normalClassDeclaration"); }
		return;

	}
	// $ANTLR end "normalClassDeclaration"

	partial void EnterRule_typeParameters();
	partial void LeaveRule_typeParameters();
	// $ANTLR start "typeParameters"
	// Java.g:388:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' ;
	[GrammarRule("typeParameters")]
	private void typeParameters()
	{
		EnterRule_typeParameters();
		EnterRule("typeParameters", 11);
		TraceIn("typeParameters", 11);
		int typeParameters_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeParameters");
		DebugLocation(388, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return; }

			// Java.g:389:5: ( '<' typeParameter ( ',' typeParameter )* '>' )
			DebugEnterAlt(1);
			// Java.g:389:9: '<' typeParameter ( ',' typeParameter )* '>'
			{
			DebugLocation(389, 9);
			Match(input,LT,Follow._LT_in_typeParameters854); if (state.failed) return;
			DebugLocation(390, 13);
			PushFollow(Follow._typeParameter_in_typeParameters868);
			typeParameter();
			PopFollow();
			if (state.failed) return;
			DebugLocation(391, 13);
			// Java.g:391:13: ( ',' typeParameter )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:391:14: ',' typeParameter
					{
					DebugLocation(391, 14);
					Match(input,COMMA,Follow._COMMA_in_typeParameters883); if (state.failed) return;
					DebugLocation(391, 18);
					PushFollow(Follow._typeParameter_in_typeParameters885);
					typeParameter();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(393, 9);
			Match(input,GT,Follow._GT_in_typeParameters910); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameters", 11);
			LeaveRule("typeParameters", 11);
			LeaveRule_typeParameters();
			if (state.backtracking > 0) { Memoize(input, 11, typeParameters_StartIndex); }

		}
		DebugLocation(394, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameters"); }
		return;

	}
	// $ANTLR end "typeParameters"

	partial void EnterRule_typeParameter();
	partial void LeaveRule_typeParameter();
	// $ANTLR start "typeParameter"
	// Java.g:396:1: typeParameter : IDENTIFIER ( 'extends' typeBound )? ;
	[GrammarRule("typeParameter")]
	private void typeParameter()
	{
		EnterRule_typeParameter();
		EnterRule("typeParameter", 12);
		TraceIn("typeParameter", 12);
		int typeParameter_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeParameter");
		DebugLocation(396, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return; }

			// Java.g:397:5: ( IDENTIFIER ( 'extends' typeBound )? )
			DebugEnterAlt(1);
			// Java.g:397:9: IDENTIFIER ( 'extends' typeBound )?
			{
			DebugLocation(397, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeParameter930); if (state.failed) return;
			DebugLocation(398, 9);
			// Java.g:398:9: ( 'extends' typeBound )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==EXTENDS))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:398:10: 'extends' typeBound
				{
				DebugLocation(398, 10);
				Match(input,EXTENDS,Follow._EXTENDS_in_typeParameter941); if (state.failed) return;
				DebugLocation(398, 20);
				PushFollow(Follow._typeBound_in_typeParameter943);
				typeBound();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameter", 12);
			LeaveRule("typeParameter", 12);
			LeaveRule_typeParameter();
			if (state.backtracking > 0) { Memoize(input, 12, typeParameter_StartIndex); }

		}
		DebugLocation(400, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameter"); }
		return;

	}
	// $ANTLR end "typeParameter"

	partial void EnterRule_typeBound();
	partial void LeaveRule_typeBound();
	// $ANTLR start "typeBound"
	// Java.g:403:1: typeBound : type ( '&' type )* ;
	[GrammarRule("typeBound")]
	private void typeBound()
	{
		EnterRule_typeBound();
		EnterRule("typeBound", 13);
		TraceIn("typeBound", 13);
		int typeBound_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeBound");
		DebugLocation(403, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return; }

			// Java.g:404:5: ( type ( '&' type )* )
			DebugEnterAlt(1);
			// Java.g:404:9: type ( '&' type )*
			{
			DebugLocation(404, 9);
			PushFollow(Follow._type_in_typeBound975);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(405, 9);
			// Java.g:405:9: ( '&' type )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==AMP))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:405:10: '&' type
					{
					DebugLocation(405, 10);
					Match(input,AMP,Follow._AMP_in_typeBound986); if (state.failed) return;
					DebugLocation(405, 14);
					PushFollow(Follow._type_in_typeBound988);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeBound", 13);
			LeaveRule("typeBound", 13);
			LeaveRule_typeBound();
			if (state.backtracking > 0) { Memoize(input, 13, typeBound_StartIndex); }

		}
		DebugLocation(407, 4);
		} finally { DebugExitRule(GrammarFileName, "typeBound"); }
		return;

	}
	// $ANTLR end "typeBound"

	partial void EnterRule_enumDeclaration();
	partial void LeaveRule_enumDeclaration();
	// $ANTLR start "enumDeclaration"
	// Java.g:410:1: enumDeclaration : modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody ;
	[GrammarRule("enumDeclaration")]
	private void enumDeclaration()
	{
		EnterRule_enumDeclaration();
		EnterRule("enumDeclaration", 14);
		TraceIn("enumDeclaration", 14);
		int enumDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumDeclaration");
		DebugLocation(410, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return; }

			// Java.g:411:5: ( modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody )
			DebugEnterAlt(1);
			// Java.g:411:9: modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody
			{
			DebugLocation(411, 9);
			PushFollow(Follow._modifiers_in_enumDeclaration1020);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(412, 9);
			// Java.g:412:9: ( 'enum' )
			DebugEnterAlt(1);
			// Java.g:412:10: 'enum'
			{
			DebugLocation(412, 10);
			Match(input,ENUM,Follow._ENUM_in_enumDeclaration1032); if (state.failed) return;

			}

			DebugLocation(414, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumDeclaration1053); if (state.failed) return;
			DebugLocation(415, 9);
			// Java.g:415:9: ( 'implements' typeList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==IMPLEMENTS))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:415:10: 'implements' typeList
				{
				DebugLocation(415, 10);
				Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_enumDeclaration1064); if (state.failed) return;
				DebugLocation(415, 23);
				PushFollow(Follow._typeList_in_enumDeclaration1066);
				typeList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(417, 9);
			PushFollow(Follow._enumBody_in_enumDeclaration1087);
			enumBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumDeclaration", 14);
			LeaveRule("enumDeclaration", 14);
			LeaveRule_enumDeclaration();
			if (state.backtracking > 0) { Memoize(input, 14, enumDeclaration_StartIndex); }

		}
		DebugLocation(418, 4);
		} finally { DebugExitRule(GrammarFileName, "enumDeclaration"); }
		return;

	}
	// $ANTLR end "enumDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();
	// $ANTLR start "enumBody"
	// Java.g:421:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' ;
	[GrammarRule("enumBody")]
	private void enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 15);
		TraceIn("enumBody", 15);
		int enumBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(421, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return; }

			// Java.g:422:5: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' )
			DebugEnterAlt(1);
			// Java.g:422:9: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
			{
			DebugLocation(422, 9);
			Match(input,LBRACE,Follow._LBRACE_in_enumBody1112); if (state.failed) return;
			DebugLocation(423, 9);
			// Java.g:423:9: ( enumConstants )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==IDENTIFIER||LA23_1==MONKEYS_AT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:423:10: enumConstants
				{
				DebugLocation(423, 10);
				PushFollow(Follow._enumConstants_in_enumBody1123);
				enumConstants();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(425, 9);
			// Java.g:425:9: ( ',' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==COMMA))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:425:9: ','
				{
				DebugLocation(425, 9);
				Match(input,COMMA,Follow._COMMA_in_enumBody1145); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(426, 9);
			// Java.g:426:9: ( enumBodyDeclarations )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==SEMI))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:426:10: enumBodyDeclarations
				{
				DebugLocation(426, 10);
				PushFollow(Follow._enumBodyDeclarations_in_enumBody1158);
				enumBodyDeclarations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(428, 9);
			Match(input,RBRACE,Follow._RBRACE_in_enumBody1180); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumBody", 15);
			LeaveRule("enumBody", 15);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 15, enumBody_StartIndex); }

		}
		DebugLocation(429, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();
	// $ANTLR start "enumConstants"
	// Java.g:431:1: enumConstants : enumConstant ( ',' enumConstant )* ;
	[GrammarRule("enumConstants")]
	private void enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 16);
		TraceIn("enumConstants", 16);
		int enumConstants_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(431, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return; }

			// Java.g:432:5: ( enumConstant ( ',' enumConstant )* )
			DebugEnterAlt(1);
			// Java.g:432:9: enumConstant ( ',' enumConstant )*
			{
			DebugLocation(432, 9);
			PushFollow(Follow._enumConstant_in_enumConstants1200);
			enumConstant();
			PopFollow();
			if (state.failed) return;
			DebugLocation(433, 9);
			// Java.g:433:9: ( ',' enumConstant )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==COMMA))
				{
					int LA26_2 = input.LA(2);

					if ((LA26_2==IDENTIFIER||LA26_2==MONKEYS_AT))
					{
						alt26 = 1;
					}


				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:433:10: ',' enumConstant
					{
					DebugLocation(433, 10);
					Match(input,COMMA,Follow._COMMA_in_enumConstants1211); if (state.failed) return;
					DebugLocation(433, 14);
					PushFollow(Follow._enumConstant_in_enumConstants1213);
					enumConstant();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumConstants", 16);
			LeaveRule("enumConstants", 16);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 16, enumConstants_StartIndex); }

		}
		DebugLocation(435, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// Java.g:441:1: enumConstant : ( annotations )? IDENTIFIER ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private void enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 17);
		TraceIn("enumConstant", 17);
		int enumConstant_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(441, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return; }

			// Java.g:442:5: ( ( annotations )? IDENTIFIER ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:442:9: ( annotations )? IDENTIFIER ( arguments )? ( classBody )?
			{
			DebugLocation(442, 9);
			// Java.g:442:9: ( annotations )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==MONKEYS_AT))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:442:10: annotations
				{
				DebugLocation(442, 10);
				PushFollow(Follow._annotations_in_enumConstant1247);
				annotations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(444, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumConstant1268); if (state.failed) return;
			DebugLocation(445, 9);
			// Java.g:445:9: ( arguments )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==LPAREN))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:445:10: arguments
				{
				DebugLocation(445, 10);
				PushFollow(Follow._arguments_in_enumConstant1279);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(447, 9);
			// Java.g:447:9: ( classBody )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==LBRACE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:447:10: classBody
				{
				DebugLocation(447, 10);
				PushFollow(Follow._classBody_in_enumConstant1301);
				classBody();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumConstant", 17);
			LeaveRule("enumConstant", 17);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 17, enumConstant_StartIndex); }

		}
		DebugLocation(451, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_enumBodyDeclarations();
	partial void LeaveRule_enumBodyDeclarations();
	// $ANTLR start "enumBodyDeclarations"
	// Java.g:453:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* ;
	[GrammarRule("enumBodyDeclarations")]
	private void enumBodyDeclarations()
	{
		EnterRule_enumBodyDeclarations();
		EnterRule("enumBodyDeclarations", 18);
		TraceIn("enumBodyDeclarations", 18);
		int enumBodyDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumBodyDeclarations");
		DebugLocation(453, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return; }

			// Java.g:454:5: ( ';' ( classBodyDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:454:9: ';' ( classBodyDeclaration )*
			{
			DebugLocation(454, 9);
			Match(input,SEMI,Follow._SEMI_in_enumBodyDeclarations1342); if (state.failed) return;
			DebugLocation(455, 9);
			// Java.g:455:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==ABSTRACT||LA30_1==BOOLEAN||LA30_1==BYTE||LA30_1==CHAR||LA30_1==CLASS||LA30_1==DOUBLE||LA30_1==ENUM||LA30_1==FINAL||LA30_1==FLOAT||LA30_1==IDENTIFIER||(LA30_1>=INT && LA30_1<=INTERFACE)||LA30_1==LBRACE||LA30_1==LONG||LA30_1==LT||(LA30_1>=MONKEYS_AT && LA30_1<=NATIVE)||(LA30_1>=PRIVATE && LA30_1<=PUBLIC)||(LA30_1>=SEMI && LA30_1<=SHORT)||(LA30_1>=STATIC && LA30_1<=STRICTFP)||LA30_1==SYNCHRONIZED||LA30_1==TRANSIENT||(LA30_1>=VOID && LA30_1<=VOLATILE)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:455:10: classBodyDeclaration
					{
					DebugLocation(455, 10);
					PushFollow(Follow._classBodyDeclaration_in_enumBodyDeclarations1354);
					classBodyDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumBodyDeclarations", 18);
			LeaveRule("enumBodyDeclarations", 18);
			LeaveRule_enumBodyDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumBodyDeclarations_StartIndex); }

		}
		DebugLocation(457, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBodyDeclarations"); }
		return;

	}
	// $ANTLR end "enumBodyDeclarations"

	partial void EnterRule_interfaceDeclaration();
	partial void LeaveRule_interfaceDeclaration();
	// $ANTLR start "interfaceDeclaration"
	// Java.g:459:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
	[GrammarRule("interfaceDeclaration")]
	private void interfaceDeclaration()
	{
		EnterRule_interfaceDeclaration();
		EnterRule("interfaceDeclaration", 19);
		TraceIn("interfaceDeclaration", 19);
		int interfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceDeclaration");
		DebugLocation(459, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return; }

			// Java.g:460:5: ( normalInterfaceDeclaration | annotationTypeDeclaration )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTERFACE:
				{
				alt31 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:460:9: normalInterfaceDeclaration
				{
				DebugLocation(460, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_interfaceDeclaration1385);
				normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:461:9: annotationTypeDeclaration
				{
				DebugLocation(461, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_interfaceDeclaration1395);
				annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceDeclaration", 19);
			LeaveRule("interfaceDeclaration", 19);
			LeaveRule_interfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 19, interfaceDeclaration_StartIndex); }

		}
		DebugLocation(462, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceDeclaration"

	partial void EnterRule_normalInterfaceDeclaration();
	partial void LeaveRule_normalInterfaceDeclaration();
	// $ANTLR start "normalInterfaceDeclaration"
	// Java.g:464:1: normalInterfaceDeclaration : modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody ;
	[GrammarRule("normalInterfaceDeclaration")]
	private void normalInterfaceDeclaration()
	{
		EnterRule_normalInterfaceDeclaration();
		EnterRule("normalInterfaceDeclaration", 20);
		TraceIn("normalInterfaceDeclaration", 20);
		int normalInterfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "normalInterfaceDeclaration");
		DebugLocation(464, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return; }

			// Java.g:465:5: ( modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody )
			DebugEnterAlt(1);
			// Java.g:465:9: modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody
			{
			DebugLocation(465, 9);
			PushFollow(Follow._modifiers_in_normalInterfaceDeclaration1419);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(465, 19);
			Match(input,INTERFACE,Follow._INTERFACE_in_normalInterfaceDeclaration1421); if (state.failed) return;
			DebugLocation(465, 31);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalInterfaceDeclaration1423); if (state.failed) return;
			DebugLocation(466, 9);
			// Java.g:466:9: ( typeParameters )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==LT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:466:10: typeParameters
				{
				DebugLocation(466, 10);
				PushFollow(Follow._typeParameters_in_normalInterfaceDeclaration1434);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(468, 9);
			// Java.g:468:9: ( 'extends' typeList )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==EXTENDS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:468:10: 'extends' typeList
				{
				DebugLocation(468, 10);
				Match(input,EXTENDS,Follow._EXTENDS_in_normalInterfaceDeclaration1456); if (state.failed) return;
				DebugLocation(468, 20);
				PushFollow(Follow._typeList_in_normalInterfaceDeclaration1458);
				typeList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(470, 9);
			PushFollow(Follow._interfaceBody_in_normalInterfaceDeclaration1479);
			interfaceBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalInterfaceDeclaration", 20);
			LeaveRule("normalInterfaceDeclaration", 20);
			LeaveRule_normalInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 20, normalInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(471, 4);
		} finally { DebugExitRule(GrammarFileName, "normalInterfaceDeclaration"); }
		return;

	}
	// $ANTLR end "normalInterfaceDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();
	// $ANTLR start "typeList"
	// Java.g:473:1: typeList : type ( ',' type )* ;
	[GrammarRule("typeList")]
	private void typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 21);
		TraceIn("typeList", 21);
		int typeList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(473, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return; }

			// Java.g:474:5: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// Java.g:474:9: type ( ',' type )*
			{
			DebugLocation(474, 9);
			PushFollow(Follow._type_in_typeList1499);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(475, 9);
			// Java.g:475:9: ( ',' type )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==COMMA))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:475:10: ',' type
					{
					DebugLocation(475, 10);
					Match(input,COMMA,Follow._COMMA_in_typeList1510); if (state.failed) return;
					DebugLocation(475, 14);
					PushFollow(Follow._type_in_typeList1512);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeList", 21);
			LeaveRule("typeList", 21);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 21, typeList_StartIndex); }

		}
		DebugLocation(477, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();
	// $ANTLR start "classBody"
	// Java.g:479:1: classBody : '{' ( classBodyDeclaration )* '}' ;
	[GrammarRule("classBody")]
	private void classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 22);
		TraceIn("classBody", 22);
		int classBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(479, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return; }

			// Java.g:480:5: ( '{' ( classBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:480:9: '{' ( classBodyDeclaration )* '}'
			{
			DebugLocation(480, 9);
			Match(input,LBRACE,Follow._LBRACE_in_classBody1543); if (state.failed) return;
			DebugLocation(481, 9);
			// Java.g:481:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==ABSTRACT||LA35_1==BOOLEAN||LA35_1==BYTE||LA35_1==CHAR||LA35_1==CLASS||LA35_1==DOUBLE||LA35_1==ENUM||LA35_1==FINAL||LA35_1==FLOAT||LA35_1==IDENTIFIER||(LA35_1>=INT && LA35_1<=INTERFACE)||LA35_1==LBRACE||LA35_1==LONG||LA35_1==LT||(LA35_1>=MONKEYS_AT && LA35_1<=NATIVE)||(LA35_1>=PRIVATE && LA35_1<=PUBLIC)||(LA35_1>=SEMI && LA35_1<=SHORT)||(LA35_1>=STATIC && LA35_1<=STRICTFP)||LA35_1==SYNCHRONIZED||LA35_1==TRANSIENT||(LA35_1>=VOID && LA35_1<=VOLATILE)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:481:10: classBodyDeclaration
					{
					DebugLocation(481, 10);
					PushFollow(Follow._classBodyDeclaration_in_classBody1555);
					classBodyDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(483, 9);
			Match(input,RBRACE,Follow._RBRACE_in_classBody1577); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classBody", 22);
			LeaveRule("classBody", 22);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 22, classBody_StartIndex); }

		}
		DebugLocation(484, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();
	// $ANTLR start "interfaceBody"
	// Java.g:486:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
	[GrammarRule("interfaceBody")]
	private void interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 23);
		TraceIn("interfaceBody", 23);
		int interfaceBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(486, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return; }

			// Java.g:487:5: ( '{' ( interfaceBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:487:9: '{' ( interfaceBodyDeclaration )* '}'
			{
			DebugLocation(487, 9);
			Match(input,LBRACE,Follow._LBRACE_in_interfaceBody1597); if (state.failed) return;
			DebugLocation(488, 9);
			// Java.g:488:9: ( interfaceBodyDeclaration )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==ABSTRACT||LA36_1==BOOLEAN||LA36_1==BYTE||LA36_1==CHAR||LA36_1==CLASS||LA36_1==DOUBLE||LA36_1==ENUM||LA36_1==FINAL||LA36_1==FLOAT||LA36_1==IDENTIFIER||(LA36_1>=INT && LA36_1<=INTERFACE)||LA36_1==LONG||LA36_1==LT||(LA36_1>=MONKEYS_AT && LA36_1<=NATIVE)||(LA36_1>=PRIVATE && LA36_1<=PUBLIC)||(LA36_1>=SEMI && LA36_1<=SHORT)||(LA36_1>=STATIC && LA36_1<=STRICTFP)||LA36_1==SYNCHRONIZED||LA36_1==TRANSIENT||(LA36_1>=VOID && LA36_1<=VOLATILE)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:488:10: interfaceBodyDeclaration
					{
					DebugLocation(488, 10);
					PushFollow(Follow._interfaceBodyDeclaration_in_interfaceBody1609);
					interfaceBodyDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(490, 9);
			Match(input,RBRACE,Follow._RBRACE_in_interfaceBody1631); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceBody", 23);
			LeaveRule("interfaceBody", 23);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 23, interfaceBody_StartIndex); }

		}
		DebugLocation(491, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classBodyDeclaration();
	partial void LeaveRule_classBodyDeclaration();
	// $ANTLR start "classBodyDeclaration"
	// Java.g:493:1: classBodyDeclaration : ( ';' | ( 'static' )? block | memberDecl );
	[GrammarRule("classBodyDeclaration")]
	private void classBodyDeclaration()
	{
		EnterRule_classBodyDeclaration();
		EnterRule("classBodyDeclaration", 24);
		TraceIn("classBodyDeclaration", 24);
		int classBodyDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classBodyDeclaration");
		DebugLocation(493, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return; }

			// Java.g:494:5: ( ';' | ( 'static' )? block | memberDecl )
			int alt38=3;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case SEMI:
				{
				alt38 = 1;
				}
				break;
			case STATIC:
				{
				int LA38_2 = input.LA(2);

				if ((LA38_2==LBRACE))
				{
					alt38 = 2;
				}
				else if ((LA38_2==ABSTRACT||LA38_2==BOOLEAN||LA38_2==BYTE||LA38_2==CHAR||LA38_2==CLASS||LA38_2==DOUBLE||LA38_2==ENUM||LA38_2==FINAL||LA38_2==FLOAT||LA38_2==IDENTIFIER||(LA38_2>=INT && LA38_2<=INTERFACE)||LA38_2==LONG||LA38_2==LT||(LA38_2>=MONKEYS_AT && LA38_2<=NATIVE)||(LA38_2>=PRIVATE && LA38_2<=PUBLIC)||LA38_2==SHORT||(LA38_2>=STATIC && LA38_2<=STRICTFP)||LA38_2==SYNCHRONIZED||LA38_2==TRANSIENT||(LA38_2>=VOID && LA38_2<=VOLATILE)))
				{
					alt38 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LBRACE:
				{
				alt38 = 2;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case IDENTIFIER:
			case INT:
			case INTERFACE:
			case LONG:
			case LT:
			case MONKEYS_AT:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
				{
				alt38 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:494:9: ';'
				{
				DebugLocation(494, 9);
				Match(input,SEMI,Follow._SEMI_in_classBodyDeclaration1651); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:495:9: ( 'static' )? block
				{
				DebugLocation(495, 9);
				// Java.g:495:9: ( 'static' )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==STATIC))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:495:10: 'static'
					{
					DebugLocation(495, 10);
					Match(input,STATIC,Follow._STATIC_in_classBodyDeclaration1662); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(497, 9);
				PushFollow(Follow._block_in_classBodyDeclaration1684);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:498:9: memberDecl
				{
				DebugLocation(498, 9);
				PushFollow(Follow._memberDecl_in_classBodyDeclaration1694);
				memberDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classBodyDeclaration", 24);
			LeaveRule("classBodyDeclaration", 24);
			LeaveRule_classBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 24, classBodyDeclaration_StartIndex); }

		}
		DebugLocation(499, 4);
		} finally { DebugExitRule(GrammarFileName, "classBodyDeclaration"); }
		return;

	}
	// $ANTLR end "classBodyDeclaration"

	partial void EnterRule_memberDecl();
	partial void LeaveRule_memberDecl();
	// $ANTLR start "memberDecl"
	// Java.g:501:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );
	[GrammarRule("memberDecl")]
	private void memberDecl()
	{
		EnterRule_memberDecl();
		EnterRule("memberDecl", 25);
		TraceIn("memberDecl", 25);
		int memberDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "memberDecl");
		DebugLocation(501, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return; }

			// Java.g:502:5: ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration )
			int alt39=4;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt39 = 2;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt39 = 3;
				}
				break;
			case INTERFACE:
				{
				alt39 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:502:10: fieldDeclaration
				{
				DebugLocation(502, 10);
				PushFollow(Follow._fieldDeclaration_in_memberDecl1715);
				fieldDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:503:10: methodDeclaration
				{
				DebugLocation(503, 10);
				PushFollow(Follow._methodDeclaration_in_memberDecl1726);
				methodDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:504:10: classDeclaration
				{
				DebugLocation(504, 10);
				PushFollow(Follow._classDeclaration_in_memberDecl1737);
				classDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:505:10: interfaceDeclaration
				{
				DebugLocation(505, 10);
				PushFollow(Follow._interfaceDeclaration_in_memberDecl1748);
				interfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberDecl", 25);
			LeaveRule("memberDecl", 25);
			LeaveRule_memberDecl();
			if (state.backtracking > 0) { Memoize(input, 25, memberDecl_StartIndex); }

		}
		DebugLocation(506, 4);
		} finally { DebugExitRule(GrammarFileName, "memberDecl"); }
		return;

	}
	// $ANTLR end "memberDecl"

	partial void EnterRule_methodDeclaration();
	partial void LeaveRule_methodDeclaration();
	// $ANTLR start "methodDeclaration"
	// Java.g:509:1: methodDeclaration : ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) );
	[GrammarRule("methodDeclaration")]
	private void methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 26);
		TraceIn("methodDeclaration", 26);
		int methodDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(509, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return; }

			// Java.g:510:5: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt49 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:512:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
				{
				DebugLocation(512, 10);
				PushFollow(Follow._modifiers_in_methodDeclaration1786);
				modifiers();
				PopFollow();
				if (state.failed) return;
				DebugLocation(513, 9);
				// Java.g:513:9: ( typeParameters )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==LT))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:513:10: typeParameters
					{
					DebugLocation(513, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1797);
					typeParameters();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(515, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration1818); if (state.failed) return;
				DebugLocation(516, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration1828);
				formalParameters();
				PopFollow();
				if (state.failed) return;
				DebugLocation(517, 9);
				// Java.g:517:9: ( 'throws' qualifiedNameList )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==THROWS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:517:10: 'throws' qualifiedNameList
					{
					DebugLocation(517, 10);
					Match(input,THROWS,Follow._THROWS_in_methodDeclaration1839); if (state.failed) return;
					DebugLocation(517, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration1841);
					qualifiedNameList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(519, 9);
				Match(input,LBRACE,Follow._LBRACE_in_methodDeclaration1862); if (state.failed) return;
				DebugLocation(520, 9);
				// Java.g:520:9: ( explicitConstructorInvocation )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case LT:
					{
					alt42 = 1;
					}
					break;
				case THIS:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case LPAREN:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case SUPER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case CHARLITERAL:
				case DOUBLELITERAL:
				case FALSE:
				case FLOATLITERAL:
				case INTLITERAL:
				case LONGLITERAL:
				case NULL:
				case STRINGLITERAL:
				case TRUE:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case NEW:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case VOID:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:520:10: explicitConstructorInvocation
					{
					DebugLocation(520, 10);
					PushFollow(Follow._explicitConstructorInvocation_in_methodDeclaration1874);
					explicitConstructorInvocation();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(522, 9);
				// Java.g:522:9: ( blockStatement )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==ABSTRACT||(LA43_1>=ASSERT && LA43_1<=BANG)||(LA43_1>=BOOLEAN && LA43_1<=BYTE)||(LA43_1>=CHAR && LA43_1<=CLASS)||LA43_1==CONTINUE||LA43_1==DO||(LA43_1>=DOUBLE && LA43_1<=DOUBLELITERAL)||LA43_1==ENUM||(LA43_1>=FALSE && LA43_1<=FINAL)||(LA43_1>=FLOAT && LA43_1<=FOR)||(LA43_1>=IDENTIFIER && LA43_1<=IF)||(LA43_1>=INT && LA43_1<=INTLITERAL)||LA43_1==LBRACE||(LA43_1>=LONG && LA43_1<=LT)||(LA43_1>=MONKEYS_AT && LA43_1<=NULL)||LA43_1==PLUS||(LA43_1>=PLUSPLUS && LA43_1<=PUBLIC)||LA43_1==RETURN||(LA43_1>=SEMI && LA43_1<=SHORT)||(LA43_1>=STATIC && LA43_1<=SUB)||(LA43_1>=SUBSUB && LA43_1<=SYNCHRONIZED)||(LA43_1>=THIS && LA43_1<=THROW)||(LA43_1>=TILDE && LA43_1<=WHILE)))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:522:10: blockStatement
						{
						DebugLocation(522, 10);
						PushFollow(Follow._blockStatement_in_methodDeclaration1896);
						blockStatement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(524, 9);
				Match(input,RBRACE,Follow._RBRACE_in_methodDeclaration1917); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:525:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
				{
				DebugLocation(525, 9);
				PushFollow(Follow._modifiers_in_methodDeclaration1927);
				modifiers();
				PopFollow();
				if (state.failed) return;
				DebugLocation(526, 9);
				// Java.g:526:9: ( typeParameters )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==LT))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:526:10: typeParameters
					{
					DebugLocation(526, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1938);
					typeParameters();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(528, 9);
				// Java.g:528:9: ( type | 'void' )
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==BOOLEAN||LA45_1==BYTE||LA45_1==CHAR||LA45_1==DOUBLE||LA45_1==FLOAT||LA45_1==IDENTIFIER||LA45_1==INT||LA45_1==LONG||LA45_1==SHORT))
				{
					alt45 = 1;
				}
				else if ((LA45_1==VOID))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:528:10: type
					{
					DebugLocation(528, 10);
					PushFollow(Follow._type_in_methodDeclaration1960);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:529:13: 'void'
					{
					DebugLocation(529, 13);
					Match(input,VOID,Follow._VOID_in_methodDeclaration1974); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(531, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration1994); if (state.failed) return;
				DebugLocation(532, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration2004);
				formalParameters();
				PopFollow();
				if (state.failed) return;
				DebugLocation(533, 9);
				// Java.g:533:9: ( '[' ']' )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_1 = input.LA(1);

					if ((LA46_1==LBRACKET))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:533:10: '[' ']'
						{
						DebugLocation(533, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_methodDeclaration2015); if (state.failed) return;
						DebugLocation(533, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_methodDeclaration2017); if (state.failed) return;

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(535, 9);
				// Java.g:535:9: ( 'throws' qualifiedNameList )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==THROWS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:535:10: 'throws' qualifiedNameList
					{
					DebugLocation(535, 10);
					Match(input,THROWS,Follow._THROWS_in_methodDeclaration2039); if (state.failed) return;
					DebugLocation(535, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration2041);
					qualifiedNameList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(537, 9);
				// Java.g:537:9: ( block | ';' )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==LBRACE))
				{
					alt48 = 1;
				}
				else if ((LA48_1==SEMI))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:538:13: block
					{
					DebugLocation(538, 13);
					PushFollow(Follow._block_in_methodDeclaration2096);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:539:13: ';'
					{
					DebugLocation(539, 13);
					Match(input,SEMI,Follow._SEMI_in_methodDeclaration2110); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("methodDeclaration", 26);
			LeaveRule("methodDeclaration", 26);
			LeaveRule_methodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 26, methodDeclaration_StartIndex); }

		}
		DebugLocation(541, 4);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return;

	}
	// $ANTLR end "methodDeclaration"

	partial void EnterRule_fieldDeclaration();
	partial void LeaveRule_fieldDeclaration();
	// $ANTLR start "fieldDeclaration"
	// Java.g:544:1: fieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("fieldDeclaration")]
	private void fieldDeclaration()
	{
		EnterRule_fieldDeclaration();
		EnterRule("fieldDeclaration", 27);
		TraceIn("fieldDeclaration", 27);
		int fieldDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "fieldDeclaration");
		DebugLocation(544, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return; }

			// Java.g:545:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:545:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			DebugLocation(545, 9);
			PushFollow(Follow._modifiers_in_fieldDeclaration2142);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(546, 9);
			PushFollow(Follow._type_in_fieldDeclaration2152);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(547, 9);
			PushFollow(Follow._variableDeclarator_in_fieldDeclaration2162);
			variableDeclarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(548, 9);
			// Java.g:548:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==COMMA))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:548:10: ',' variableDeclarator
					{
					DebugLocation(548, 10);
					Match(input,COMMA,Follow._COMMA_in_fieldDeclaration2173); if (state.failed) return;
					DebugLocation(548, 14);
					PushFollow(Follow._variableDeclarator_in_fieldDeclaration2175);
					variableDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }

			DebugLocation(550, 9);
			Match(input,SEMI,Follow._SEMI_in_fieldDeclaration2196); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldDeclaration", 27);
			LeaveRule("fieldDeclaration", 27);
			LeaveRule_fieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 27, fieldDeclaration_StartIndex); }

		}
		DebugLocation(551, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDeclaration"); }
		return;

	}
	// $ANTLR end "fieldDeclaration"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// Java.g:553:1: variableDeclarator : IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? ;
	[GrammarRule("variableDeclarator")]
	private void variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 28);
		TraceIn("variableDeclarator", 28);
		int variableDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(553, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return; }

			// Java.g:554:5: ( IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? )
			DebugEnterAlt(1);
			// Java.g:554:9: IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )?
			{
			DebugLocation(554, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variableDeclarator2216); if (state.failed) return;
			DebugLocation(555, 9);
			// Java.g:555:9: ( '[' ']' )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==LBRACKET))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:555:10: '[' ']'
					{
					DebugLocation(555, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_variableDeclarator2227); if (state.failed) return;
					DebugLocation(555, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_variableDeclarator2229); if (state.failed) return;

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(557, 9);
			// Java.g:557:9: ( '=' variableInitializer )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==EQ))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:557:10: '=' variableInitializer
				{
				DebugLocation(557, 10);
				Match(input,EQ,Follow._EQ_in_variableDeclarator2251); if (state.failed) return;
				DebugLocation(557, 14);
				PushFollow(Follow._variableInitializer_in_variableDeclarator2253);
				variableInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarator", 28);
			LeaveRule("variableDeclarator", 28);
			LeaveRule_variableDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, variableDeclarator_StartIndex); }

		}
		DebugLocation(559, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_interfaceBodyDeclaration();
	partial void LeaveRule_interfaceBodyDeclaration();
	// $ANTLR start "interfaceBodyDeclaration"
	// Java.g:564:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );
	[GrammarRule("interfaceBodyDeclaration")]
	private void interfaceBodyDeclaration()
	{
		EnterRule_interfaceBodyDeclaration();
		EnterRule("interfaceBodyDeclaration", 29);
		TraceIn("interfaceBodyDeclaration", 29);
		int interfaceBodyDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceBodyDeclaration");
		DebugLocation(564, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return; }

			// Java.g:565:5: ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' )
			int alt53=5;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt53 = 2;
				}
				break;
			case INTERFACE:
				{
				alt53 = 3;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt53 = 4;
				}
				break;
			case SEMI:
				{
				alt53 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:566:9: interfaceFieldDeclaration
				{
				DebugLocation(566, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_interfaceBodyDeclaration2292);
				interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:567:9: interfaceMethodDeclaration
				{
				DebugLocation(567, 9);
				PushFollow(Follow._interfaceMethodDeclaration_in_interfaceBodyDeclaration2302);
				interfaceMethodDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:568:9: interfaceDeclaration
				{
				DebugLocation(568, 9);
				PushFollow(Follow._interfaceDeclaration_in_interfaceBodyDeclaration2312);
				interfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:569:9: classDeclaration
				{
				DebugLocation(569, 9);
				PushFollow(Follow._classDeclaration_in_interfaceBodyDeclaration2322);
				classDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:570:9: ';'
				{
				DebugLocation(570, 9);
				Match(input,SEMI,Follow._SEMI_in_interfaceBodyDeclaration2332); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceBodyDeclaration", 29);
			LeaveRule("interfaceBodyDeclaration", 29);
			LeaveRule_interfaceBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceBodyDeclaration_StartIndex); }

		}
		DebugLocation(571, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBodyDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceBodyDeclaration"

	partial void EnterRule_interfaceMethodDeclaration();
	partial void LeaveRule_interfaceMethodDeclaration();
	// $ANTLR start "interfaceMethodDeclaration"
	// Java.g:573:1: interfaceMethodDeclaration : modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' ;
	[GrammarRule("interfaceMethodDeclaration")]
	private void interfaceMethodDeclaration()
	{
		EnterRule_interfaceMethodDeclaration();
		EnterRule("interfaceMethodDeclaration", 30);
		TraceIn("interfaceMethodDeclaration", 30);
		int interfaceMethodDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceMethodDeclaration");
		DebugLocation(573, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return; }

			// Java.g:574:5: ( modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' )
			DebugEnterAlt(1);
			// Java.g:574:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
			{
			DebugLocation(574, 9);
			PushFollow(Follow._modifiers_in_interfaceMethodDeclaration2352);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(575, 9);
			// Java.g:575:9: ( typeParameters )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==LT))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:575:10: typeParameters
				{
				DebugLocation(575, 10);
				PushFollow(Follow._typeParameters_in_interfaceMethodDeclaration2363);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(577, 9);
			// Java.g:577:9: ( type | 'void' )
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_1 = input.LA(1);

			if ((LA55_1==BOOLEAN||LA55_1==BYTE||LA55_1==CHAR||LA55_1==DOUBLE||LA55_1==FLOAT||LA55_1==IDENTIFIER||LA55_1==INT||LA55_1==LONG||LA55_1==SHORT))
			{
				alt55 = 1;
			}
			else if ((LA55_1==VOID))
			{
				alt55 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:577:10: type
				{
				DebugLocation(577, 10);
				PushFollow(Follow._type_in_interfaceMethodDeclaration2385);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:578:10: 'void'
				{
				DebugLocation(578, 10);
				Match(input,VOID,Follow._VOID_in_interfaceMethodDeclaration2396); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(580, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceMethodDeclaration2416); if (state.failed) return;
			DebugLocation(581, 9);
			PushFollow(Follow._formalParameters_in_interfaceMethodDeclaration2426);
			formalParameters();
			PopFollow();
			if (state.failed) return;
			DebugLocation(582, 9);
			// Java.g:582:9: ( '[' ']' )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==LBRACKET))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:582:10: '[' ']'
					{
					DebugLocation(582, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_interfaceMethodDeclaration2437); if (state.failed) return;
					DebugLocation(582, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_interfaceMethodDeclaration2439); if (state.failed) return;

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(584, 9);
			// Java.g:584:9: ( 'throws' qualifiedNameList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==THROWS))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:584:10: 'throws' qualifiedNameList
				{
				DebugLocation(584, 10);
				Match(input,THROWS,Follow._THROWS_in_interfaceMethodDeclaration2461); if (state.failed) return;
				DebugLocation(584, 19);
				PushFollow(Follow._qualifiedNameList_in_interfaceMethodDeclaration2463);
				qualifiedNameList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(585, 12);
			Match(input,SEMI,Follow._SEMI_in_interfaceMethodDeclaration2476); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceMethodDeclaration", 30);
			LeaveRule("interfaceMethodDeclaration", 30);
			LeaveRule_interfaceMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceMethodDeclaration_StartIndex); }

		}
		DebugLocation(586, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceMethodDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceMethodDeclaration"

	partial void EnterRule_interfaceFieldDeclaration();
	partial void LeaveRule_interfaceFieldDeclaration();
	// $ANTLR start "interfaceFieldDeclaration"
	// Java.g:593:1: interfaceFieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("interfaceFieldDeclaration")]
	private void interfaceFieldDeclaration()
	{
		EnterRule_interfaceFieldDeclaration();
		EnterRule("interfaceFieldDeclaration", 31);
		TraceIn("interfaceFieldDeclaration", 31);
		int interfaceFieldDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaration");
		DebugLocation(593, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return; }

			// Java.g:594:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:594:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			DebugLocation(594, 9);
			PushFollow(Follow._modifiers_in_interfaceFieldDeclaration2498);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(594, 19);
			PushFollow(Follow._type_in_interfaceFieldDeclaration2500);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(594, 24);
			PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2502);
			variableDeclarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(595, 9);
			// Java.g:595:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if ((LA58_1==COMMA))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:595:10: ',' variableDeclarator
					{
					DebugLocation(595, 10);
					Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaration2513); if (state.failed) return;
					DebugLocation(595, 14);
					PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2515);
					variableDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(597, 9);
			Match(input,SEMI,Follow._SEMI_in_interfaceFieldDeclaration2536); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceFieldDeclaration", 31);
			LeaveRule("interfaceFieldDeclaration", 31);
			LeaveRule_interfaceFieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 31, interfaceFieldDeclaration_StartIndex); }

		}
		DebugLocation(598, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceFieldDeclaration"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// Java.g:601:1: type : ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* );
	[GrammarRule("type")]
	private void type()
	{
		EnterRule_type();
		EnterRule("type", 32);
		TraceIn("type", 32);
		int type_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(601, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return; }

			// Java.g:602:5: ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==IDENTIFIER))
			{
				alt61 = 1;
			}
			else if ((LA61_1==BOOLEAN||LA61_1==BYTE||LA61_1==CHAR||LA61_1==DOUBLE||LA61_1==FLOAT||LA61_1==INT||LA61_1==LONG||LA61_1==SHORT))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:602:9: classOrInterfaceType ( '[' ']' )*
				{
				DebugLocation(602, 9);
				PushFollow(Follow._classOrInterfaceType_in_type2557);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(603, 9);
				// Java.g:603:9: ( '[' ']' )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==LBRACKET))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:603:10: '[' ']'
						{
						DebugLocation(603, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_type2568); if (state.failed) return;
						DebugLocation(603, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_type2570); if (state.failed) return;

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:605:9: primitiveType ( '[' ']' )*
				{
				DebugLocation(605, 9);
				PushFollow(Follow._primitiveType_in_type2591);
				primitiveType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(606, 9);
				// Java.g:606:9: ( '[' ']' )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_1 = input.LA(1);

					if ((LA60_1==LBRACKET))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:606:10: '[' ']'
						{
						DebugLocation(606, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_type2602); if (state.failed) return;
						DebugLocation(606, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_type2604); if (state.failed) return;

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 32);
			LeaveRule("type", 32);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 32, type_StartIndex); }

		}
		DebugLocation(608, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return;

	}
	// $ANTLR end "type"

	partial void EnterRule_classOrInterfaceType();
	partial void LeaveRule_classOrInterfaceType();
	// $ANTLR start "classOrInterfaceType"
	// Java.g:611:1: classOrInterfaceType : IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* ;
	[GrammarRule("classOrInterfaceType")]
	private void classOrInterfaceType()
	{
		EnterRule_classOrInterfaceType();
		EnterRule("classOrInterfaceType", 33);
		TraceIn("classOrInterfaceType", 33);
		int classOrInterfaceType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classOrInterfaceType");
		DebugLocation(611, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return; }

			// Java.g:612:5: ( IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* )
			DebugEnterAlt(1);
			// Java.g:612:9: IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )*
			{
			DebugLocation(612, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2636); if (state.failed) return;
			DebugLocation(613, 9);
			// Java.g:613:9: ( typeArguments )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==LT))
			{
				int LA62_2 = input.LA(2);

				if ((LA62_2==BOOLEAN||LA62_2==BYTE||LA62_2==CHAR||LA62_2==DOUBLE||LA62_2==FLOAT||LA62_2==IDENTIFIER||LA62_2==INT||LA62_2==LONG||LA62_2==QUES||LA62_2==SHORT))
				{
					alt62 = 1;
				}
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:613:10: typeArguments
				{
				DebugLocation(613, 10);
				PushFollow(Follow._typeArguments_in_classOrInterfaceType2647);
				typeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(615, 9);
			// Java.g:615:9: ( '.' IDENTIFIER ( typeArguments )? )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==DOT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:615:10: '.' IDENTIFIER ( typeArguments )?
					{
					DebugLocation(615, 10);
					Match(input,DOT,Follow._DOT_in_classOrInterfaceType2669); if (state.failed) return;
					DebugLocation(615, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2671); if (state.failed) return;
					DebugLocation(616, 13);
					// Java.g:616:13: ( typeArguments )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, false);
					int LA63_1 = input.LA(1);

					if ((LA63_1==LT))
					{
						int LA63_2 = input.LA(2);

						if ((LA63_2==BOOLEAN||LA63_2==BYTE||LA63_2==CHAR||LA63_2==DOUBLE||LA63_2==FLOAT||LA63_2==IDENTIFIER||LA63_2==INT||LA63_2==LONG||LA63_2==QUES||LA63_2==SHORT))
						{
							alt63 = 1;
						}
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:616:14: typeArguments
						{
						DebugLocation(616, 14);
						PushFollow(Follow._typeArguments_in_classOrInterfaceType2686);
						typeArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classOrInterfaceType", 33);
			LeaveRule("classOrInterfaceType", 33);
			LeaveRule_classOrInterfaceType();
			if (state.backtracking > 0) { Memoize(input, 33, classOrInterfaceType_StartIndex); }

		}
		DebugLocation(619, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceType"); }
		return;

	}
	// $ANTLR end "classOrInterfaceType"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// Java.g:621:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
	[GrammarRule("primitiveType")]
	private void primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 34);
		TraceIn("primitiveType", 34);
		int primitiveType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(621, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return; }

			// Java.g:622:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
			DebugEnterAlt(1);
			// Java.g:
			{
			DebugLocation(622, 5);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 34);
			LeaveRule("primitiveType", 34);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 34, primitiveType_StartIndex); }

		}
		DebugLocation(630, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_typeArguments();
	partial void LeaveRule_typeArguments();
	// $ANTLR start "typeArguments"
	// Java.g:632:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' ;
	[GrammarRule("typeArguments")]
	private void typeArguments()
	{
		EnterRule_typeArguments();
		EnterRule("typeArguments", 35);
		TraceIn("typeArguments", 35);
		int typeArguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeArguments");
		DebugLocation(632, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return; }

			// Java.g:633:5: ( '<' typeArgument ( ',' typeArgument )* '>' )
			DebugEnterAlt(1);
			// Java.g:633:9: '<' typeArgument ( ',' typeArgument )* '>'
			{
			DebugLocation(633, 9);
			Match(input,LT,Follow._LT_in_typeArguments2823); if (state.failed) return;
			DebugLocation(633, 13);
			PushFollow(Follow._typeArgument_in_typeArguments2825);
			typeArgument();
			PopFollow();
			if (state.failed) return;
			DebugLocation(634, 9);
			// Java.g:634:9: ( ',' typeArgument )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==COMMA))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:634:10: ',' typeArgument
					{
					DebugLocation(634, 10);
					Match(input,COMMA,Follow._COMMA_in_typeArguments2836); if (state.failed) return;
					DebugLocation(634, 14);
					PushFollow(Follow._typeArgument_in_typeArguments2838);
					typeArgument();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(636, 9);
			Match(input,GT,Follow._GT_in_typeArguments2860); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeArguments", 35);
			LeaveRule("typeArguments", 35);
			LeaveRule_typeArguments();
			if (state.backtracking > 0) { Memoize(input, 35, typeArguments_StartIndex); }

		}
		DebugLocation(637, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArguments"); }
		return;

	}
	// $ANTLR end "typeArguments"

	partial void EnterRule_typeArgument();
	partial void LeaveRule_typeArgument();
	// $ANTLR start "typeArgument"
	// Java.g:639:1: typeArgument : ( type | '?' ( ( 'extends' | 'super' ) type )? );
	[GrammarRule("typeArgument")]
	private void typeArgument()
	{
		EnterRule_typeArgument();
		EnterRule("typeArgument", 36);
		TraceIn("typeArgument", 36);
		int typeArgument_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeArgument");
		DebugLocation(639, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return; }

			// Java.g:640:5: ( type | '?' ( ( 'extends' | 'super' ) type )? )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==BOOLEAN||LA67_1==BYTE||LA67_1==CHAR||LA67_1==DOUBLE||LA67_1==FLOAT||LA67_1==IDENTIFIER||LA67_1==INT||LA67_1==LONG||LA67_1==SHORT))
			{
				alt67 = 1;
			}
			else if ((LA67_1==QUES))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:640:9: type
				{
				DebugLocation(640, 9);
				PushFollow(Follow._type_in_typeArgument2880);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:641:9: '?' ( ( 'extends' | 'super' ) type )?
				{
				DebugLocation(641, 9);
				Match(input,QUES,Follow._QUES_in_typeArgument2890); if (state.failed) return;
				DebugLocation(642, 9);
				// Java.g:642:9: ( ( 'extends' | 'super' ) type )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==EXTENDS||LA66_1==SUPER))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:643:13: ( 'extends' | 'super' ) type
					{
					DebugLocation(643, 13);
					if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(646, 13);
					PushFollow(Follow._type_in_typeArgument2958);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(66); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeArgument", 36);
			LeaveRule("typeArgument", 36);
			LeaveRule_typeArgument();
			if (state.backtracking > 0) { Memoize(input, 36, typeArgument_StartIndex); }

		}
		DebugLocation(648, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArgument"); }
		return;

	}
	// $ANTLR end "typeArgument"

	partial void EnterRule_qualifiedNameList();
	partial void LeaveRule_qualifiedNameList();
	// $ANTLR start "qualifiedNameList"
	// Java.g:650:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
	[GrammarRule("qualifiedNameList")]
	private void qualifiedNameList()
	{
		EnterRule_qualifiedNameList();
		EnterRule("qualifiedNameList", 37);
		TraceIn("qualifiedNameList", 37);
		int qualifiedNameList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedNameList");
		DebugLocation(650, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return; }

			// Java.g:651:5: ( qualifiedName ( ',' qualifiedName )* )
			DebugEnterAlt(1);
			// Java.g:651:9: qualifiedName ( ',' qualifiedName )*
			{
			DebugLocation(651, 9);
			PushFollow(Follow._qualifiedName_in_qualifiedNameList2989);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(652, 9);
			// Java.g:652:9: ( ',' qualifiedName )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==COMMA))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:652:10: ',' qualifiedName
					{
					DebugLocation(652, 10);
					Match(input,COMMA,Follow._COMMA_in_qualifiedNameList3000); if (state.failed) return;
					DebugLocation(652, 14);
					PushFollow(Follow._qualifiedName_in_qualifiedNameList3002);
					qualifiedName();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedNameList", 37);
			LeaveRule("qualifiedNameList", 37);
			LeaveRule_qualifiedNameList();
			if (state.backtracking > 0) { Memoize(input, 37, qualifiedNameList_StartIndex); }

		}
		DebugLocation(654, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameList"); }
		return;

	}
	// $ANTLR end "qualifiedNameList"

	partial void EnterRule_formalParameters();
	partial void LeaveRule_formalParameters();
	// $ANTLR start "formalParameters"
	// Java.g:656:1: formalParameters : '(' ( formalParameterDecls )? ')' ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 38);
		TraceIn("formalParameters", 38);
		int formalParameters_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(656, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return; }

			// Java.g:657:5: ( '(' ( formalParameterDecls )? ')' )
			DebugEnterAlt(1);
			// Java.g:657:9: '(' ( formalParameterDecls )? ')'
			{
			DebugLocation(657, 9);
			Match(input,LPAREN,Follow._LPAREN_in_formalParameters3033); if (state.failed) return;
			DebugLocation(658, 9);
			// Java.g:658:9: ( formalParameterDecls )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==BOOLEAN||LA69_1==BYTE||LA69_1==CHAR||LA69_1==DOUBLE||LA69_1==FINAL||LA69_1==FLOAT||LA69_1==IDENTIFIER||LA69_1==INT||LA69_1==LONG||LA69_1==MONKEYS_AT||LA69_1==SHORT))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:658:10: formalParameterDecls
				{
				DebugLocation(658, 10);
				PushFollow(Follow._formalParameterDecls_in_formalParameters3044);
				formalParameterDecls();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(660, 9);
			Match(input,RPAREN,Follow._RPAREN_in_formalParameters3066); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameters", 38);
			LeaveRule("formalParameters", 38);
			LeaveRule_formalParameters();
			if (state.backtracking > 0) { Memoize(input, 38, formalParameters_StartIndex); }

		}
		DebugLocation(661, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"

	partial void EnterRule_formalParameterDecls();
	partial void LeaveRule_formalParameterDecls();
	// $ANTLR start "formalParameterDecls"
	// Java.g:663:1: formalParameterDecls : ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl );
	[GrammarRule("formalParameterDecls")]
	private void formalParameterDecls()
	{
		EnterRule_formalParameterDecls();
		EnterRule("formalParameterDecls", 39);
		TraceIn("formalParameterDecls", 39);
		int formalParameterDecls_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterDecls");
		DebugLocation(663, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return; }

			// Java.g:664:5: ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl )
			int alt72=3;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 72, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 72, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 72, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 72, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:664:9: ellipsisParameterDecl
				{
				DebugLocation(664, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3086);
				ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:665:9: normalParameterDecl ( ',' normalParameterDecl )*
				{
				DebugLocation(665, 9);
				PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3096);
				normalParameterDecl();
				PopFollow();
				if (state.failed) return;
				DebugLocation(666, 9);
				// Java.g:666:9: ( ',' normalParameterDecl )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==COMMA))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:666:10: ',' normalParameterDecl
						{
						DebugLocation(666, 10);
						Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3107); if (state.failed) return;
						DebugLocation(666, 14);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3109);
						normalParameterDecl();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:668:9: ( normalParameterDecl ',' )+ ellipsisParameterDecl
				{
				DebugLocation(668, 9);
				// Java.g:668:9: ( normalParameterDecl ',' )+
				int cnt71=0;
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					switch (input.LA(1))
					{
					case FINAL:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case MONKEYS_AT:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:668:10: normalParameterDecl ','
						{
						DebugLocation(668, 10);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3131);
						normalParameterDecl();
						PopFollow();
						if (state.failed) return;
						DebugLocation(669, 9);
						Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3141); if (state.failed) return;

						}
						break;

					default:
						if (cnt71 >= 1)
							goto loop71;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee71 = new EarlyExitException( 71, input );
						DebugRecognitionException(eee71);
						throw eee71;
					}
					cnt71++;
				}
				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(671, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3163);
				ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterDecls", 39);
			LeaveRule("formalParameterDecls", 39);
			LeaveRule_formalParameterDecls();
			if (state.backtracking > 0) { Memoize(input, 39, formalParameterDecls_StartIndex); }

		}
		DebugLocation(672, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterDecls"); }
		return;

	}
	// $ANTLR end "formalParameterDecls"

	partial void EnterRule_normalParameterDecl();
	partial void LeaveRule_normalParameterDecl();
	// $ANTLR start "normalParameterDecl"
	// Java.g:674:1: normalParameterDecl : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("normalParameterDecl")]
	private void normalParameterDecl()
	{
		EnterRule_normalParameterDecl();
		EnterRule("normalParameterDecl", 40);
		TraceIn("normalParameterDecl", 40);
		int normalParameterDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "normalParameterDecl");
		DebugLocation(674, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return; }

			// Java.g:675:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:675:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			DebugLocation(675, 9);
			PushFollow(Follow._variableModifiers_in_normalParameterDecl3183);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(675, 27);
			PushFollow(Follow._type_in_normalParameterDecl3185);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(675, 32);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalParameterDecl3187); if (state.failed) return;
			DebugLocation(676, 9);
			// Java.g:676:9: ( '[' ']' )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==LBRACKET))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:676:10: '[' ']'
					{
					DebugLocation(676, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_normalParameterDecl3198); if (state.failed) return;
					DebugLocation(676, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_normalParameterDecl3200); if (state.failed) return;

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalParameterDecl", 40);
			LeaveRule("normalParameterDecl", 40);
			LeaveRule_normalParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 40, normalParameterDecl_StartIndex); }

		}
		DebugLocation(678, 4);
		} finally { DebugExitRule(GrammarFileName, "normalParameterDecl"); }
		return;

	}
	// $ANTLR end "normalParameterDecl"

	partial void EnterRule_ellipsisParameterDecl();
	partial void LeaveRule_ellipsisParameterDecl();
	// $ANTLR start "ellipsisParameterDecl"
	// Java.g:680:1: ellipsisParameterDecl : variableModifiers type '...' IDENTIFIER ;
	[GrammarRule("ellipsisParameterDecl")]
	private void ellipsisParameterDecl()
	{
		EnterRule_ellipsisParameterDecl();
		EnterRule("ellipsisParameterDecl", 41);
		TraceIn("ellipsisParameterDecl", 41);
		int ellipsisParameterDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "ellipsisParameterDecl");
		DebugLocation(680, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return; }

			// Java.g:681:5: ( variableModifiers type '...' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:681:9: variableModifiers type '...' IDENTIFIER
			{
			DebugLocation(681, 9);
			PushFollow(Follow._variableModifiers_in_ellipsisParameterDecl3231);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(682, 9);
			PushFollow(Follow._type_in_ellipsisParameterDecl3241);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(682, 15);
			Match(input,ELLIPSIS,Follow._ELLIPSIS_in_ellipsisParameterDecl3244); if (state.failed) return;
			DebugLocation(683, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_ellipsisParameterDecl3254); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ellipsisParameterDecl", 41);
			LeaveRule("ellipsisParameterDecl", 41);
			LeaveRule_ellipsisParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 41, ellipsisParameterDecl_StartIndex); }

		}
		DebugLocation(684, 4);
		} finally { DebugExitRule(GrammarFileName, "ellipsisParameterDecl"); }
		return;

	}
	// $ANTLR end "ellipsisParameterDecl"

	partial void EnterRule_explicitConstructorInvocation();
	partial void LeaveRule_explicitConstructorInvocation();
	// $ANTLR start "explicitConstructorInvocation"
	// Java.g:687:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' );
	[GrammarRule("explicitConstructorInvocation")]
	private void explicitConstructorInvocation()
	{
		EnterRule_explicitConstructorInvocation();
		EnterRule("explicitConstructorInvocation", 42);
		TraceIn("explicitConstructorInvocation", 42);
		int explicitConstructorInvocation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "explicitConstructorInvocation");
		DebugLocation(687, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return; }

			// Java.g:688:5: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt76 = 1;
				}
				break;
			case THIS:
				{
				int LA76_2 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt76 = 1;
				}
				else if ((true))
				{
					alt76 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 76, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case TRUE:
			case VOID:
				{
				alt76 = 2;
				}
				break;
			case SUPER:
				{
				int LA76_2 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt76 = 1;
				}
				else if ((true))
				{
					alt76 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 76, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:688:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
				{
				DebugLocation(688, 9);
				// Java.g:688:9: ( nonWildcardTypeArguments )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==LT))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:688:10: nonWildcardTypeArguments
					{
					DebugLocation(688, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3276);
					nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(690, 9);
				if (input.LA(1)==SUPER||input.LA(1)==THIS)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(693, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3334);
				arguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(693, 19);
				Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3336); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:695:9: primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';'
				{
				DebugLocation(695, 9);
				PushFollow(Follow._primary_in_explicitConstructorInvocation3347);
				primary();
				PopFollow();
				if (state.failed) return;
				DebugLocation(696, 9);
				Match(input,DOT,Follow._DOT_in_explicitConstructorInvocation3357); if (state.failed) return;
				DebugLocation(697, 9);
				// Java.g:697:9: ( nonWildcardTypeArguments )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==LT))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:697:10: nonWildcardTypeArguments
					{
					DebugLocation(697, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3368);
					nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(699, 9);
				Match(input,SUPER,Follow._SUPER_in_explicitConstructorInvocation3389); if (state.failed) return;
				DebugLocation(700, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3399);
				arguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(700, 19);
				Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3401); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explicitConstructorInvocation", 42);
			LeaveRule("explicitConstructorInvocation", 42);
			LeaveRule_explicitConstructorInvocation();
			if (state.backtracking > 0) { Memoize(input, 42, explicitConstructorInvocation_StartIndex); }

		}
		DebugLocation(701, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorInvocation"); }
		return;

	}
	// $ANTLR end "explicitConstructorInvocation"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();
	// $ANTLR start "qualifiedName"
	// Java.g:703:1: qualifiedName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedName")]
	private void qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 43);
		TraceIn("qualifiedName", 43);
		int qualifiedName_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(703, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return; }

			// Java.g:704:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:704:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			DebugLocation(704, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3421); if (state.failed) return;
			DebugLocation(705, 9);
			// Java.g:705:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==DOT))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:705:10: '.' IDENTIFIER
					{
					DebugLocation(705, 10);
					Match(input,DOT,Follow._DOT_in_qualifiedName3432); if (state.failed) return;
					DebugLocation(705, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3434); if (state.failed) return;

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedName", 43);
			LeaveRule("qualifiedName", 43);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 43, qualifiedName_StartIndex); }

		}
		DebugLocation(707, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_annotations();
	partial void LeaveRule_annotations();
	// $ANTLR start "annotations"
	// Java.g:709:1: annotations : ( annotation )+ ;
	[GrammarRule("annotations")]
	private void annotations()
	{
		EnterRule_annotations();
		EnterRule("annotations", 44);
		TraceIn("annotations", 44);
		int annotations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotations");
		DebugLocation(709, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return; }

			// Java.g:710:5: ( ( annotation )+ )
			DebugEnterAlt(1);
			// Java.g:710:9: ( annotation )+
			{
			DebugLocation(710, 9);
			// Java.g:710:9: ( annotation )+
			int cnt78=0;
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==MONKEYS_AT))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:710:10: annotation
					{
					DebugLocation(710, 10);
					PushFollow(Follow._annotation_in_annotations3466);
					annotation();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt78 >= 1)
						goto loop78;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee78 = new EarlyExitException( 78, input );
					DebugRecognitionException(eee78);
					throw eee78;
				}
				cnt78++;
			}
			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotations", 44);
			LeaveRule("annotations", 44);
			LeaveRule_annotations();
			if (state.backtracking > 0) { Memoize(input, 44, annotations_StartIndex); }

		}
		DebugLocation(712, 4);
		} finally { DebugExitRule(GrammarFileName, "annotations"); }
		return;

	}
	// $ANTLR end "annotations"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// Java.g:718:1: annotation : '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
	[GrammarRule("annotation")]
	private void annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 45);
		TraceIn("annotation", 45);
		int annotation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(718, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return; }

			// Java.g:719:5: ( '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? )
			DebugEnterAlt(1);
			// Java.g:719:9: '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )?
			{
			DebugLocation(719, 9);
			Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotation3499); if (state.failed) return;
			DebugLocation(719, 13);
			PushFollow(Follow._qualifiedName_in_annotation3501);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(720, 9);
			// Java.g:720:9: ( '(' ( elementValuePairs | elementValue )? ')' )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==LPAREN))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:720:13: '(' ( elementValuePairs | elementValue )? ')'
				{
				DebugLocation(720, 13);
				Match(input,LPAREN,Follow._LPAREN_in_annotation3515); if (state.failed) return;
				DebugLocation(721, 19);
				// Java.g:721:19: ( elementValuePairs | elementValue )?
				int alt79=3;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==IDENTIFIER))
				{
					int LA79_2 = input.LA(2);

					if ((LA79_2==EQ))
					{
						alt79 = 1;
					}
					else if (((LA79_2>=AMP && LA79_2<=AMPAMP)||(LA79_2>=BANGEQ && LA79_2<=BARBAR)||LA79_2==CARET||LA79_2==DOT||LA79_2==EQEQ||LA79_2==GT||LA79_2==INSTANCEOF||LA79_2==LBRACKET||(LA79_2>=LPAREN && LA79_2<=LT)||LA79_2==PERCENT||LA79_2==PLUS||LA79_2==PLUSPLUS||LA79_2==QUES||LA79_2==RPAREN||LA79_2==SLASH||LA79_2==STAR||LA79_2==SUB||LA79_2==SUBSUB))
					{
						alt79 = 2;
					}
				}
				else if ((LA79_1==BANG||LA79_1==BOOLEAN||LA79_1==BYTE||(LA79_1>=CHAR && LA79_1<=CHARLITERAL)||(LA79_1>=DOUBLE && LA79_1<=DOUBLELITERAL)||LA79_1==FALSE||(LA79_1>=FLOAT && LA79_1<=FLOATLITERAL)||LA79_1==INT||LA79_1==INTLITERAL||LA79_1==LBRACE||(LA79_1>=LONG && LA79_1<=LPAREN)||LA79_1==MONKEYS_AT||(LA79_1>=NEW && LA79_1<=NULL)||LA79_1==PLUS||LA79_1==PLUSPLUS||LA79_1==SHORT||(LA79_1>=STRINGLITERAL && LA79_1<=SUB)||(LA79_1>=SUBSUB && LA79_1<=SUPER)||LA79_1==THIS||LA79_1==TILDE||LA79_1==TRUE||LA79_1==VOID))
				{
					alt79 = 2;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:721:23: elementValuePairs
					{
					DebugLocation(721, 23);
					PushFollow(Follow._elementValuePairs_in_annotation3542);
					elementValuePairs();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:722:23: elementValue
					{
					DebugLocation(722, 23);
					PushFollow(Follow._elementValue_in_annotation3566);
					elementValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(724, 13);
				Match(input,RPAREN,Follow._RPAREN_in_annotation3602); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotation", 45);
			LeaveRule("annotation", 45);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 45, annotation_StartIndex); }

		}
		DebugLocation(726, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_elementValuePairs();
	partial void LeaveRule_elementValuePairs();
	// $ANTLR start "elementValuePairs"
	// Java.g:728:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
	[GrammarRule("elementValuePairs")]
	private void elementValuePairs()
	{
		EnterRule_elementValuePairs();
		EnterRule("elementValuePairs", 46);
		TraceIn("elementValuePairs", 46);
		int elementValuePairs_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValuePairs");
		DebugLocation(728, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return; }

			// Java.g:729:5: ( elementValuePair ( ',' elementValuePair )* )
			DebugEnterAlt(1);
			// Java.g:729:9: elementValuePair ( ',' elementValuePair )*
			{
			DebugLocation(729, 9);
			PushFollow(Follow._elementValuePair_in_elementValuePairs3634);
			elementValuePair();
			PopFollow();
			if (state.failed) return;
			DebugLocation(730, 9);
			// Java.g:730:9: ( ',' elementValuePair )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==COMMA))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:730:10: ',' elementValuePair
					{
					DebugLocation(730, 10);
					Match(input,COMMA,Follow._COMMA_in_elementValuePairs3645); if (state.failed) return;
					DebugLocation(730, 14);
					PushFollow(Follow._elementValuePair_in_elementValuePairs3647);
					elementValuePair();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValuePairs", 46);
			LeaveRule("elementValuePairs", 46);
			LeaveRule_elementValuePairs();
			if (state.backtracking > 0) { Memoize(input, 46, elementValuePairs_StartIndex); }

		}
		DebugLocation(732, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePairs"); }
		return;

	}
	// $ANTLR end "elementValuePairs"

	partial void EnterRule_elementValuePair();
	partial void LeaveRule_elementValuePair();
	// $ANTLR start "elementValuePair"
	// Java.g:734:1: elementValuePair : IDENTIFIER '=' elementValue ;
	[GrammarRule("elementValuePair")]
	private void elementValuePair()
	{
		EnterRule_elementValuePair();
		EnterRule("elementValuePair", 47);
		TraceIn("elementValuePair", 47);
		int elementValuePair_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValuePair");
		DebugLocation(734, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return; }

			// Java.g:735:5: ( IDENTIFIER '=' elementValue )
			DebugEnterAlt(1);
			// Java.g:735:9: IDENTIFIER '=' elementValue
			{
			DebugLocation(735, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_elementValuePair3678); if (state.failed) return;
			DebugLocation(735, 20);
			Match(input,EQ,Follow._EQ_in_elementValuePair3680); if (state.failed) return;
			DebugLocation(735, 24);
			PushFollow(Follow._elementValue_in_elementValuePair3682);
			elementValue();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValuePair", 47);
			LeaveRule("elementValuePair", 47);
			LeaveRule_elementValuePair();
			if (state.backtracking > 0) { Memoize(input, 47, elementValuePair_StartIndex); }

		}
		DebugLocation(736, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePair"); }
		return;

	}
	// $ANTLR end "elementValuePair"

	partial void EnterRule_elementValue();
	partial void LeaveRule_elementValue();
	// $ANTLR start "elementValue"
	// Java.g:738:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
	[GrammarRule("elementValue")]
	private void elementValue()
	{
		EnterRule_elementValue();
		EnterRule("elementValue", 48);
		TraceIn("elementValue", 48);
		int elementValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValue");
		DebugLocation(738, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return; }

			// Java.g:739:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
			int alt82=3;
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt82 = 1;
				}
				break;
			case MONKEYS_AT:
				{
				alt82 = 2;
				}
				break;
			case LBRACE:
				{
				alt82 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:739:9: conditionalExpression
				{
				DebugLocation(739, 9);
				PushFollow(Follow._conditionalExpression_in_elementValue3702);
				conditionalExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:740:9: annotation
				{
				DebugLocation(740, 9);
				PushFollow(Follow._annotation_in_elementValue3712);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:741:9: elementValueArrayInitializer
				{
				DebugLocation(741, 9);
				PushFollow(Follow._elementValueArrayInitializer_in_elementValue3722);
				elementValueArrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValue", 48);
			LeaveRule("elementValue", 48);
			LeaveRule_elementValue();
			if (state.backtracking > 0) { Memoize(input, 48, elementValue_StartIndex); }

		}
		DebugLocation(742, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValue"); }
		return;

	}
	// $ANTLR end "elementValue"

	partial void EnterRule_elementValueArrayInitializer();
	partial void LeaveRule_elementValueArrayInitializer();
	// $ANTLR start "elementValueArrayInitializer"
	// Java.g:744:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
	[GrammarRule("elementValueArrayInitializer")]
	private void elementValueArrayInitializer()
	{
		EnterRule_elementValueArrayInitializer();
		EnterRule("elementValueArrayInitializer", 49);
		TraceIn("elementValueArrayInitializer", 49);
		int elementValueArrayInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValueArrayInitializer");
		DebugLocation(744, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return; }

			// Java.g:745:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:745:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
			{
			DebugLocation(745, 9);
			Match(input,LBRACE,Follow._LBRACE_in_elementValueArrayInitializer3742); if (state.failed) return;
			DebugLocation(746, 9);
			// Java.g:746:9: ( elementValue ( ',' elementValue )* )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==BANG||LA84_1==BOOLEAN||LA84_1==BYTE||(LA84_1>=CHAR && LA84_1<=CHARLITERAL)||(LA84_1>=DOUBLE && LA84_1<=DOUBLELITERAL)||LA84_1==FALSE||(LA84_1>=FLOAT && LA84_1<=FLOATLITERAL)||LA84_1==IDENTIFIER||LA84_1==INT||LA84_1==INTLITERAL||LA84_1==LBRACE||(LA84_1>=LONG && LA84_1<=LPAREN)||LA84_1==MONKEYS_AT||(LA84_1>=NEW && LA84_1<=NULL)||LA84_1==PLUS||LA84_1==PLUSPLUS||LA84_1==SHORT||(LA84_1>=STRINGLITERAL && LA84_1<=SUB)||(LA84_1>=SUBSUB && LA84_1<=SUPER)||LA84_1==THIS||LA84_1==TILDE||LA84_1==TRUE||LA84_1==VOID))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:746:10: elementValue ( ',' elementValue )*
				{
				DebugLocation(746, 10);
				PushFollow(Follow._elementValue_in_elementValueArrayInitializer3753);
				elementValue();
				PopFollow();
				if (state.failed) return;
				DebugLocation(747, 13);
				// Java.g:747:13: ( ',' elementValue )*
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_1 = input.LA(1);

					if ((LA83_1==COMMA))
					{
						int LA83_2 = input.LA(2);

						if ((LA83_2==BANG||LA83_2==BOOLEAN||LA83_2==BYTE||(LA83_2>=CHAR && LA83_2<=CHARLITERAL)||(LA83_2>=DOUBLE && LA83_2<=DOUBLELITERAL)||LA83_2==FALSE||(LA83_2>=FLOAT && LA83_2<=FLOATLITERAL)||LA83_2==IDENTIFIER||LA83_2==INT||LA83_2==INTLITERAL||LA83_2==LBRACE||(LA83_2>=LONG && LA83_2<=LPAREN)||LA83_2==MONKEYS_AT||(LA83_2>=NEW && LA83_2<=NULL)||LA83_2==PLUS||LA83_2==PLUSPLUS||LA83_2==SHORT||(LA83_2>=STRINGLITERAL && LA83_2<=SUB)||(LA83_2>=SUBSUB && LA83_2<=SUPER)||LA83_2==THIS||LA83_2==TILDE||LA83_2==TRUE||LA83_2==VOID))
						{
							alt83 = 1;
						}


					}


					} finally { DebugExitDecision(83); }
					switch ( alt83 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:747:14: ',' elementValue
						{
						DebugLocation(747, 14);
						Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3768); if (state.failed) return;
						DebugLocation(747, 18);
						PushFollow(Follow._elementValue_in_elementValueArrayInitializer3770);
						elementValue();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop83;
					}
				}

				loop83:
					;

				} finally { DebugExitSubRule(83); }


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(749, 12);
			// Java.g:749:12: ( ',' )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_1 = input.LA(1);

			if ((LA85_1==COMMA))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:749:13: ','
				{
				DebugLocation(749, 13);
				Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3799); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(749, 19);
			Match(input,RBRACE,Follow._RBRACE_in_elementValueArrayInitializer3803); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValueArrayInitializer", 49);
			LeaveRule("elementValueArrayInitializer", 49);
			LeaveRule_elementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 49, elementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(750, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValueArrayInitializer"); }
		return;

	}
	// $ANTLR end "elementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();
	// $ANTLR start "annotationTypeDeclaration"
	// Java.g:756:1: annotationTypeDeclaration : modifiers '@' 'interface' IDENTIFIER annotationTypeBody ;
	[GrammarRule("annotationTypeDeclaration")]
	private void annotationTypeDeclaration()
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 50);
		TraceIn("annotationTypeDeclaration", 50);
		int annotationTypeDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(756, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return; }

			// Java.g:757:5: ( modifiers '@' 'interface' IDENTIFIER annotationTypeBody )
			DebugEnterAlt(1);
			// Java.g:757:9: modifiers '@' 'interface' IDENTIFIER annotationTypeBody
			{
			DebugLocation(757, 9);
			PushFollow(Follow._modifiers_in_annotationTypeDeclaration3826);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(757, 19);
			Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationTypeDeclaration3828); if (state.failed) return;
			DebugLocation(758, 9);
			Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration3838); if (state.failed) return;
			DebugLocation(759, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationTypeDeclaration3848); if (state.failed) return;
			DebugLocation(760, 9);
			PushFollow(Follow._annotationTypeBody_in_annotationTypeDeclaration3858);
			annotationTypeBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 50);
			LeaveRule("annotationTypeDeclaration", 50);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 50, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(761, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationTypeBody();
	partial void LeaveRule_annotationTypeBody();
	// $ANTLR start "annotationTypeBody"
	// Java.g:764:1: annotationTypeBody : '{' ( annotationTypeElementDeclaration )* '}' ;
	[GrammarRule("annotationTypeBody")]
	private void annotationTypeBody()
	{
		EnterRule_annotationTypeBody();
		EnterRule("annotationTypeBody", 51);
		TraceIn("annotationTypeBody", 51);
		int annotationTypeBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTypeBody");
		DebugLocation(764, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return; }

			// Java.g:765:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:765:9: '{' ( annotationTypeElementDeclaration )* '}'
			{
			DebugLocation(765, 9);
			Match(input,LBRACE,Follow._LBRACE_in_annotationTypeBody3879); if (state.failed) return;
			DebugLocation(766, 9);
			// Java.g:766:9: ( annotationTypeElementDeclaration )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==ABSTRACT||LA86_1==BOOLEAN||LA86_1==BYTE||LA86_1==CHAR||LA86_1==CLASS||LA86_1==DOUBLE||LA86_1==ENUM||LA86_1==FINAL||LA86_1==FLOAT||LA86_1==IDENTIFIER||(LA86_1>=INT && LA86_1<=INTERFACE)||LA86_1==LONG||LA86_1==LT||(LA86_1>=MONKEYS_AT && LA86_1<=NATIVE)||(LA86_1>=PRIVATE && LA86_1<=PUBLIC)||(LA86_1>=SEMI && LA86_1<=SHORT)||(LA86_1>=STATIC && LA86_1<=STRICTFP)||LA86_1==SYNCHRONIZED||LA86_1==TRANSIENT||(LA86_1>=VOID && LA86_1<=VOLATILE)))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:766:10: annotationTypeElementDeclaration
					{
					DebugLocation(766, 10);
					PushFollow(Follow._annotationTypeElementDeclaration_in_annotationTypeBody3891);
					annotationTypeElementDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }

			DebugLocation(768, 9);
			Match(input,RBRACE,Follow._RBRACE_in_annotationTypeBody3913); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTypeBody", 51);
			LeaveRule("annotationTypeBody", 51);
			LeaveRule_annotationTypeBody();
			if (state.backtracking > 0) { Memoize(input, 51, annotationTypeBody_StartIndex); }

		}
		DebugLocation(769, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeBody"); }
		return;

	}
	// $ANTLR end "annotationTypeBody"

	partial void EnterRule_annotationTypeElementDeclaration();
	partial void LeaveRule_annotationTypeElementDeclaration();
	// $ANTLR start "annotationTypeElementDeclaration"
	// Java.g:774:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' );
	[GrammarRule("annotationTypeElementDeclaration")]
	private void annotationTypeElementDeclaration()
	{
		EnterRule_annotationTypeElementDeclaration();
		EnterRule("annotationTypeElementDeclaration", 52);
		TraceIn("annotationTypeElementDeclaration", 52);
		int annotationTypeElementDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTypeElementDeclaration");
		DebugLocation(774, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return; }

			// Java.g:775:5: ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' )
			int alt87=7;
			try { DebugEnterDecision(87, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt87 = 3;
				}
				break;
			case INTERFACE:
				{
				alt87 = 4;
				}
				break;
			case ENUM:
				{
				alt87 = 5;
				}
				break;
			case SEMI:
				{
				alt87 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:775:9: annotationMethodDeclaration
				{
				DebugLocation(775, 9);
				PushFollow(Follow._annotationMethodDeclaration_in_annotationTypeElementDeclaration3935);
				annotationMethodDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:776:9: interfaceFieldDeclaration
				{
				DebugLocation(776, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_annotationTypeElementDeclaration3945);
				interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:777:9: normalClassDeclaration
				{
				DebugLocation(777, 9);
				PushFollow(Follow._normalClassDeclaration_in_annotationTypeElementDeclaration3955);
				normalClassDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:778:9: normalInterfaceDeclaration
				{
				DebugLocation(778, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_annotationTypeElementDeclaration3965);
				normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:779:9: enumDeclaration
				{
				DebugLocation(779, 9);
				PushFollow(Follow._enumDeclaration_in_annotationTypeElementDeclaration3975);
				enumDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:780:9: annotationTypeDeclaration
				{
				DebugLocation(780, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_annotationTypeElementDeclaration3985);
				annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:781:9: ';'
				{
				DebugLocation(781, 9);
				Match(input,SEMI,Follow._SEMI_in_annotationTypeElementDeclaration3995); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTypeElementDeclaration", 52);
			LeaveRule("annotationTypeElementDeclaration", 52);
			LeaveRule_annotationTypeElementDeclaration();
			if (state.backtracking > 0) { Memoize(input, 52, annotationTypeElementDeclaration_StartIndex); }

		}
		DebugLocation(782, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeElementDeclaration"); }
		return;

	}
	// $ANTLR end "annotationTypeElementDeclaration"

	partial void EnterRule_annotationMethodDeclaration();
	partial void LeaveRule_annotationMethodDeclaration();
	// $ANTLR start "annotationMethodDeclaration"
	// Java.g:784:1: annotationMethodDeclaration : modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' ;
	[GrammarRule("annotationMethodDeclaration")]
	private void annotationMethodDeclaration()
	{
		EnterRule_annotationMethodDeclaration();
		EnterRule("annotationMethodDeclaration", 53);
		TraceIn("annotationMethodDeclaration", 53);
		int annotationMethodDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationMethodDeclaration");
		DebugLocation(784, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return; }

			// Java.g:785:5: ( modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' )
			DebugEnterAlt(1);
			// Java.g:785:9: modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';'
			{
			DebugLocation(785, 9);
			PushFollow(Follow._modifiers_in_annotationMethodDeclaration4015);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(785, 19);
			PushFollow(Follow._type_in_annotationMethodDeclaration4017);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(785, 24);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationMethodDeclaration4019); if (state.failed) return;
			DebugLocation(786, 9);
			Match(input,LPAREN,Follow._LPAREN_in_annotationMethodDeclaration4029); if (state.failed) return;
			DebugLocation(786, 13);
			Match(input,RPAREN,Follow._RPAREN_in_annotationMethodDeclaration4031); if (state.failed) return;
			DebugLocation(786, 17);
			// Java.g:786:17: ( 'default' elementValue )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_1 = input.LA(1);

			if ((LA88_1==DEFAULT))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:786:18: 'default' elementValue
				{
				DebugLocation(786, 18);
				Match(input,DEFAULT,Follow._DEFAULT_in_annotationMethodDeclaration4034); if (state.failed) return;
				DebugLocation(786, 28);
				PushFollow(Follow._elementValue_in_annotationMethodDeclaration4036);
				elementValue();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(788, 9);
			Match(input,SEMI,Follow._SEMI_in_annotationMethodDeclaration4065); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationMethodDeclaration", 53);
			LeaveRule("annotationMethodDeclaration", 53);
			LeaveRule_annotationMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 53, annotationMethodDeclaration_StartIndex); }

		}
		DebugLocation(789, 8);
		} finally { DebugExitRule(GrammarFileName, "annotationMethodDeclaration"); }
		return;

	}
	// $ANTLR end "annotationMethodDeclaration"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Java.g:791:1: block : '{' ( blockStatement )* '}' ;
	[GrammarRule("block")]
	private void block()
	{
		EnterRule_block();
		EnterRule("block", 54);
		TraceIn("block", 54);
		int block_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(791, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return; }

			// Java.g:792:5: ( '{' ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:792:9: '{' ( blockStatement )* '}'
			{
			DebugLocation(792, 9);
			Match(input,LBRACE,Follow._LBRACE_in_block4089); if (state.failed) return;
			DebugLocation(793, 9);
			// Java.g:793:9: ( blockStatement )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==ABSTRACT||(LA89_1>=ASSERT && LA89_1<=BANG)||(LA89_1>=BOOLEAN && LA89_1<=BYTE)||(LA89_1>=CHAR && LA89_1<=CLASS)||LA89_1==CONTINUE||LA89_1==DO||(LA89_1>=DOUBLE && LA89_1<=DOUBLELITERAL)||LA89_1==ENUM||(LA89_1>=FALSE && LA89_1<=FINAL)||(LA89_1>=FLOAT && LA89_1<=FOR)||(LA89_1>=IDENTIFIER && LA89_1<=IF)||(LA89_1>=INT && LA89_1<=INTLITERAL)||LA89_1==LBRACE||(LA89_1>=LONG && LA89_1<=LT)||(LA89_1>=MONKEYS_AT && LA89_1<=NULL)||LA89_1==PLUS||(LA89_1>=PLUSPLUS && LA89_1<=PUBLIC)||LA89_1==RETURN||(LA89_1>=SEMI && LA89_1<=SHORT)||(LA89_1>=STATIC && LA89_1<=SUB)||(LA89_1>=SUBSUB && LA89_1<=SYNCHRONIZED)||(LA89_1>=THIS && LA89_1<=THROW)||(LA89_1>=TILDE && LA89_1<=WHILE)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:793:10: blockStatement
					{
					DebugLocation(793, 10);
					PushFollow(Follow._blockStatement_in_block4100);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(795, 9);
			Match(input,RBRACE,Follow._RBRACE_in_block4121); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 54);
			LeaveRule("block", 54);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 54, block_StartIndex); }

		}
		DebugLocation(796, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// Java.g:822:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );
	[GrammarRule("blockStatement")]
	private void blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 55);
		TraceIn("blockStatement", 55);
		int blockStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(822, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return; }

			// Java.g:823:5: ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement )
			int alt90=3;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 90, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 90, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 90, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 90, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TRANSIENT:
			case VOLATILE:
				{
				alt90 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 90, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ASSERT:
			case BANG:
			case BREAK:
			case CHARLITERAL:
			case CONTINUE:
			case DO:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case FOR:
			case IF:
			case INTLITERAL:
			case LBRACE:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case RETURN:
			case SEMI:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case SWITCH:
			case THIS:
			case THROW:
			case TILDE:
			case TRUE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt90 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:823:9: localVariableDeclarationStatement
				{
				DebugLocation(823, 9);
				PushFollow(Follow._localVariableDeclarationStatement_in_blockStatement4143);
				localVariableDeclarationStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:824:9: classOrInterfaceDeclaration
				{
				DebugLocation(824, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_blockStatement4153);
				classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:825:9: statement
				{
				DebugLocation(825, 9);
				PushFollow(Follow._statement_in_blockStatement4163);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatement", 55);
			LeaveRule("blockStatement", 55);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 55, blockStatement_StartIndex); }

		}
		DebugLocation(826, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_localVariableDeclarationStatement();
	partial void LeaveRule_localVariableDeclarationStatement();
	// $ANTLR start "localVariableDeclarationStatement"
	// Java.g:829:1: localVariableDeclarationStatement : localVariableDeclaration ';' ;
	[GrammarRule("localVariableDeclarationStatement")]
	private void localVariableDeclarationStatement()
	{
		EnterRule_localVariableDeclarationStatement();
		EnterRule("localVariableDeclarationStatement", 56);
		TraceIn("localVariableDeclarationStatement", 56);
		int localVariableDeclarationStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationStatement");
		DebugLocation(829, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return; }

			// Java.g:830:5: ( localVariableDeclaration ';' )
			DebugEnterAlt(1);
			// Java.g:830:9: localVariableDeclaration ';'
			{
			DebugLocation(830, 9);
			PushFollow(Follow._localVariableDeclaration_in_localVariableDeclarationStatement4184);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(831, 9);
			Match(input,SEMI,Follow._SEMI_in_localVariableDeclarationStatement4194); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableDeclarationStatement", 56);
			LeaveRule("localVariableDeclarationStatement", 56);
			LeaveRule_localVariableDeclarationStatement();
			if (state.backtracking > 0) { Memoize(input, 56, localVariableDeclarationStatement_StartIndex); }

		}
		DebugLocation(832, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationStatement"); }
		return;

	}
	// $ANTLR end "localVariableDeclarationStatement"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// Java.g:834:1: localVariableDeclaration : variableModifiers type variableDeclarator ( ',' variableDeclarator )* ;
	[GrammarRule("localVariableDeclaration")]
	private void localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 57);
		TraceIn("localVariableDeclaration", 57);
		int localVariableDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(834, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return; }

			// Java.g:835:5: ( variableModifiers type variableDeclarator ( ',' variableDeclarator )* )
			DebugEnterAlt(1);
			// Java.g:835:9: variableModifiers type variableDeclarator ( ',' variableDeclarator )*
			{
			DebugLocation(835, 9);
			PushFollow(Follow._variableModifiers_in_localVariableDeclaration4214);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(835, 27);
			PushFollow(Follow._type_in_localVariableDeclaration4216);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(836, 9);
			PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4226);
			variableDeclarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(837, 9);
			// Java.g:837:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_1 = input.LA(1);

				if ((LA91_1==COMMA))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:837:10: ',' variableDeclarator
					{
					DebugLocation(837, 10);
					Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration4237); if (state.failed) return;
					DebugLocation(837, 14);
					PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4239);
					variableDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableDeclaration", 57);
			LeaveRule("localVariableDeclaration", 57);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 57, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(839, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Java.g:841:1: statement : ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 58);
		TraceIn("statement", 58);
		int statement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(841, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return; }

			// Java.g:842:5: ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' )
			int alt98=17;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case LBRACE:
				{
				alt98 = 1;
				}
				break;
			case ASSERT:
				{
				int LA98_2 = input.LA(2);

				if ((EvaluatePredicate(synpred130_Java_fragment)))
				{
					alt98 = 2;
				}
				else if ((EvaluatePredicate(synpred132_Java_fragment)))
				{
					alt98 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 98, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				alt98 = 4;
				}
				break;
			case FOR:
				{
				alt98 = 5;
				}
				break;
			case WHILE:
				{
				alt98 = 6;
				}
				break;
			case DO:
				{
				alt98 = 7;
				}
				break;
			case TRY:
				{
				alt98 = 8;
				}
				break;
			case SWITCH:
				{
				alt98 = 9;
				}
				break;
			case SYNCHRONIZED:
				{
				alt98 = 10;
				}
				break;
			case RETURN:
				{
				alt98 = 11;
				}
				break;
			case THROW:
				{
				alt98 = 12;
				}
				break;
			case BREAK:
				{
				alt98 = 13;
				}
				break;
			case CONTINUE:
				{
				alt98 = 14;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt98 = 15;
				}
				break;
			case IDENTIFIER:
				{
				int LA98_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_Java_fragment)))
				{
					alt98 = 15;
				}
				else if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt98 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 98, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SEMI:
				{
				alt98 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:842:9: block
				{
				DebugLocation(842, 9);
				PushFollow(Follow._block_in_statement4270);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:844:9: ( 'assert' ) expression ( ':' expression )? ';'
				{
				DebugLocation(844, 9);
				// Java.g:844:9: ( 'assert' )
				DebugEnterAlt(1);
				// Java.g:844:10: 'assert'
				{
				DebugLocation(844, 10);
				Match(input,ASSERT,Follow._ASSERT_in_statement4294); if (state.failed) return;

				}

				DebugLocation(846, 9);
				PushFollow(Follow._expression_in_statement4314);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(846, 20);
				// Java.g:846:20: ( ':' expression )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_1 = input.LA(1);

				if ((LA92_1==COLON))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:846:21: ':' expression
					{
					DebugLocation(846, 21);
					Match(input,COLON,Follow._COLON_in_statement4317); if (state.failed) return;
					DebugLocation(846, 25);
					PushFollow(Follow._expression_in_statement4319);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(846, 38);
				Match(input,SEMI,Follow._SEMI_in_statement4323); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:847:9: 'assert' expression ( ':' expression )? ';'
				{
				DebugLocation(847, 9);
				Match(input,ASSERT,Follow._ASSERT_in_statement4333); if (state.failed) return;
				DebugLocation(847, 19);
				PushFollow(Follow._expression_in_statement4336);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(847, 30);
				// Java.g:847:30: ( ':' expression )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==COLON))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:847:31: ':' expression
					{
					DebugLocation(847, 31);
					Match(input,COLON,Follow._COLON_in_statement4339); if (state.failed) return;
					DebugLocation(847, 35);
					PushFollow(Follow._expression_in_statement4341);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(847, 48);
				Match(input,SEMI,Follow._SEMI_in_statement4345); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:848:9: 'if' parExpression statement ( 'else' statement )?
				{
				DebugLocation(848, 9);
				Match(input,IF,Follow._IF_in_statement4367); if (state.failed) return;
				DebugLocation(848, 14);
				PushFollow(Follow._parExpression_in_statement4369);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(848, 28);
				PushFollow(Follow._statement_in_statement4371);
				statement();
				PopFollow();
				if (state.failed) return;
				DebugLocation(848, 38);
				// Java.g:848:38: ( 'else' statement )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==ELSE))
				{
					int LA94_2 = input.LA(2);

					if ((EvaluatePredicate(synpred133_Java_fragment)))
					{
						alt94 = 1;
					}
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:848:39: 'else' statement
					{
					DebugLocation(848, 39);
					Match(input,ELSE,Follow._ELSE_in_statement4374); if (state.failed) return;
					DebugLocation(848, 46);
					PushFollow(Follow._statement_in_statement4376);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(94); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:849:9: forstatement
				{
				DebugLocation(849, 9);
				PushFollow(Follow._forstatement_in_statement4398);
				forstatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:850:9: 'while' parExpression statement
				{
				DebugLocation(850, 9);
				Match(input,WHILE,Follow._WHILE_in_statement4408); if (state.failed) return;
				DebugLocation(850, 17);
				PushFollow(Follow._parExpression_in_statement4410);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(850, 31);
				PushFollow(Follow._statement_in_statement4412);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:851:9: 'do' statement 'while' parExpression ';'
				{
				DebugLocation(851, 9);
				Match(input,DO,Follow._DO_in_statement4422); if (state.failed) return;
				DebugLocation(851, 14);
				PushFollow(Follow._statement_in_statement4424);
				statement();
				PopFollow();
				if (state.failed) return;
				DebugLocation(851, 24);
				Match(input,WHILE,Follow._WHILE_in_statement4426); if (state.failed) return;
				DebugLocation(851, 32);
				PushFollow(Follow._parExpression_in_statement4428);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(851, 46);
				Match(input,SEMI,Follow._SEMI_in_statement4430); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:852:9: trystatement
				{
				DebugLocation(852, 9);
				PushFollow(Follow._trystatement_in_statement4440);
				trystatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:853:9: 'switch' parExpression '{' switchBlockStatementGroups '}'
				{
				DebugLocation(853, 9);
				Match(input,SWITCH,Follow._SWITCH_in_statement4450); if (state.failed) return;
				DebugLocation(853, 18);
				PushFollow(Follow._parExpression_in_statement4452);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(853, 32);
				Match(input,LBRACE,Follow._LBRACE_in_statement4454); if (state.failed) return;
				DebugLocation(853, 36);
				PushFollow(Follow._switchBlockStatementGroups_in_statement4456);
				switchBlockStatementGroups();
				PopFollow();
				if (state.failed) return;
				DebugLocation(853, 63);
				Match(input,RBRACE,Follow._RBRACE_in_statement4458); if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:854:9: 'synchronized' parExpression block
				{
				DebugLocation(854, 9);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement4468); if (state.failed) return;
				DebugLocation(854, 24);
				PushFollow(Follow._parExpression_in_statement4470);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(854, 38);
				PushFollow(Follow._block_in_statement4472);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:855:9: 'return' ( expression )? ';'
				{
				DebugLocation(855, 9);
				Match(input,RETURN,Follow._RETURN_in_statement4482); if (state.failed) return;
				DebugLocation(855, 18);
				// Java.g:855:18: ( expression )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==BANG||LA95_1==BOOLEAN||LA95_1==BYTE||(LA95_1>=CHAR && LA95_1<=CHARLITERAL)||(LA95_1>=DOUBLE && LA95_1<=DOUBLELITERAL)||LA95_1==FALSE||(LA95_1>=FLOAT && LA95_1<=FLOATLITERAL)||LA95_1==IDENTIFIER||LA95_1==INT||LA95_1==INTLITERAL||(LA95_1>=LONG && LA95_1<=LPAREN)||(LA95_1>=NEW && LA95_1<=NULL)||LA95_1==PLUS||LA95_1==PLUSPLUS||LA95_1==SHORT||(LA95_1>=STRINGLITERAL && LA95_1<=SUB)||(LA95_1>=SUBSUB && LA95_1<=SUPER)||LA95_1==THIS||LA95_1==TILDE||LA95_1==TRUE||LA95_1==VOID))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:855:19: expression
					{
					DebugLocation(855, 19);
					PushFollow(Follow._expression_in_statement4485);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(855, 33);
				Match(input,SEMI,Follow._SEMI_in_statement4490); if (state.failed) return;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:856:9: 'throw' expression ';'
				{
				DebugLocation(856, 9);
				Match(input,THROW,Follow._THROW_in_statement4500); if (state.failed) return;
				DebugLocation(856, 17);
				PushFollow(Follow._expression_in_statement4502);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(856, 28);
				Match(input,SEMI,Follow._SEMI_in_statement4504); if (state.failed) return;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Java.g:857:9: 'break' ( IDENTIFIER )? ';'
				{
				DebugLocation(857, 9);
				Match(input,BREAK,Follow._BREAK_in_statement4514); if (state.failed) return;
				DebugLocation(858, 13);
				// Java.g:858:13: ( IDENTIFIER )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==IDENTIFIER))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:858:14: IDENTIFIER
					{
					DebugLocation(858, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4529); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(859, 16);
				Match(input,SEMI,Follow._SEMI_in_statement4546); if (state.failed) return;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Java.g:860:9: 'continue' ( IDENTIFIER )? ';'
				{
				DebugLocation(860, 9);
				Match(input,CONTINUE,Follow._CONTINUE_in_statement4556); if (state.failed) return;
				DebugLocation(861, 13);
				// Java.g:861:13: ( IDENTIFIER )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_1 = input.LA(1);

				if ((LA97_1==IDENTIFIER))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:861:14: IDENTIFIER
					{
					DebugLocation(861, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4571); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(862, 16);
				Match(input,SEMI,Follow._SEMI_in_statement4588); if (state.failed) return;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Java.g:863:9: expression ';'
				{
				DebugLocation(863, 9);
				PushFollow(Follow._expression_in_statement4598);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(863, 21);
				Match(input,SEMI,Follow._SEMI_in_statement4601); if (state.failed) return;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Java.g:864:9: IDENTIFIER ':' statement
				{
				DebugLocation(864, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4616); if (state.failed) return;
				DebugLocation(864, 20);
				Match(input,COLON,Follow._COLON_in_statement4618); if (state.failed) return;
				DebugLocation(864, 24);
				PushFollow(Follow._statement_in_statement4620);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Java.g:865:9: ';'
				{
				DebugLocation(865, 9);
				Match(input,SEMI,Follow._SEMI_in_statement4630); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 58);
			LeaveRule("statement", 58);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 58, statement_StartIndex); }

		}
		DebugLocation(867, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_switchBlockStatementGroups();
	partial void LeaveRule_switchBlockStatementGroups();
	// $ANTLR start "switchBlockStatementGroups"
	// Java.g:869:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
	[GrammarRule("switchBlockStatementGroups")]
	private void switchBlockStatementGroups()
	{
		EnterRule_switchBlockStatementGroups();
		EnterRule("switchBlockStatementGroups", 59);
		TraceIn("switchBlockStatementGroups", 59);
		int switchBlockStatementGroups_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroups");
		DebugLocation(869, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return; }

			// Java.g:870:5: ( ( switchBlockStatementGroup )* )
			DebugEnterAlt(1);
			// Java.g:870:9: ( switchBlockStatementGroup )*
			{
			DebugLocation(870, 9);
			// Java.g:870:9: ( switchBlockStatementGroup )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_1 = input.LA(1);

				if ((LA99_1==CASE||LA99_1==DEFAULT))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:870:10: switchBlockStatementGroup
					{
					DebugLocation(870, 10);
					PushFollow(Follow._switchBlockStatementGroup_in_switchBlockStatementGroups4652);
					switchBlockStatementGroup();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlockStatementGroups", 59);
			LeaveRule("switchBlockStatementGroups", 59);
			LeaveRule_switchBlockStatementGroups();
			if (state.backtracking > 0) { Memoize(input, 59, switchBlockStatementGroups_StartIndex); }

		}
		DebugLocation(871, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroups"); }
		return;

	}
	// $ANTLR end "switchBlockStatementGroups"

	partial void EnterRule_switchBlockStatementGroup();
	partial void LeaveRule_switchBlockStatementGroup();
	// $ANTLR start "switchBlockStatementGroup"
	// Java.g:873:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
	[GrammarRule("switchBlockStatementGroup")]
	private void switchBlockStatementGroup()
	{
		EnterRule_switchBlockStatementGroup();
		EnterRule("switchBlockStatementGroup", 60);
		TraceIn("switchBlockStatementGroup", 60);
		int switchBlockStatementGroup_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroup");
		DebugLocation(873, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return; }

			// Java.g:874:5: ( switchLabel ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:875:9: switchLabel ( blockStatement )*
			{
			DebugLocation(875, 9);
			PushFollow(Follow._switchLabel_in_switchBlockStatementGroup4681);
			switchLabel();
			PopFollow();
			if (state.failed) return;
			DebugLocation(876, 9);
			// Java.g:876:9: ( blockStatement )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_1 = input.LA(1);

				if ((LA100_1==ABSTRACT||(LA100_1>=ASSERT && LA100_1<=BANG)||(LA100_1>=BOOLEAN && LA100_1<=BYTE)||(LA100_1>=CHAR && LA100_1<=CLASS)||LA100_1==CONTINUE||LA100_1==DO||(LA100_1>=DOUBLE && LA100_1<=DOUBLELITERAL)||LA100_1==ENUM||(LA100_1>=FALSE && LA100_1<=FINAL)||(LA100_1>=FLOAT && LA100_1<=FOR)||(LA100_1>=IDENTIFIER && LA100_1<=IF)||(LA100_1>=INT && LA100_1<=INTLITERAL)||LA100_1==LBRACE||(LA100_1>=LONG && LA100_1<=LT)||(LA100_1>=MONKEYS_AT && LA100_1<=NULL)||LA100_1==PLUS||(LA100_1>=PLUSPLUS && LA100_1<=PUBLIC)||LA100_1==RETURN||(LA100_1>=SEMI && LA100_1<=SHORT)||(LA100_1>=STATIC && LA100_1<=SUB)||(LA100_1>=SUBSUB && LA100_1<=SYNCHRONIZED)||(LA100_1>=THIS && LA100_1<=THROW)||(LA100_1>=TILDE && LA100_1<=WHILE)))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:876:10: blockStatement
					{
					DebugLocation(876, 10);
					PushFollow(Follow._blockStatement_in_switchBlockStatementGroup4692);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlockStatementGroup", 60);
			LeaveRule("switchBlockStatementGroup", 60);
			LeaveRule_switchBlockStatementGroup();
			if (state.backtracking > 0) { Memoize(input, 60, switchBlockStatementGroup_StartIndex); }

		}
		DebugLocation(878, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroup"); }
		return;

	}
	// $ANTLR end "switchBlockStatementGroup"

	partial void EnterRule_switchLabel();
	partial void LeaveRule_switchLabel();
	// $ANTLR start "switchLabel"
	// Java.g:880:1: switchLabel : ( 'case' expression ':' | 'default' ':' );
	[GrammarRule("switchLabel")]
	private void switchLabel()
	{
		EnterRule_switchLabel();
		EnterRule("switchLabel", 61);
		TraceIn("switchLabel", 61);
		int switchLabel_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchLabel");
		DebugLocation(880, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return; }

			// Java.g:881:5: ( 'case' expression ':' | 'default' ':' )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			int LA101_1 = input.LA(1);

			if ((LA101_1==CASE))
			{
				alt101 = 1;
			}
			else if ((LA101_1==DEFAULT))
			{
				alt101 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 101, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:881:9: 'case' expression ':'
				{
				DebugLocation(881, 9);
				Match(input,CASE,Follow._CASE_in_switchLabel4723); if (state.failed) return;
				DebugLocation(881, 16);
				PushFollow(Follow._expression_in_switchLabel4725);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(881, 27);
				Match(input,COLON,Follow._COLON_in_switchLabel4727); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:882:9: 'default' ':'
				{
				DebugLocation(882, 9);
				Match(input,DEFAULT,Follow._DEFAULT_in_switchLabel4737); if (state.failed) return;
				DebugLocation(882, 19);
				Match(input,COLON,Follow._COLON_in_switchLabel4739); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchLabel", 61);
			LeaveRule("switchLabel", 61);
			LeaveRule_switchLabel();
			if (state.backtracking > 0) { Memoize(input, 61, switchLabel_StartIndex); }

		}
		DebugLocation(883, 4);
		} finally { DebugExitRule(GrammarFileName, "switchLabel"); }
		return;

	}
	// $ANTLR end "switchLabel"

	partial void EnterRule_trystatement();
	partial void LeaveRule_trystatement();
	// $ANTLR start "trystatement"
	// Java.g:886:1: trystatement : 'try' block ( catches 'finally' block | catches | 'finally' block ) ;
	[GrammarRule("trystatement")]
	private void trystatement()
	{
		EnterRule_trystatement();
		EnterRule("trystatement", 62);
		TraceIn("trystatement", 62);
		int trystatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "trystatement");
		DebugLocation(886, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return; }

			// Java.g:887:5: ( 'try' block ( catches 'finally' block | catches | 'finally' block ) )
			DebugEnterAlt(1);
			// Java.g:887:9: 'try' block ( catches 'finally' block | catches | 'finally' block )
			{
			DebugLocation(887, 9);
			Match(input,TRY,Follow._TRY_in_trystatement4760); if (state.failed) return;
			DebugLocation(887, 15);
			PushFollow(Follow._block_in_trystatement4762);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(888, 9);
			// Java.g:888:9: ( catches 'finally' block | catches | 'finally' block )
			int alt102=3;
			try { DebugEnterSubRule(102);
			try { DebugEnterDecision(102, false);
			int LA102_1 = input.LA(1);

			if ((LA102_1==CATCH))
			{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Java_fragment)))
				{
					alt102 = 1;
				}
				else if ((EvaluatePredicate(synpred154_Java_fragment)))
				{
					alt102 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 102, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA102_1==FINALLY))
			{
				alt102 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:888:13: catches 'finally' block
				{
				DebugLocation(888, 13);
				PushFollow(Follow._catches_in_trystatement4776);
				catches();
				PopFollow();
				if (state.failed) return;
				DebugLocation(888, 21);
				Match(input,FINALLY,Follow._FINALLY_in_trystatement4778); if (state.failed) return;
				DebugLocation(888, 31);
				PushFollow(Follow._block_in_trystatement4780);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:889:13: catches
				{
				DebugLocation(889, 13);
				PushFollow(Follow._catches_in_trystatement4794);
				catches();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:890:13: 'finally' block
				{
				DebugLocation(890, 13);
				Match(input,FINALLY,Follow._FINALLY_in_trystatement4808); if (state.failed) return;
				DebugLocation(890, 23);
				PushFollow(Follow._block_in_trystatement4810);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(102); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("trystatement", 62);
			LeaveRule("trystatement", 62);
			LeaveRule_trystatement();
			if (state.backtracking > 0) { Memoize(input, 62, trystatement_StartIndex); }

		}
		DebugLocation(892, 5);
		} finally { DebugExitRule(GrammarFileName, "trystatement"); }
		return;

	}
	// $ANTLR end "trystatement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// Java.g:894:1: catches : catchClause ( catchClause )* ;
	[GrammarRule("catches")]
	private void catches()
	{
		EnterRule_catches();
		EnterRule("catches", 63);
		TraceIn("catches", 63);
		int catches_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(894, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return; }

			// Java.g:895:5: ( catchClause ( catchClause )* )
			DebugEnterAlt(1);
			// Java.g:895:9: catchClause ( catchClause )*
			{
			DebugLocation(895, 9);
			PushFollow(Follow._catchClause_in_catches4841);
			catchClause();
			PopFollow();
			if (state.failed) return;
			DebugLocation(896, 9);
			// Java.g:896:9: ( catchClause )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==CATCH))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:896:10: catchClause
					{
					DebugLocation(896, 10);
					PushFollow(Follow._catchClause_in_catches4852);
					catchClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catches", 63);
			LeaveRule("catches", 63);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 63, catches_StartIndex); }

		}
		DebugLocation(898, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// Java.g:900:1: catchClause : 'catch' '(' formalParameter ')' block ;
	[GrammarRule("catchClause")]
	private void catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 64);
		TraceIn("catchClause", 64);
		int catchClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(900, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return; }

			// Java.g:901:5: ( 'catch' '(' formalParameter ')' block )
			DebugEnterAlt(1);
			// Java.g:901:9: 'catch' '(' formalParameter ')' block
			{
			DebugLocation(901, 9);
			Match(input,CATCH,Follow._CATCH_in_catchClause4883); if (state.failed) return;
			DebugLocation(901, 17);
			Match(input,LPAREN,Follow._LPAREN_in_catchClause4885); if (state.failed) return;
			DebugLocation(901, 21);
			PushFollow(Follow._formalParameter_in_catchClause4887);
			formalParameter();
			PopFollow();
			if (state.failed) return;
			DebugLocation(902, 9);
			Match(input,RPAREN,Follow._RPAREN_in_catchClause4897); if (state.failed) return;
			DebugLocation(902, 13);
			PushFollow(Follow._block_in_catchClause4899);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 64);
			LeaveRule("catchClause", 64);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 64, catchClause_StartIndex); }

		}
		DebugLocation(903, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_formalParameter();
	partial void LeaveRule_formalParameter();
	// $ANTLR start "formalParameter"
	// Java.g:905:1: formalParameter : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("formalParameter")]
	private void formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 65);
		TraceIn("formalParameter", 65);
		int formalParameter_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(905, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return; }

			// Java.g:906:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:906:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			DebugLocation(906, 9);
			PushFollow(Follow._variableModifiers_in_formalParameter4920);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(906, 27);
			PushFollow(Follow._type_in_formalParameter4922);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(906, 32);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_formalParameter4924); if (state.failed) return;
			DebugLocation(907, 9);
			// Java.g:907:9: ( '[' ']' )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_1 = input.LA(1);

				if ((LA104_1==LBRACKET))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:907:10: '[' ']'
					{
					DebugLocation(907, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_formalParameter4935); if (state.failed) return;
					DebugLocation(907, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_formalParameter4937); if (state.failed) return;

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameter", 65);
			LeaveRule("formalParameter", 65);
			LeaveRule_formalParameter();
			if (state.backtracking > 0) { Memoize(input, 65, formalParameter_StartIndex); }

		}
		DebugLocation(909, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return;

	}
	// $ANTLR end "formalParameter"

	partial void EnterRule_forstatement();
	partial void LeaveRule_forstatement();
	// $ANTLR start "forstatement"
	// Java.g:911:1: forstatement : ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement );
	[GrammarRule("forstatement")]
	private void forstatement()
	{
		EnterRule_forstatement();
		EnterRule("forstatement", 66);
		TraceIn("forstatement", 66);
		int forstatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forstatement");
		DebugLocation(911, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return; }

			// Java.g:912:5: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement )
			int alt108=2;
			try { DebugEnterDecision(108, false);
			int LA108_1 = input.LA(1);

			if ((LA108_1==FOR))
			{
				int LA108_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt108 = 1;
				}
				else if ((true))
				{
					alt108 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 108, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 108, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:914:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
				{
				DebugLocation(914, 9);
				Match(input,FOR,Follow._FOR_in_forstatement4986); if (state.failed) return;
				DebugLocation(914, 15);
				Match(input,LPAREN,Follow._LPAREN_in_forstatement4988); if (state.failed) return;
				DebugLocation(914, 19);
				PushFollow(Follow._variableModifiers_in_forstatement4990);
				variableModifiers();
				PopFollow();
				if (state.failed) return;
				DebugLocation(914, 37);
				PushFollow(Follow._type_in_forstatement4992);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(914, 42);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_forstatement4994); if (state.failed) return;
				DebugLocation(914, 53);
				Match(input,COLON,Follow._COLON_in_forstatement4996); if (state.failed) return;
				DebugLocation(915, 9);
				PushFollow(Follow._expression_in_forstatement5007);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(915, 20);
				Match(input,RPAREN,Follow._RPAREN_in_forstatement5009); if (state.failed) return;
				DebugLocation(915, 24);
				PushFollow(Follow._statement_in_forstatement5011);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:918:9: 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement
				{
				DebugLocation(918, 9);
				Match(input,FOR,Follow._FOR_in_forstatement5043); if (state.failed) return;
				DebugLocation(918, 15);
				Match(input,LPAREN,Follow._LPAREN_in_forstatement5045); if (state.failed) return;
				DebugLocation(919, 17);
				// Java.g:919:17: ( forInit )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==BANG||LA105_1==BOOLEAN||LA105_1==BYTE||(LA105_1>=CHAR && LA105_1<=CHARLITERAL)||(LA105_1>=DOUBLE && LA105_1<=DOUBLELITERAL)||(LA105_1>=FALSE && LA105_1<=FINAL)||(LA105_1>=FLOAT && LA105_1<=FLOATLITERAL)||LA105_1==IDENTIFIER||LA105_1==INT||LA105_1==INTLITERAL||(LA105_1>=LONG && LA105_1<=LPAREN)||LA105_1==MONKEYS_AT||(LA105_1>=NEW && LA105_1<=NULL)||LA105_1==PLUS||LA105_1==PLUSPLUS||LA105_1==SHORT||(LA105_1>=STRINGLITERAL && LA105_1<=SUB)||(LA105_1>=SUBSUB && LA105_1<=SUPER)||LA105_1==THIS||LA105_1==TILDE||LA105_1==TRUE||LA105_1==VOID))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:919:18: forInit
					{
					DebugLocation(919, 18);
					PushFollow(Follow._forInit_in_forstatement5065);
					forInit();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(920, 20);
				Match(input,SEMI,Follow._SEMI_in_forstatement5086); if (state.failed) return;
				DebugLocation(921, 17);
				// Java.g:921:17: ( expression )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==BANG||LA106_1==BOOLEAN||LA106_1==BYTE||(LA106_1>=CHAR && LA106_1<=CHARLITERAL)||(LA106_1>=DOUBLE && LA106_1<=DOUBLELITERAL)||LA106_1==FALSE||(LA106_1>=FLOAT && LA106_1<=FLOATLITERAL)||LA106_1==IDENTIFIER||LA106_1==INT||LA106_1==INTLITERAL||(LA106_1>=LONG && LA106_1<=LPAREN)||(LA106_1>=NEW && LA106_1<=NULL)||LA106_1==PLUS||LA106_1==PLUSPLUS||LA106_1==SHORT||(LA106_1>=STRINGLITERAL && LA106_1<=SUB)||(LA106_1>=SUBSUB && LA106_1<=SUPER)||LA106_1==THIS||LA106_1==TILDE||LA106_1==TRUE||LA106_1==VOID))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:921:18: expression
					{
					DebugLocation(921, 18);
					PushFollow(Follow._expression_in_forstatement5106);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(922, 20);
				Match(input,SEMI,Follow._SEMI_in_forstatement5127); if (state.failed) return;
				DebugLocation(923, 17);
				// Java.g:923:17: ( expressionList )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_1 = input.LA(1);

				if ((LA107_1==BANG||LA107_1==BOOLEAN||LA107_1==BYTE||(LA107_1>=CHAR && LA107_1<=CHARLITERAL)||(LA107_1>=DOUBLE && LA107_1<=DOUBLELITERAL)||LA107_1==FALSE||(LA107_1>=FLOAT && LA107_1<=FLOATLITERAL)||LA107_1==IDENTIFIER||LA107_1==INT||LA107_1==INTLITERAL||(LA107_1>=LONG && LA107_1<=LPAREN)||(LA107_1>=NEW && LA107_1<=NULL)||LA107_1==PLUS||LA107_1==PLUSPLUS||LA107_1==SHORT||(LA107_1>=STRINGLITERAL && LA107_1<=SUB)||(LA107_1>=SUBSUB && LA107_1<=SUPER)||LA107_1==THIS||LA107_1==TILDE||LA107_1==TRUE||LA107_1==VOID))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:923:18: expressionList
					{
					DebugLocation(923, 18);
					PushFollow(Follow._expressionList_in_forstatement5147);
					expressionList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(924, 20);
				Match(input,RPAREN,Follow._RPAREN_in_forstatement5168); if (state.failed) return;
				DebugLocation(924, 24);
				PushFollow(Follow._statement_in_forstatement5170);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forstatement", 66);
			LeaveRule("forstatement", 66);
			LeaveRule_forstatement();
			if (state.backtracking > 0) { Memoize(input, 66, forstatement_StartIndex); }

		}
		DebugLocation(925, 4);
		} finally { DebugExitRule(GrammarFileName, "forstatement"); }
		return;

	}
	// $ANTLR end "forstatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// Java.g:927:1: forInit : ( localVariableDeclaration | expressionList );
	[GrammarRule("forInit")]
	private void forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 67);
		TraceIn("forInit", 67);
		int forInit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(927, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return; }

			// Java.g:928:5: ( localVariableDeclaration | expressionList )
			int alt109=2;
			try { DebugEnterDecision(109, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt109 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA109_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt109 = 1;
				}
				else if ((true))
				{
					alt109 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 109, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA109_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt109 = 1;
				}
				else if ((true))
				{
					alt109 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 109, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BANG:
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt109 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:928:9: localVariableDeclaration
				{
				DebugLocation(928, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit5190);
				localVariableDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:929:9: expressionList
				{
				DebugLocation(929, 9);
				PushFollow(Follow._expressionList_in_forInit5200);
				expressionList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInit", 67);
			LeaveRule("forInit", 67);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 67, forInit_StartIndex); }

		}
		DebugLocation(930, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_parExpression();
	partial void LeaveRule_parExpression();
	// $ANTLR start "parExpression"
	// Java.g:932:1: parExpression : '(' expression ')' ;
	[GrammarRule("parExpression")]
	private void parExpression()
	{
		EnterRule_parExpression();
		EnterRule("parExpression", 68);
		TraceIn("parExpression", 68);
		int parExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "parExpression");
		DebugLocation(932, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return; }

			// Java.g:933:5: ( '(' expression ')' )
			DebugEnterAlt(1);
			// Java.g:933:9: '(' expression ')'
			{
			DebugLocation(933, 9);
			Match(input,LPAREN,Follow._LPAREN_in_parExpression5220); if (state.failed) return;
			DebugLocation(933, 13);
			PushFollow(Follow._expression_in_parExpression5222);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(933, 24);
			Match(input,RPAREN,Follow._RPAREN_in_parExpression5224); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parExpression", 68);
			LeaveRule("parExpression", 68);
			LeaveRule_parExpression();
			if (state.backtracking > 0) { Memoize(input, 68, parExpression_StartIndex); }

		}
		DebugLocation(934, 4);
		} finally { DebugExitRule(GrammarFileName, "parExpression"); }
		return;

	}
	// $ANTLR end "parExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// Java.g:936:1: expressionList : expression ( ',' expression )* ;
	[GrammarRule("expressionList")]
	private void expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 69);
		TraceIn("expressionList", 69);
		int expressionList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(936, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return; }

			// Java.g:937:5: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// Java.g:937:9: expression ( ',' expression )*
			{
			DebugLocation(937, 9);
			PushFollow(Follow._expression_in_expressionList5244);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(938, 9);
			// Java.g:938:9: ( ',' expression )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==COMMA))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:938:10: ',' expression
					{
					DebugLocation(938, 10);
					Match(input,COMMA,Follow._COMMA_in_expressionList5255); if (state.failed) return;
					DebugLocation(938, 14);
					PushFollow(Follow._expression_in_expressionList5257);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionList", 69);
			LeaveRule("expressionList", 69);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 69, expressionList_StartIndex); }

		}
		DebugLocation(940, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Java.g:943:1: expression : conditionalExpression ( assignmentOperator expression )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 70);
		TraceIn("expression", 70);
		int expression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(943, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return; }

			// Java.g:944:5: ( conditionalExpression ( assignmentOperator expression )? )
			DebugEnterAlt(1);
			// Java.g:944:9: conditionalExpression ( assignmentOperator expression )?
			{
			DebugLocation(944, 9);
			PushFollow(Follow._conditionalExpression_in_expression5289);
			conditionalExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(945, 9);
			// Java.g:945:9: ( assignmentOperator expression )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==AMPEQ||LA111_1==BAREQ||LA111_1==CARETEQ||LA111_1==EQ||LA111_1==GT||LA111_1==LT||LA111_1==PERCENTEQ||LA111_1==PLUSEQ||LA111_1==SLASHEQ||LA111_1==STAREQ||LA111_1==SUBEQ))
			{
				alt111 = 1;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:945:10: assignmentOperator expression
				{
				DebugLocation(945, 10);
				PushFollow(Follow._assignmentOperator_in_expression5300);
				assignmentOperator();
				PopFollow();
				if (state.failed) return;
				DebugLocation(945, 29);
				PushFollow(Follow._expression_in_expression5302);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 70);
			LeaveRule("expression", 70);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 70, expression_StartIndex); }

		}
		DebugLocation(947, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();
	// $ANTLR start "assignmentOperator"
	// Java.g:950:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );
	[GrammarRule("assignmentOperator")]
	private void assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 71);
		TraceIn("assignmentOperator", 71);
		int assignmentOperator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(950, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return; }

			// Java.g:951:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' )
			int alt112=12;
			try { DebugEnterDecision(112, false);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt112 = 1;
				}
				break;
			case PLUSEQ:
				{
				alt112 = 2;
				}
				break;
			case SUBEQ:
				{
				alt112 = 3;
				}
				break;
			case STAREQ:
				{
				alt112 = 4;
				}
				break;
			case SLASHEQ:
				{
				alt112 = 5;
				}
				break;
			case AMPEQ:
				{
				alt112 = 6;
				}
				break;
			case BAREQ:
				{
				alt112 = 7;
				}
				break;
			case CARETEQ:
				{
				alt112 = 8;
				}
				break;
			case PERCENTEQ:
				{
				alt112 = 9;
				}
				break;
			case LT:
				{
				alt112 = 10;
				}
				break;
			case GT:
				{
				int LA112_2 = input.LA(2);

				if ((LA112_2==GT))
				{
					int LA112_3 = input.LA(3);

					if ((LA112_3==GT))
					{
						alt112 = 11;
					}
					else if ((LA112_3==EQ))
					{
						alt112 = 12;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 112, 12, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:951:9: '='
				{
				DebugLocation(951, 9);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5334); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:952:9: '+='
				{
				DebugLocation(952, 9);
				Match(input,PLUSEQ,Follow._PLUSEQ_in_assignmentOperator5344); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:953:9: '-='
				{
				DebugLocation(953, 9);
				Match(input,SUBEQ,Follow._SUBEQ_in_assignmentOperator5354); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:954:9: '*='
				{
				DebugLocation(954, 9);
				Match(input,STAREQ,Follow._STAREQ_in_assignmentOperator5364); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:955:9: '/='
				{
				DebugLocation(955, 9);
				Match(input,SLASHEQ,Follow._SLASHEQ_in_assignmentOperator5374); if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:956:9: '&='
				{
				DebugLocation(956, 9);
				Match(input,AMPEQ,Follow._AMPEQ_in_assignmentOperator5384); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:957:9: '|='
				{
				DebugLocation(957, 9);
				Match(input,BAREQ,Follow._BAREQ_in_assignmentOperator5394); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:958:9: '^='
				{
				DebugLocation(958, 9);
				Match(input,CARETEQ,Follow._CARETEQ_in_assignmentOperator5404); if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:959:9: '%='
				{
				DebugLocation(959, 9);
				Match(input,PERCENTEQ,Follow._PERCENTEQ_in_assignmentOperator5414); if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:960:10: '<' '<' '='
				{
				DebugLocation(960, 10);
				Match(input,LT,Follow._LT_in_assignmentOperator5425); if (state.failed) return;
				DebugLocation(960, 14);
				Match(input,LT,Follow._LT_in_assignmentOperator5427); if (state.failed) return;
				DebugLocation(960, 18);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5429); if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:961:10: '>' '>' '>' '='
				{
				DebugLocation(961, 10);
				Match(input,GT,Follow._GT_in_assignmentOperator5440); if (state.failed) return;
				DebugLocation(961, 14);
				Match(input,GT,Follow._GT_in_assignmentOperator5442); if (state.failed) return;
				DebugLocation(961, 18);
				Match(input,GT,Follow._GT_in_assignmentOperator5444); if (state.failed) return;
				DebugLocation(961, 22);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5446); if (state.failed) return;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:962:10: '>' '>' '='
				{
				DebugLocation(962, 10);
				Match(input,GT,Follow._GT_in_assignmentOperator5457); if (state.failed) return;
				DebugLocation(962, 14);
				Match(input,GT,Follow._GT_in_assignmentOperator5459); if (state.failed) return;
				DebugLocation(962, 18);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5461); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentOperator", 71);
			LeaveRule("assignmentOperator", 71);
			LeaveRule_assignmentOperator();
			if (state.backtracking > 0) { Memoize(input, 71, assignmentOperator_StartIndex); }

		}
		DebugLocation(963, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// Java.g:966:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private void conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 72);
		TraceIn("conditionalExpression", 72);
		int conditionalExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(966, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return; }

			// Java.g:967:5: ( conditionalOrExpression ( '?' expression ':' conditionalExpression )? )
			DebugEnterAlt(1);
			// Java.g:967:9: conditionalOrExpression ( '?' expression ':' conditionalExpression )?
			{
			DebugLocation(967, 9);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression5482);
			conditionalOrExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(968, 9);
			// Java.g:968:9: ( '?' expression ':' conditionalExpression )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_1 = input.LA(1);

			if ((LA113_1==QUES))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:968:10: '?' expression ':' conditionalExpression
				{
				DebugLocation(968, 10);
				Match(input,QUES,Follow._QUES_in_conditionalExpression5493); if (state.failed) return;
				DebugLocation(968, 14);
				PushFollow(Follow._expression_in_conditionalExpression5495);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(968, 25);
				Match(input,COLON,Follow._COLON_in_conditionalExpression5497); if (state.failed) return;
				DebugLocation(968, 29);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression5499);
				conditionalExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(113); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpression", 72);
			LeaveRule("conditionalExpression", 72);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 72, conditionalExpression_StartIndex); }

		}
		DebugLocation(970, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();
	// $ANTLR start "conditionalOrExpression"
	// Java.g:972:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private void conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 73);
		TraceIn("conditionalOrExpression", 73);
		int conditionalOrExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(972, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return; }

			// Java.g:973:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* )
			DebugEnterAlt(1);
			// Java.g:973:9: conditionalAndExpression ( '||' conditionalAndExpression )*
			{
			DebugLocation(973, 9);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5530);
			conditionalAndExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(974, 9);
			// Java.g:974:9: ( '||' conditionalAndExpression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==BARBAR))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:974:10: '||' conditionalAndExpression
					{
					DebugLocation(974, 10);
					Match(input,BARBAR,Follow._BARBAR_in_conditionalOrExpression5541); if (state.failed) return;
					DebugLocation(974, 15);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5543);
					conditionalAndExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalOrExpression", 73);
			LeaveRule("conditionalOrExpression", 73);
			LeaveRule_conditionalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 73, conditionalOrExpression_StartIndex); }

		}
		DebugLocation(976, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();
	// $ANTLR start "conditionalAndExpression"
	// Java.g:978:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private void conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 74);
		TraceIn("conditionalAndExpression", 74);
		int conditionalAndExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(978, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return; }

			// Java.g:979:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:979:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
			{
			DebugLocation(979, 9);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5574);
			inclusiveOrExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(980, 9);
			// Java.g:980:9: ( '&&' inclusiveOrExpression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==AMPAMP))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:980:10: '&&' inclusiveOrExpression
					{
					DebugLocation(980, 10);
					Match(input,AMPAMP,Follow._AMPAMP_in_conditionalAndExpression5585); if (state.failed) return;
					DebugLocation(980, 15);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5587);
					inclusiveOrExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalAndExpression", 74);
			LeaveRule("conditionalAndExpression", 74);
			LeaveRule_conditionalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 74, conditionalAndExpression_StartIndex); }

		}
		DebugLocation(982, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();
	// $ANTLR start "inclusiveOrExpression"
	// Java.g:984:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private void inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 75);
		TraceIn("inclusiveOrExpression", 75);
		int inclusiveOrExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(984, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return; }

			// Java.g:985:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:985:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
			{
			DebugLocation(985, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5618);
			exclusiveOrExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(986, 9);
			// Java.g:986:9: ( '|' exclusiveOrExpression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==BAR))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:986:10: '|' exclusiveOrExpression
					{
					DebugLocation(986, 10);
					Match(input,BAR,Follow._BAR_in_inclusiveOrExpression5629); if (state.failed) return;
					DebugLocation(986, 14);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5631);
					exclusiveOrExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inclusiveOrExpression", 75);
			LeaveRule("inclusiveOrExpression", 75);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 75, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(988, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();
	// $ANTLR start "exclusiveOrExpression"
	// Java.g:990:1: exclusiveOrExpression : andExpression ( '^' andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private void exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 76);
		TraceIn("exclusiveOrExpression", 76);
		int exclusiveOrExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(990, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return; }

			// Java.g:991:5: ( andExpression ( '^' andExpression )* )
			DebugEnterAlt(1);
			// Java.g:991:9: andExpression ( '^' andExpression )*
			{
			DebugLocation(991, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression5662);
			andExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(992, 9);
			// Java.g:992:9: ( '^' andExpression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_1 = input.LA(1);

				if ((LA117_1==CARET))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:992:10: '^' andExpression
					{
					DebugLocation(992, 10);
					Match(input,CARET,Follow._CARET_in_exclusiveOrExpression5673); if (state.failed) return;
					DebugLocation(992, 14);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression5675);
					andExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exclusiveOrExpression", 76);
			LeaveRule("exclusiveOrExpression", 76);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 76, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(994, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Java.g:996:1: andExpression : equalityExpression ( '&' equalityExpression )* ;
	[GrammarRule("andExpression")]
	private void andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 77);
		TraceIn("andExpression", 77);
		int andExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(996, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return; }

			// Java.g:997:5: ( equalityExpression ( '&' equalityExpression )* )
			DebugEnterAlt(1);
			// Java.g:997:9: equalityExpression ( '&' equalityExpression )*
			{
			DebugLocation(997, 9);
			PushFollow(Follow._equalityExpression_in_andExpression5706);
			equalityExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(998, 9);
			// Java.g:998:9: ( '&' equalityExpression )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_1 = input.LA(1);

				if ((LA118_1==AMP))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:998:10: '&' equalityExpression
					{
					DebugLocation(998, 10);
					Match(input,AMP,Follow._AMP_in_andExpression5717); if (state.failed) return;
					DebugLocation(998, 14);
					PushFollow(Follow._equalityExpression_in_andExpression5719);
					equalityExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("andExpression", 77);
			LeaveRule("andExpression", 77);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 77, andExpression_StartIndex); }

		}
		DebugLocation(1000, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// Java.g:1002:1: equalityExpression : instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private void equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 78);
		TraceIn("equalityExpression", 78);
		int equalityExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1002, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return; }

			// Java.g:1003:5: ( instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* )
			DebugEnterAlt(1);
			// Java.g:1003:9: instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )*
			{
			DebugLocation(1003, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression5750);
			instanceOfExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1004, 9);
			// Java.g:1004:9: ( ( '==' | '!=' ) instanceOfExpression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_1 = input.LA(1);

				if ((LA119_1==BANGEQ||LA119_1==EQEQ))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1005:13: ( '==' | '!=' ) instanceOfExpression
					{
					DebugLocation(1005, 13);
					if (input.LA(1)==BANGEQ||input.LA(1)==EQEQ)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1008, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression5827);
					instanceOfExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpression", 78);
			LeaveRule("equalityExpression", 78);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 78, equalityExpression_StartIndex); }

		}
		DebugLocation(1010, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();
	// $ANTLR start "instanceOfExpression"
	// Java.g:1012:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? ;
	[GrammarRule("instanceOfExpression")]
	private void instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 79);
		TraceIn("instanceOfExpression", 79);
		int instanceOfExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(1012, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return; }

			// Java.g:1013:5: ( relationalExpression ( 'instanceof' type )? )
			DebugEnterAlt(1);
			// Java.g:1013:9: relationalExpression ( 'instanceof' type )?
			{
			DebugLocation(1013, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression5858);
			relationalExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1014, 9);
			// Java.g:1014:9: ( 'instanceof' type )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_1 = input.LA(1);

			if ((LA120_1==INSTANCEOF))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1014:10: 'instanceof' type
				{
				DebugLocation(1014, 10);
				Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression5869); if (state.failed) return;
				DebugLocation(1014, 23);
				PushFollow(Follow._type_in_instanceOfExpression5871);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("instanceOfExpression", 79);
			LeaveRule("instanceOfExpression", 79);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 79, instanceOfExpression_StartIndex); }

		}
		DebugLocation(1016, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// Java.g:1018:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private void relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 80);
		TraceIn("relationalExpression", 80);
		int relationalExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1018, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return; }

			// Java.g:1019:5: ( shiftExpression ( relationalOp shiftExpression )* )
			DebugEnterAlt(1);
			// Java.g:1019:9: shiftExpression ( relationalOp shiftExpression )*
			{
			DebugLocation(1019, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression5902);
			shiftExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1020, 9);
			// Java.g:1020:9: ( relationalOp shiftExpression )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==LT))
				{
					int LA121_2 = input.LA(2);

					if ((LA121_2==BANG||LA121_2==BOOLEAN||LA121_2==BYTE||(LA121_2>=CHAR && LA121_2<=CHARLITERAL)||(LA121_2>=DOUBLE && LA121_2<=DOUBLELITERAL)||LA121_2==EQ||LA121_2==FALSE||(LA121_2>=FLOAT && LA121_2<=FLOATLITERAL)||LA121_2==IDENTIFIER||LA121_2==INT||LA121_2==INTLITERAL||(LA121_2>=LONG && LA121_2<=LPAREN)||(LA121_2>=NEW && LA121_2<=NULL)||LA121_2==PLUS||LA121_2==PLUSPLUS||LA121_2==SHORT||(LA121_2>=STRINGLITERAL && LA121_2<=SUB)||(LA121_2>=SUBSUB && LA121_2<=SUPER)||LA121_2==THIS||LA121_2==TILDE||LA121_2==TRUE||LA121_2==VOID))
					{
						alt121 = 1;
					}


				}
				else if ((LA121_1==GT))
				{
					int LA121_2 = input.LA(2);

					if ((LA121_2==BANG||LA121_2==BOOLEAN||LA121_2==BYTE||(LA121_2>=CHAR && LA121_2<=CHARLITERAL)||(LA121_2>=DOUBLE && LA121_2<=DOUBLELITERAL)||LA121_2==EQ||LA121_2==FALSE||(LA121_2>=FLOAT && LA121_2<=FLOATLITERAL)||LA121_2==IDENTIFIER||LA121_2==INT||LA121_2==INTLITERAL||(LA121_2>=LONG && LA121_2<=LPAREN)||(LA121_2>=NEW && LA121_2<=NULL)||LA121_2==PLUS||LA121_2==PLUSPLUS||LA121_2==SHORT||(LA121_2>=STRINGLITERAL && LA121_2<=SUB)||(LA121_2>=SUBSUB && LA121_2<=SUPER)||LA121_2==THIS||LA121_2==TILDE||LA121_2==TRUE||LA121_2==VOID))
					{
						alt121 = 1;
					}


				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1020:10: relationalOp shiftExpression
					{
					DebugLocation(1020, 10);
					PushFollow(Follow._relationalOp_in_relationalExpression5913);
					relationalOp();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1020, 23);
					PushFollow(Follow._shiftExpression_in_relationalExpression5915);
					shiftExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpression", 80);
			LeaveRule("relationalExpression", 80);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 80, relationalExpression_StartIndex); }

		}
		DebugLocation(1022, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOp();
	partial void LeaveRule_relationalOp();
	// $ANTLR start "relationalOp"
	// Java.g:1024:1: relationalOp : ( '<' '=' | '>' '=' | '<' | '>' );
	[GrammarRule("relationalOp")]
	private void relationalOp()
	{
		EnterRule_relationalOp();
		EnterRule("relationalOp", 81);
		TraceIn("relationalOp", 81);
		int relationalOp_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "relationalOp");
		DebugLocation(1024, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return; }

			// Java.g:1025:5: ( '<' '=' | '>' '=' | '<' | '>' )
			int alt122=4;
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==LT))
			{
				int LA122_2 = input.LA(2);

				if ((LA122_2==EQ))
				{
					alt122 = 1;
				}
				else if ((LA122_2==BANG||LA122_2==BOOLEAN||LA122_2==BYTE||(LA122_2>=CHAR && LA122_2<=CHARLITERAL)||(LA122_2>=DOUBLE && LA122_2<=DOUBLELITERAL)||LA122_2==FALSE||(LA122_2>=FLOAT && LA122_2<=FLOATLITERAL)||LA122_2==IDENTIFIER||LA122_2==INT||LA122_2==INTLITERAL||(LA122_2>=LONG && LA122_2<=LPAREN)||(LA122_2>=NEW && LA122_2<=NULL)||LA122_2==PLUS||LA122_2==PLUSPLUS||LA122_2==SHORT||(LA122_2>=STRINGLITERAL && LA122_2<=SUB)||(LA122_2>=SUBSUB && LA122_2<=SUPER)||LA122_2==THIS||LA122_2==TILDE||LA122_2==TRUE||LA122_2==VOID))
				{
					alt122 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 122, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA122_1==GT))
			{
				int LA122_2 = input.LA(2);

				if ((LA122_2==EQ))
				{
					alt122 = 2;
				}
				else if ((LA122_2==BANG||LA122_2==BOOLEAN||LA122_2==BYTE||(LA122_2>=CHAR && LA122_2<=CHARLITERAL)||(LA122_2>=DOUBLE && LA122_2<=DOUBLELITERAL)||LA122_2==FALSE||(LA122_2>=FLOAT && LA122_2<=FLOATLITERAL)||LA122_2==IDENTIFIER||LA122_2==INT||LA122_2==INTLITERAL||(LA122_2>=LONG && LA122_2<=LPAREN)||(LA122_2>=NEW && LA122_2<=NULL)||LA122_2==PLUS||LA122_2==PLUSPLUS||LA122_2==SHORT||(LA122_2>=STRINGLITERAL && LA122_2<=SUB)||(LA122_2>=SUBSUB && LA122_2<=SUPER)||LA122_2==THIS||LA122_2==TILDE||LA122_2==TRUE||LA122_2==VOID))
				{
					alt122 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 122, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1025:10: '<' '='
				{
				DebugLocation(1025, 10);
				Match(input,LT,Follow._LT_in_relationalOp5947); if (state.failed) return;
				DebugLocation(1025, 14);
				Match(input,EQ,Follow._EQ_in_relationalOp5949); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1026:10: '>' '='
				{
				DebugLocation(1026, 10);
				Match(input,GT,Follow._GT_in_relationalOp5960); if (state.failed) return;
				DebugLocation(1026, 14);
				Match(input,EQ,Follow._EQ_in_relationalOp5962); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1027:9: '<'
				{
				DebugLocation(1027, 9);
				Match(input,LT,Follow._LT_in_relationalOp5972); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1028:9: '>'
				{
				DebugLocation(1028, 9);
				Match(input,GT,Follow._GT_in_relationalOp5982); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalOp", 81);
			LeaveRule("relationalOp", 81);
			LeaveRule_relationalOp();
			if (state.backtracking > 0) { Memoize(input, 81, relationalOp_StartIndex); }

		}
		DebugLocation(1029, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalOp"); }
		return;

	}
	// $ANTLR end "relationalOp"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// Java.g:1031:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private void shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 82);
		TraceIn("shiftExpression", 82);
		int shiftExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1031, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return; }

			// Java.g:1032:5: ( additiveExpression ( shiftOp additiveExpression )* )
			DebugEnterAlt(1);
			// Java.g:1032:9: additiveExpression ( shiftOp additiveExpression )*
			{
			DebugLocation(1032, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression6002);
			additiveExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1033, 9);
			// Java.g:1033:9: ( shiftOp additiveExpression )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_1 = input.LA(1);

				if ((LA123_1==LT))
				{
					int LA123_2 = input.LA(2);

					if ((LA123_2==LT))
					{
						int LA123_3 = input.LA(3);

						if ((LA123_3==BANG||LA123_3==BOOLEAN||LA123_3==BYTE||(LA123_3>=CHAR && LA123_3<=CHARLITERAL)||(LA123_3>=DOUBLE && LA123_3<=DOUBLELITERAL)||LA123_3==FALSE||(LA123_3>=FLOAT && LA123_3<=FLOATLITERAL)||LA123_3==IDENTIFIER||LA123_3==INT||LA123_3==INTLITERAL||(LA123_3>=LONG && LA123_3<=LPAREN)||(LA123_3>=NEW && LA123_3<=NULL)||LA123_3==PLUS||LA123_3==PLUSPLUS||LA123_3==SHORT||(LA123_3>=STRINGLITERAL && LA123_3<=SUB)||(LA123_3>=SUBSUB && LA123_3<=SUPER)||LA123_3==THIS||LA123_3==TILDE||LA123_3==TRUE||LA123_3==VOID))
						{
							alt123 = 1;
						}


					}


				}
				else if ((LA123_1==GT))
				{
					int LA123_2 = input.LA(2);

					if ((LA123_2==GT))
					{
						int LA123_3 = input.LA(3);

						if ((LA123_3==GT))
						{
							int LA123_4 = input.LA(4);

							if ((LA123_4==BANG||LA123_4==BOOLEAN||LA123_4==BYTE||(LA123_4>=CHAR && LA123_4<=CHARLITERAL)||(LA123_4>=DOUBLE && LA123_4<=DOUBLELITERAL)||LA123_4==FALSE||(LA123_4>=FLOAT && LA123_4<=FLOATLITERAL)||LA123_4==IDENTIFIER||LA123_4==INT||LA123_4==INTLITERAL||(LA123_4>=LONG && LA123_4<=LPAREN)||(LA123_4>=NEW && LA123_4<=NULL)||LA123_4==PLUS||LA123_4==PLUSPLUS||LA123_4==SHORT||(LA123_4>=STRINGLITERAL && LA123_4<=SUB)||(LA123_4>=SUBSUB && LA123_4<=SUPER)||LA123_4==THIS||LA123_4==TILDE||LA123_4==TRUE||LA123_4==VOID))
							{
								alt123 = 1;
							}


						}
						else if ((LA123_3==BANG||LA123_3==BOOLEAN||LA123_3==BYTE||(LA123_3>=CHAR && LA123_3<=CHARLITERAL)||(LA123_3>=DOUBLE && LA123_3<=DOUBLELITERAL)||LA123_3==FALSE||(LA123_3>=FLOAT && LA123_3<=FLOATLITERAL)||LA123_3==IDENTIFIER||LA123_3==INT||LA123_3==INTLITERAL||(LA123_3>=LONG && LA123_3<=LPAREN)||(LA123_3>=NEW && LA123_3<=NULL)||LA123_3==PLUS||LA123_3==PLUSPLUS||LA123_3==SHORT||(LA123_3>=STRINGLITERAL && LA123_3<=SUB)||(LA123_3>=SUBSUB && LA123_3<=SUPER)||LA123_3==THIS||LA123_3==TILDE||LA123_3==TRUE||LA123_3==VOID))
						{
							alt123 = 1;
						}


					}


				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1033:10: shiftOp additiveExpression
					{
					DebugLocation(1033, 10);
					PushFollow(Follow._shiftOp_in_shiftExpression6013);
					shiftOp();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1033, 18);
					PushFollow(Follow._additiveExpression_in_shiftExpression6015);
					additiveExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftExpression", 82);
			LeaveRule("shiftExpression", 82);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 82, shiftExpression_StartIndex); }

		}
		DebugLocation(1035, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_shiftOp();
	partial void LeaveRule_shiftOp();
	// $ANTLR start "shiftOp"
	// Java.g:1038:1: shiftOp : ( '<' '<' | '>' '>' '>' | '>' '>' );
	[GrammarRule("shiftOp")]
	private void shiftOp()
	{
		EnterRule_shiftOp();
		EnterRule("shiftOp", 83);
		TraceIn("shiftOp", 83);
		int shiftOp_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "shiftOp");
		DebugLocation(1038, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return; }

			// Java.g:1039:5: ( '<' '<' | '>' '>' '>' | '>' '>' )
			int alt124=3;
			try { DebugEnterDecision(124, false);
			int LA124_1 = input.LA(1);

			if ((LA124_1==LT))
			{
				alt124 = 1;
			}
			else if ((LA124_1==GT))
			{
				int LA124_2 = input.LA(2);

				if ((LA124_2==GT))
				{
					int LA124_3 = input.LA(3);

					if ((LA124_3==GT))
					{
						alt124 = 2;
					}
					else if ((LA124_3==BANG||LA124_3==BOOLEAN||LA124_3==BYTE||(LA124_3>=CHAR && LA124_3<=CHARLITERAL)||(LA124_3>=DOUBLE && LA124_3<=DOUBLELITERAL)||LA124_3==FALSE||(LA124_3>=FLOAT && LA124_3<=FLOATLITERAL)||LA124_3==IDENTIFIER||LA124_3==INT||LA124_3==INTLITERAL||(LA124_3>=LONG && LA124_3<=LPAREN)||(LA124_3>=NEW && LA124_3<=NULL)||LA124_3==PLUS||LA124_3==PLUSPLUS||LA124_3==SHORT||(LA124_3>=STRINGLITERAL && LA124_3<=SUB)||(LA124_3>=SUBSUB && LA124_3<=SUPER)||LA124_3==THIS||LA124_3==TILDE||LA124_3==TRUE||LA124_3==VOID))
					{
						alt124 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 124, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 124, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 124, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1039:10: '<' '<'
				{
				DebugLocation(1039, 10);
				Match(input,LT,Follow._LT_in_shiftOp6048); if (state.failed) return;
				DebugLocation(1039, 14);
				Match(input,LT,Follow._LT_in_shiftOp6050); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1040:10: '>' '>' '>'
				{
				DebugLocation(1040, 10);
				Match(input,GT,Follow._GT_in_shiftOp6061); if (state.failed) return;
				DebugLocation(1040, 14);
				Match(input,GT,Follow._GT_in_shiftOp6063); if (state.failed) return;
				DebugLocation(1040, 18);
				Match(input,GT,Follow._GT_in_shiftOp6065); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1041:10: '>' '>'
				{
				DebugLocation(1041, 10);
				Match(input,GT,Follow._GT_in_shiftOp6076); if (state.failed) return;
				DebugLocation(1041, 14);
				Match(input,GT,Follow._GT_in_shiftOp6078); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftOp", 83);
			LeaveRule("shiftOp", 83);
			LeaveRule_shiftOp();
			if (state.backtracking > 0) { Memoize(input, 83, shiftOp_StartIndex); }

		}
		DebugLocation(1042, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftOp"); }
		return;

	}
	// $ANTLR end "shiftOp"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// Java.g:1045:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private void additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 84);
		TraceIn("additiveExpression", 84);
		int additiveExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1045, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return; }

			// Java.g:1046:5: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// Java.g:1046:9: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
			{
			DebugLocation(1046, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression6099);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1047, 9);
			// Java.g:1047:9: ( ( '+' | '-' ) multiplicativeExpression )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_1 = input.LA(1);

				if ((LA125_1==PLUS||LA125_1==SUB))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1048:13: ( '+' | '-' ) multiplicativeExpression
					{
					DebugLocation(1048, 13);
					if (input.LA(1)==PLUS||input.LA(1)==SUB)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1051, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression6176);
					multiplicativeExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 84);
			LeaveRule("additiveExpression", 84);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 84, additiveExpression_StartIndex); }

		}
		DebugLocation(1053, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// Java.g:1055:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private void multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 85);
		TraceIn("multiplicativeExpression", 85);
		int multiplicativeExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1055, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return; }

			// Java.g:1056:5: ( unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* )
			DebugEnterAlt(1);
			// Java.g:1057:9: unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )*
			{
			DebugLocation(1057, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression6214);
			unaryExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1058, 9);
			// Java.g:1058:9: ( ( '*' | '/' | '%' ) unaryExpression )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_1 = input.LA(1);

				if ((LA126_1==PERCENT||LA126_1==SLASH||LA126_1==STAR))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1059:13: ( '*' | '/' | '%' ) unaryExpression
					{
					DebugLocation(1059, 13);
					if (input.LA(1)==PERCENT||input.LA(1)==SLASH||input.LA(1)==STAR)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1063, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression6309);
					unaryExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 85);
			LeaveRule("multiplicativeExpression", 85);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 85, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(1065, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// Java.g:1071:1: unaryExpression : ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private void unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 86);
		TraceIn("unaryExpression", 86);
		int unaryExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(1071, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return; }

			// Java.g:1072:5: ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus )
			int alt127=5;
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt127 = 1;
				}
				break;
			case SUB:
				{
				alt127 = 2;
				}
				break;
			case PLUSPLUS:
				{
				alt127 = 3;
				}
				break;
			case SUBSUB:
				{
				alt127 = 4;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt127 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1072:9: '+' unaryExpression
				{
				DebugLocation(1072, 9);
				Match(input,PLUS,Follow._PLUS_in_unaryExpression6342); if (state.failed) return;
				DebugLocation(1072, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6345);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1073:9: '-' unaryExpression
				{
				DebugLocation(1073, 9);
				Match(input,SUB,Follow._SUB_in_unaryExpression6355); if (state.failed) return;
				DebugLocation(1073, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpression6357);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1074:9: '++' unaryExpression
				{
				DebugLocation(1074, 9);
				Match(input,PLUSPLUS,Follow._PLUSPLUS_in_unaryExpression6367); if (state.failed) return;
				DebugLocation(1074, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6369);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1075:9: '--' unaryExpression
				{
				DebugLocation(1075, 9);
				Match(input,SUBSUB,Follow._SUBSUB_in_unaryExpression6379); if (state.failed) return;
				DebugLocation(1075, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6381);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1076:9: unaryExpressionNotPlusMinus
				{
				DebugLocation(1076, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression6391);
				unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 86);
			LeaveRule("unaryExpression", 86);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 86, unaryExpression_StartIndex); }

		}
		DebugLocation(1077, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// Java.g:1079:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private void unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 87);
		TraceIn("unaryExpressionNotPlusMinus", 87);
		int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(1079, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return; }

			// Java.g:1080:5: ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? )
			int alt130=4;
			try { DebugEnterDecision(130, false);
			switch (input.LA(1))
			{
			case TILDE:
				{
				alt130 = 1;
				}
				break;
			case BANG:
				{
				alt130 = 2;
				}
				break;
			case LPAREN:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred202_Java_fragment)))
				{
					alt130 = 3;
				}
				else if ((true))
				{
					alt130 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 130, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt130 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1080:9: '~' unaryExpression
				{
				DebugLocation(1080, 9);
				Match(input,TILDE,Follow._TILDE_in_unaryExpressionNotPlusMinus6411); if (state.failed) return;
				DebugLocation(1080, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6413);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1081:9: '!' unaryExpression
				{
				DebugLocation(1081, 9);
				Match(input,BANG,Follow._BANG_in_unaryExpressionNotPlusMinus6423); if (state.failed) return;
				DebugLocation(1081, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6425);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1082:9: castExpression
				{
				DebugLocation(1082, 9);
				PushFollow(Follow._castExpression_in_unaryExpressionNotPlusMinus6435);
				castExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1083:9: primary ( selector )* ( '++' | '--' )?
				{
				DebugLocation(1083, 9);
				PushFollow(Follow._primary_in_unaryExpressionNotPlusMinus6445);
				primary();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1084, 9);
				// Java.g:1084:9: ( selector )*
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_1 = input.LA(1);

					if ((LA128_1==DOT||LA128_1==LBRACKET))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch ( alt128 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1084:10: selector
						{
						DebugLocation(1084, 10);
						PushFollow(Follow._selector_in_unaryExpressionNotPlusMinus6456);
						selector();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop128;
					}
				}

				loop128:
					;

				} finally { DebugExitSubRule(128); }

				DebugLocation(1086, 9);
				// Java.g:1086:9: ( '++' | '--' )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_1 = input.LA(1);

				if ((LA129_1==PLUSPLUS||LA129_1==SUBSUB))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1086, 9);
					if (input.LA(1)==PLUSPLUS||input.LA(1)==SUBSUB)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(129); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 87);
			LeaveRule("unaryExpressionNotPlusMinus", 87);
			LeaveRule_unaryExpressionNotPlusMinus();
			if (state.backtracking > 0) { Memoize(input, 87, unaryExpressionNotPlusMinus_StartIndex); }

		}
		DebugLocation(1089, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_castExpression();
	partial void LeaveRule_castExpression();
	// $ANTLR start "castExpression"
	// Java.g:1091:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus );
	[GrammarRule("castExpression")]
	private void castExpression()
	{
		EnterRule_castExpression();
		EnterRule("castExpression", 88);
		TraceIn("castExpression", 88);
		int castExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "castExpression");
		DebugLocation(1091, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return; }

			// Java.g:1092:5: ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus )
			int alt131=2;
			try { DebugEnterDecision(131, false);
			int LA131_1 = input.LA(1);

			if ((LA131_1==LPAREN))
			{
				int LA131_2 = input.LA(2);

				if ((EvaluatePredicate(synpred206_Java_fragment)))
				{
					alt131 = 1;
				}
				else if ((true))
				{
					alt131 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 131, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1092:9: '(' primitiveType ')' unaryExpression
				{
				DebugLocation(1092, 9);
				Match(input,LPAREN,Follow._LPAREN_in_castExpression6526); if (state.failed) return;
				DebugLocation(1092, 13);
				PushFollow(Follow._primitiveType_in_castExpression6528);
				primitiveType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1092, 27);
				Match(input,RPAREN,Follow._RPAREN_in_castExpression6530); if (state.failed) return;
				DebugLocation(1092, 31);
				PushFollow(Follow._unaryExpression_in_castExpression6532);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1093:9: '(' type ')' unaryExpressionNotPlusMinus
				{
				DebugLocation(1093, 9);
				Match(input,LPAREN,Follow._LPAREN_in_castExpression6542); if (state.failed) return;
				DebugLocation(1093, 13);
				PushFollow(Follow._type_in_castExpression6544);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1093, 18);
				Match(input,RPAREN,Follow._RPAREN_in_castExpression6546); if (state.failed) return;
				DebugLocation(1093, 22);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_castExpression6548);
				unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("castExpression", 88);
			LeaveRule("castExpression", 88);
			LeaveRule_castExpression();
			if (state.backtracking > 0) { Memoize(input, 88, castExpression_StartIndex); }

		}
		DebugLocation(1094, 4);
		} finally { DebugExitRule(GrammarFileName, "castExpression"); }
		return;

	}
	// $ANTLR end "castExpression"

	partial void EnterRule_primary();
	partial void LeaveRule_primary();
	// $ANTLR start "primary"
	// Java.g:1099:1: primary : ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
	[GrammarRule("primary")]
	private void primary()
	{
		EnterRule_primary();
		EnterRule("primary", 89);
		TraceIn("primary", 89);
		int primary_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(1099, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return; }

			// Java.g:1100:5: ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
			int alt137=8;
			try { DebugEnterDecision(137, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt137 = 1;
				}
				break;
			case THIS:
				{
				alt137 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt137 = 3;
				}
				break;
			case SUPER:
				{
				alt137 = 4;
				}
				break;
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case NULL:
			case STRINGLITERAL:
			case TRUE:
				{
				alt137 = 5;
				}
				break;
			case NEW:
				{
				alt137 = 6;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt137 = 7;
				}
				break;
			case VOID:
				{
				alt137 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1100:9: parExpression
				{
				DebugLocation(1100, 9);
				PushFollow(Follow._parExpression_in_primary6570);
				parExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1101:9: 'this' ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				DebugLocation(1101, 9);
				Match(input,THIS,Follow._THIS_in_primary6592); if (state.failed) return;
				DebugLocation(1102, 9);
				// Java.g:1102:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_1 = input.LA(1);

					if ((LA132_1==DOT))
					{
						int LA132_2 = input.LA(2);

						if ((LA132_2==IDENTIFIER))
						{
							int LA132_3 = input.LA(3);

							if ((EvaluatePredicate(synpred208_Java_fragment)))
							{
								alt132 = 1;
							}


						}


					}


					} finally { DebugExitDecision(132); }
					switch ( alt132 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1102:10: '.' IDENTIFIER
						{
						DebugLocation(1102, 10);
						Match(input,DOT,Follow._DOT_in_primary6603); if (state.failed) return;
						DebugLocation(1102, 14);
						Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6605); if (state.failed) return;

						}
						break;

					default:
						goto loop132;
					}
				}

				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(1104, 9);
				// Java.g:1104:9: ( identifierSuffix )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA133_2 = input.LA(2);

					if ((EvaluatePredicate(synpred209_Java_fragment)))
					{
						alt133 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt133 = 1;
					}
					break;
				case DOT:
					{
					int LA133_2 = input.LA(2);

					if ((EvaluatePredicate(synpred209_Java_fragment)))
					{
						alt133 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1104:10: identifierSuffix
					{
					DebugLocation(1104, 10);
					PushFollow(Follow._identifierSuffix_in_primary6627);
					identifierSuffix();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(133); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1106:9: IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				DebugLocation(1106, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6648); if (state.failed) return;
				DebugLocation(1107, 9);
				// Java.g:1107:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(134);
				while (true)
				{
					int alt134=2;
					try { DebugEnterDecision(134, false);
					int LA134_1 = input.LA(1);

					if ((LA134_1==DOT))
					{
						int LA134_2 = input.LA(2);

						if ((LA134_2==IDENTIFIER))
						{
							int LA134_3 = input.LA(3);

							if ((EvaluatePredicate(synpred211_Java_fragment)))
							{
								alt134 = 1;
							}


						}


					}


					} finally { DebugExitDecision(134); }
					switch ( alt134 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1107:10: '.' IDENTIFIER
						{
						DebugLocation(1107, 10);
						Match(input,DOT,Follow._DOT_in_primary6659); if (state.failed) return;
						DebugLocation(1107, 14);
						Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6661); if (state.failed) return;

						}
						break;

					default:
						goto loop134;
					}
				}

				loop134:
					;

				} finally { DebugExitSubRule(134); }

				DebugLocation(1109, 9);
				// Java.g:1109:9: ( identifierSuffix )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA135_2 = input.LA(2);

					if ((EvaluatePredicate(synpred212_Java_fragment)))
					{
						alt135 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt135 = 1;
					}
					break;
				case DOT:
					{
					int LA135_2 = input.LA(2);

					if ((EvaluatePredicate(synpred212_Java_fragment)))
					{
						alt135 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1109:10: identifierSuffix
					{
					DebugLocation(1109, 10);
					PushFollow(Follow._identifierSuffix_in_primary6683);
					identifierSuffix();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1111:9: 'super' superSuffix
				{
				DebugLocation(1111, 9);
				Match(input,SUPER,Follow._SUPER_in_primary6704); if (state.failed) return;
				DebugLocation(1112, 9);
				PushFollow(Follow._superSuffix_in_primary6714);
				superSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1113:9: literal
				{
				DebugLocation(1113, 9);
				PushFollow(Follow._literal_in_primary6724);
				literal();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1114:9: creator
				{
				DebugLocation(1114, 9);
				PushFollow(Follow._creator_in_primary6734);
				creator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1115:9: primitiveType ( '[' ']' )* '.' 'class'
				{
				DebugLocation(1115, 9);
				PushFollow(Follow._primitiveType_in_primary6744);
				primitiveType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1116, 9);
				// Java.g:1116:9: ( '[' ']' )*
				try { DebugEnterSubRule(136);
				while (true)
				{
					int alt136=2;
					try { DebugEnterDecision(136, false);
					int LA136_1 = input.LA(1);

					if ((LA136_1==LBRACKET))
					{
						alt136 = 1;
					}


					} finally { DebugExitDecision(136); }
					switch ( alt136 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1116:10: '[' ']'
						{
						DebugLocation(1116, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_primary6755); if (state.failed) return;
						DebugLocation(1116, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_primary6757); if (state.failed) return;

						}
						break;

					default:
						goto loop136;
					}
				}

				loop136:
					;

				} finally { DebugExitSubRule(136); }

				DebugLocation(1118, 9);
				Match(input,DOT,Follow._DOT_in_primary6778); if (state.failed) return;
				DebugLocation(1118, 13);
				Match(input,CLASS,Follow._CLASS_in_primary6780); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1119:9: 'void' '.' 'class'
				{
				DebugLocation(1119, 9);
				Match(input,VOID,Follow._VOID_in_primary6790); if (state.failed) return;
				DebugLocation(1119, 16);
				Match(input,DOT,Follow._DOT_in_primary6792); if (state.failed) return;
				DebugLocation(1119, 20);
				Match(input,CLASS,Follow._CLASS_in_primary6794); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primary", 89);
			LeaveRule("primary", 89);
			LeaveRule_primary();
			if (state.backtracking > 0) { Memoize(input, 89, primary_StartIndex); }

		}
		DebugLocation(1120, 4);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return;

	}
	// $ANTLR end "primary"

	partial void EnterRule_superSuffix();
	partial void LeaveRule_superSuffix();
	// $ANTLR start "superSuffix"
	// Java.g:1123:1: superSuffix : ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? );
	[GrammarRule("superSuffix")]
	private void superSuffix()
	{
		EnterRule_superSuffix();
		EnterRule("superSuffix", 90);
		TraceIn("superSuffix", 90);
		int superSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "superSuffix");
		DebugLocation(1123, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return; }

			// Java.g:1124:5: ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? )
			int alt140=2;
			try { DebugEnterDecision(140, false);
			int LA140_1 = input.LA(1);

			if ((LA140_1==LPAREN))
			{
				alt140 = 1;
			}
			else if ((LA140_1==DOT))
			{
				alt140 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 140, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1124:9: arguments
				{
				DebugLocation(1124, 9);
				PushFollow(Follow._arguments_in_superSuffix6820);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1125:9: '.' ( typeArguments )? IDENTIFIER ( arguments )?
				{
				DebugLocation(1125, 9);
				Match(input,DOT,Follow._DOT_in_superSuffix6830); if (state.failed) return;
				DebugLocation(1125, 13);
				// Java.g:1125:13: ( typeArguments )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, false);
				int LA138_1 = input.LA(1);

				if ((LA138_1==LT))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1125:14: typeArguments
					{
					DebugLocation(1125, 14);
					PushFollow(Follow._typeArguments_in_superSuffix6833);
					typeArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(1127, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_superSuffix6854); if (state.failed) return;
				DebugLocation(1128, 9);
				// Java.g:1128:9: ( arguments )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, false);
				int LA139_1 = input.LA(1);

				if ((LA139_1==LPAREN))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1128:10: arguments
					{
					DebugLocation(1128, 10);
					PushFollow(Follow._arguments_in_superSuffix6865);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(139); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("superSuffix", 90);
			LeaveRule("superSuffix", 90);
			LeaveRule_superSuffix();
			if (state.backtracking > 0) { Memoize(input, 90, superSuffix_StartIndex); }

		}
		DebugLocation(1130, 4);
		} finally { DebugExitRule(GrammarFileName, "superSuffix"); }
		return;

	}
	// $ANTLR end "superSuffix"

	partial void EnterRule_identifierSuffix();
	partial void LeaveRule_identifierSuffix();
	// $ANTLR start "identifierSuffix"
	// Java.g:1133:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator );
	[GrammarRule("identifierSuffix")]
	private void identifierSuffix()
	{
		EnterRule_identifierSuffix();
		EnterRule("identifierSuffix", 91);
		TraceIn("identifierSuffix", 91);
		int identifierSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "identifierSuffix");
		DebugLocation(1133, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return; }

			// Java.g:1134:5: ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator )
			int alt143=8;
			try { DebugEnterDecision(143, false);
			switch (input.LA(1))
			{
			case LBRACKET:
				{
				int LA143_2 = input.LA(2);

				if ((LA143_2==RBRACKET))
				{
					alt143 = 1;
				}
				else if ((LA143_2==BANG||LA143_2==BOOLEAN||LA143_2==BYTE||(LA143_2>=CHAR && LA143_2<=CHARLITERAL)||(LA143_2>=DOUBLE && LA143_2<=DOUBLELITERAL)||LA143_2==FALSE||(LA143_2>=FLOAT && LA143_2<=FLOATLITERAL)||LA143_2==IDENTIFIER||LA143_2==INT||LA143_2==INTLITERAL||(LA143_2>=LONG && LA143_2<=LPAREN)||(LA143_2>=NEW && LA143_2<=NULL)||LA143_2==PLUS||LA143_2==PLUSPLUS||LA143_2==SHORT||(LA143_2>=STRINGLITERAL && LA143_2<=SUB)||(LA143_2>=SUBSUB && LA143_2<=SUPER)||LA143_2==THIS||LA143_2==TILDE||LA143_2==TRUE||LA143_2==VOID))
				{
					alt143 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 143, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				alt143 = 3;
				}
				break;
			case DOT:
				{
				switch (input.LA(2))
				{
				case CLASS:
					{
					alt143 = 4;
					}
					break;
				case THIS:
					{
					alt143 = 6;
					}
					break;
				case SUPER:
					{
					alt143 = 7;
					}
					break;
				case NEW:
					{
					alt143 = 8;
					}
					break;
				case LT:
					{
					alt143 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 143, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 143, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1134:9: ( '[' ']' )+ '.' 'class'
				{
				DebugLocation(1134, 9);
				// Java.g:1134:9: ( '[' ']' )+
				int cnt141=0;
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=2;
					try { DebugEnterDecision(141, false);
					int LA141_1 = input.LA(1);

					if ((LA141_1==LBRACKET))
					{
						alt141 = 1;
					}


					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1134:10: '[' ']'
						{
						DebugLocation(1134, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix6898); if (state.failed) return;
						DebugLocation(1134, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix6900); if (state.failed) return;

						}
						break;

					default:
						if (cnt141 >= 1)
							goto loop141;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee141 = new EarlyExitException( 141, input );
						DebugRecognitionException(eee141);
						throw eee141;
					}
					cnt141++;
				}
				loop141:
					;

				} finally { DebugExitSubRule(141); }

				DebugLocation(1136, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix6921); if (state.failed) return;
				DebugLocation(1136, 13);
				Match(input,CLASS,Follow._CLASS_in_identifierSuffix6923); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1137:9: ( '[' expression ']' )+
				{
				DebugLocation(1137, 9);
				// Java.g:1137:9: ( '[' expression ']' )+
				int cnt142=0;
				try { DebugEnterSubRule(142);
				while (true)
				{
					int alt142=2;
					try { DebugEnterDecision(142, false);
					int LA142_1 = input.LA(1);

					if ((LA142_1==LBRACKET))
					{
						int LA142_2 = input.LA(2);

						if ((EvaluatePredicate(synpred224_Java_fragment)))
						{
							alt142 = 1;
						}


					}


					} finally { DebugExitDecision(142); }
					switch (alt142)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1137:10: '[' expression ']'
						{
						DebugLocation(1137, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix6934); if (state.failed) return;
						DebugLocation(1137, 14);
						PushFollow(Follow._expression_in_identifierSuffix6936);
						expression();
						PopFollow();
						if (state.failed) return;
						DebugLocation(1137, 25);
						Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix6938); if (state.failed) return;

						}
						break;

					default:
						if (cnt142 >= 1)
							goto loop142;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee142 = new EarlyExitException( 142, input );
						DebugRecognitionException(eee142);
						throw eee142;
					}
					cnt142++;
				}
				loop142:
					;

				} finally { DebugExitSubRule(142); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1139:9: arguments
				{
				DebugLocation(1139, 9);
				PushFollow(Follow._arguments_in_identifierSuffix6959);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1140:9: '.' 'class'
				{
				DebugLocation(1140, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix6969); if (state.failed) return;
				DebugLocation(1140, 13);
				Match(input,CLASS,Follow._CLASS_in_identifierSuffix6971); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1141:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
				{
				DebugLocation(1141, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix6981); if (state.failed) return;
				DebugLocation(1141, 13);
				PushFollow(Follow._nonWildcardTypeArguments_in_identifierSuffix6983);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1141, 38);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierSuffix6985); if (state.failed) return;
				DebugLocation(1141, 49);
				PushFollow(Follow._arguments_in_identifierSuffix6987);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1142:9: '.' 'this'
				{
				DebugLocation(1142, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix6997); if (state.failed) return;
				DebugLocation(1142, 13);
				Match(input,THIS,Follow._THIS_in_identifierSuffix6999); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1143:9: '.' 'super' arguments
				{
				DebugLocation(1143, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix7009); if (state.failed) return;
				DebugLocation(1143, 13);
				Match(input,SUPER,Follow._SUPER_in_identifierSuffix7011); if (state.failed) return;
				DebugLocation(1143, 21);
				PushFollow(Follow._arguments_in_identifierSuffix7013);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1144:9: innerCreator
				{
				DebugLocation(1144, 9);
				PushFollow(Follow._innerCreator_in_identifierSuffix7023);
				innerCreator();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifierSuffix", 91);
			LeaveRule("identifierSuffix", 91);
			LeaveRule_identifierSuffix();
			if (state.backtracking > 0) { Memoize(input, 91, identifierSuffix_StartIndex); }

		}
		DebugLocation(1145, 4);
		} finally { DebugExitRule(GrammarFileName, "identifierSuffix"); }
		return;

	}
	// $ANTLR end "identifierSuffix"

	partial void EnterRule_selector();
	partial void LeaveRule_selector();
	// $ANTLR start "selector"
	// Java.g:1148:1: selector : ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' );
	[GrammarRule("selector")]
	private void selector()
	{
		EnterRule_selector();
		EnterRule("selector", 92);
		TraceIn("selector", 92);
		int selector_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(1148, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return; }

			// Java.g:1149:5: ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' )
			int alt145=5;
			try { DebugEnterDecision(145, false);
			int LA145_1 = input.LA(1);

			if ((LA145_1==DOT))
			{
				switch (input.LA(2))
				{
				case IDENTIFIER:
					{
					alt145 = 1;
					}
					break;
				case THIS:
					{
					alt145 = 2;
					}
					break;
				case SUPER:
					{
					alt145 = 3;
					}
					break;
				case NEW:
					{
					alt145 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 145, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA145_1==LBRACKET))
			{
				alt145 = 5;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 145, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1149:9: '.' IDENTIFIER ( arguments )?
				{
				DebugLocation(1149, 9);
				Match(input,DOT,Follow._DOT_in_selector7045); if (state.failed) return;
				DebugLocation(1149, 13);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_selector7047); if (state.failed) return;
				DebugLocation(1150, 9);
				// Java.g:1150:9: ( arguments )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				int LA144_1 = input.LA(1);

				if ((LA144_1==LPAREN))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1150:10: arguments
					{
					DebugLocation(1150, 10);
					PushFollow(Follow._arguments_in_selector7058);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(144); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1152:9: '.' 'this'
				{
				DebugLocation(1152, 9);
				Match(input,DOT,Follow._DOT_in_selector7079); if (state.failed) return;
				DebugLocation(1152, 13);
				Match(input,THIS,Follow._THIS_in_selector7081); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1153:9: '.' 'super' superSuffix
				{
				DebugLocation(1153, 9);
				Match(input,DOT,Follow._DOT_in_selector7091); if (state.failed) return;
				DebugLocation(1153, 13);
				Match(input,SUPER,Follow._SUPER_in_selector7093); if (state.failed) return;
				DebugLocation(1154, 9);
				PushFollow(Follow._superSuffix_in_selector7103);
				superSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1155:9: innerCreator
				{
				DebugLocation(1155, 9);
				PushFollow(Follow._innerCreator_in_selector7113);
				innerCreator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1156:9: '[' expression ']'
				{
				DebugLocation(1156, 9);
				Match(input,LBRACKET,Follow._LBRACKET_in_selector7123); if (state.failed) return;
				DebugLocation(1156, 13);
				PushFollow(Follow._expression_in_selector7125);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1156, 24);
				Match(input,RBRACKET,Follow._RBRACKET_in_selector7127); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selector", 92);
			LeaveRule("selector", 92);
			LeaveRule_selector();
			if (state.backtracking > 0) { Memoize(input, 92, selector_StartIndex); }

		}
		DebugLocation(1157, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return;

	}
	// $ANTLR end "selector"

	partial void EnterRule_creator();
	partial void LeaveRule_creator();
	// $ANTLR start "creator"
	// Java.g:1159:1: creator : ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator );
	[GrammarRule("creator")]
	private void creator()
	{
		EnterRule_creator();
		EnterRule("creator", 93);
		TraceIn("creator", 93);
		int creator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "creator");
		DebugLocation(1159, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return; }

			// Java.g:1160:5: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator )
			int alt146=3;
			try { DebugEnterDecision(146, false);
			int LA146_1 = input.LA(1);

			if ((LA146_1==NEW))
			{
				int LA146_2 = input.LA(2);

				if ((EvaluatePredicate(synpred236_Java_fragment)))
				{
					alt146 = 1;
				}
				else if ((EvaluatePredicate(synpred237_Java_fragment)))
				{
					alt146 = 2;
				}
				else if ((true))
				{
					alt146 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 146, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 146, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1160:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
				{
				DebugLocation(1160, 9);
				Match(input,NEW,Follow._NEW_in_creator7147); if (state.failed) return;
				DebugLocation(1160, 15);
				PushFollow(Follow._nonWildcardTypeArguments_in_creator7149);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1160, 40);
				PushFollow(Follow._classOrInterfaceType_in_creator7151);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1160, 61);
				PushFollow(Follow._classCreatorRest_in_creator7153);
				classCreatorRest();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1161:9: 'new' classOrInterfaceType classCreatorRest
				{
				DebugLocation(1161, 9);
				Match(input,NEW,Follow._NEW_in_creator7163); if (state.failed) return;
				DebugLocation(1161, 15);
				PushFollow(Follow._classOrInterfaceType_in_creator7165);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1161, 36);
				PushFollow(Follow._classCreatorRest_in_creator7167);
				classCreatorRest();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1162:9: arrayCreator
				{
				DebugLocation(1162, 9);
				PushFollow(Follow._arrayCreator_in_creator7177);
				arrayCreator();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("creator", 93);
			LeaveRule("creator", 93);
			LeaveRule_creator();
			if (state.backtracking > 0) { Memoize(input, 93, creator_StartIndex); }

		}
		DebugLocation(1163, 4);
		} finally { DebugExitRule(GrammarFileName, "creator"); }
		return;

	}
	// $ANTLR end "creator"

	partial void EnterRule_arrayCreator();
	partial void LeaveRule_arrayCreator();
	// $ANTLR start "arrayCreator"
	// Java.g:1165:1: arrayCreator : ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* );
	[GrammarRule("arrayCreator")]
	private void arrayCreator()
	{
		EnterRule_arrayCreator();
		EnterRule("arrayCreator", 94);
		TraceIn("arrayCreator", 94);
		int arrayCreator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayCreator");
		DebugLocation(1165, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return; }

			// Java.g:1166:5: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* )
			int alt150=2;
			try { DebugEnterDecision(150, false);
			int LA150_1 = input.LA(1);

			if ((LA150_1==NEW))
			{
				int LA150_2 = input.LA(2);

				if ((EvaluatePredicate(synpred239_Java_fragment)))
				{
					alt150 = 1;
				}
				else if ((true))
				{
					alt150 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 150, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 150, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1166:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
				{
				DebugLocation(1166, 9);
				Match(input,NEW,Follow._NEW_in_arrayCreator7197); if (state.failed) return;
				DebugLocation(1166, 15);
				PushFollow(Follow._createdName_in_arrayCreator7199);
				createdName();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1167, 9);
				Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7209); if (state.failed) return;
				DebugLocation(1167, 13);
				Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7211); if (state.failed) return;
				DebugLocation(1168, 9);
				// Java.g:1168:9: ( '[' ']' )*
				try { DebugEnterSubRule(147);
				while (true)
				{
					int alt147=2;
					try { DebugEnterDecision(147, false);
					int LA147_1 = input.LA(1);

					if ((LA147_1==LBRACKET))
					{
						alt147 = 1;
					}


					} finally { DebugExitDecision(147); }
					switch ( alt147 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1168:10: '[' ']'
						{
						DebugLocation(1168, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7222); if (state.failed) return;
						DebugLocation(1168, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7224); if (state.failed) return;

						}
						break;

					default:
						goto loop147;
					}
				}

				loop147:
					;

				} finally { DebugExitSubRule(147); }

				DebugLocation(1170, 9);
				PushFollow(Follow._arrayInitializer_in_arrayCreator7245);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1172:9: 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )*
				{
				DebugLocation(1172, 9);
				Match(input,NEW,Follow._NEW_in_arrayCreator7256); if (state.failed) return;
				DebugLocation(1172, 15);
				PushFollow(Follow._createdName_in_arrayCreator7258);
				createdName();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1173, 9);
				Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7268); if (state.failed) return;
				DebugLocation(1173, 13);
				PushFollow(Follow._expression_in_arrayCreator7270);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1174, 9);
				Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7280); if (state.failed) return;
				DebugLocation(1175, 9);
				// Java.g:1175:9: ( '[' expression ']' )*
				try { DebugEnterSubRule(148);
				while (true)
				{
					int alt148=2;
					try { DebugEnterDecision(148, false);
					int LA148_1 = input.LA(1);

					if ((LA148_1==LBRACKET))
					{
						int LA148_2 = input.LA(2);

						if ((EvaluatePredicate(synpred240_Java_fragment)))
						{
							alt148 = 1;
						}


					}


					} finally { DebugExitDecision(148); }
					switch ( alt148 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1175:13: '[' expression ']'
						{
						DebugLocation(1175, 13);
						Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7294); if (state.failed) return;
						DebugLocation(1175, 17);
						PushFollow(Follow._expression_in_arrayCreator7296);
						expression();
						PopFollow();
						if (state.failed) return;
						DebugLocation(1176, 13);
						Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7310); if (state.failed) return;

						}
						break;

					default:
						goto loop148;
					}
				}

				loop148:
					;

				} finally { DebugExitSubRule(148); }

				DebugLocation(1178, 9);
				// Java.g:1178:9: ( '[' ']' )*
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_1 = input.LA(1);

					if ((LA149_1==LBRACKET))
					{
						int LA149_2 = input.LA(2);

						if ((LA149_2==RBRACKET))
						{
							alt149 = 1;
						}


					}


					} finally { DebugExitDecision(149); }
					switch ( alt149 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1178:10: '[' ']'
						{
						DebugLocation(1178, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7332); if (state.failed) return;
						DebugLocation(1178, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7334); if (state.failed) return;

						}
						break;

					default:
						goto loop149;
					}
				}

				loop149:
					;

				} finally { DebugExitSubRule(149); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayCreator", 94);
			LeaveRule("arrayCreator", 94);
			LeaveRule_arrayCreator();
			if (state.backtracking > 0) { Memoize(input, 94, arrayCreator_StartIndex); }

		}
		DebugLocation(1180, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayCreator"); }
		return;

	}
	// $ANTLR end "arrayCreator"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// Java.g:1182:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private void variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 95);
		TraceIn("variableInitializer", 95);
		int variableInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(1182, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return; }

			// Java.g:1183:5: ( arrayInitializer | expression )
			int alt151=2;
			try { DebugEnterDecision(151, false);
			int LA151_1 = input.LA(1);

			if ((LA151_1==LBRACE))
			{
				alt151 = 1;
			}
			else if ((LA151_1==BANG||LA151_1==BOOLEAN||LA151_1==BYTE||(LA151_1>=CHAR && LA151_1<=CHARLITERAL)||(LA151_1>=DOUBLE && LA151_1<=DOUBLELITERAL)||LA151_1==FALSE||(LA151_1>=FLOAT && LA151_1<=FLOATLITERAL)||LA151_1==IDENTIFIER||LA151_1==INT||LA151_1==INTLITERAL||(LA151_1>=LONG && LA151_1<=LPAREN)||(LA151_1>=NEW && LA151_1<=NULL)||LA151_1==PLUS||LA151_1==PLUSPLUS||LA151_1==SHORT||(LA151_1>=STRINGLITERAL && LA151_1<=SUB)||(LA151_1>=SUBSUB && LA151_1<=SUPER)||LA151_1==THIS||LA151_1==TILDE||LA151_1==TRUE||LA151_1==VOID))
			{
				alt151 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1183:9: arrayInitializer
				{
				DebugLocation(1183, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer7365);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1184:9: expression
				{
				DebugLocation(1184, 9);
				PushFollow(Follow._expression_in_variableInitializer7375);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableInitializer", 95);
			LeaveRule("variableInitializer", 95);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 95, variableInitializer_StartIndex); }

		}
		DebugLocation(1185, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// Java.g:1187:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' ;
	[GrammarRule("arrayInitializer")]
	private void arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 96);
		TraceIn("arrayInitializer", 96);
		int arrayInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(1187, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return; }

			// Java.g:1188:5: ( '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:1188:9: '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}'
			{
			DebugLocation(1188, 9);
			Match(input,LBRACE,Follow._LBRACE_in_arrayInitializer7395); if (state.failed) return;
			DebugLocation(1189, 13);
			// Java.g:1189:13: ( variableInitializer ( ',' variableInitializer )* )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_1 = input.LA(1);

			if ((LA153_1==BANG||LA153_1==BOOLEAN||LA153_1==BYTE||(LA153_1>=CHAR && LA153_1<=CHARLITERAL)||(LA153_1>=DOUBLE && LA153_1<=DOUBLELITERAL)||LA153_1==FALSE||(LA153_1>=FLOAT && LA153_1<=FLOATLITERAL)||LA153_1==IDENTIFIER||LA153_1==INT||LA153_1==INTLITERAL||LA153_1==LBRACE||(LA153_1>=LONG && LA153_1<=LPAREN)||(LA153_1>=NEW && LA153_1<=NULL)||LA153_1==PLUS||LA153_1==PLUSPLUS||LA153_1==SHORT||(LA153_1>=STRINGLITERAL && LA153_1<=SUB)||(LA153_1>=SUBSUB && LA153_1<=SUPER)||LA153_1==THIS||LA153_1==TILDE||LA153_1==TRUE||LA153_1==VOID))
			{
				alt153 = 1;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1189:14: variableInitializer ( ',' variableInitializer )*
				{
				DebugLocation(1189, 14);
				PushFollow(Follow._variableInitializer_in_arrayInitializer7411);
				variableInitializer();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1190, 17);
				// Java.g:1190:17: ( ',' variableInitializer )*
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_1 = input.LA(1);

					if ((LA152_1==COMMA))
					{
						int LA152_2 = input.LA(2);

						if ((LA152_2==BANG||LA152_2==BOOLEAN||LA152_2==BYTE||(LA152_2>=CHAR && LA152_2<=CHARLITERAL)||(LA152_2>=DOUBLE && LA152_2<=DOUBLELITERAL)||LA152_2==FALSE||(LA152_2>=FLOAT && LA152_2<=FLOATLITERAL)||LA152_2==IDENTIFIER||LA152_2==INT||LA152_2==INTLITERAL||LA152_2==LBRACE||(LA152_2>=LONG && LA152_2<=LPAREN)||(LA152_2>=NEW && LA152_2<=NULL)||LA152_2==PLUS||LA152_2==PLUSPLUS||LA152_2==SHORT||(LA152_2>=STRINGLITERAL && LA152_2<=SUB)||(LA152_2>=SUBSUB && LA152_2<=SUPER)||LA152_2==THIS||LA152_2==TILDE||LA152_2==TRUE||LA152_2==VOID))
						{
							alt152 = 1;
						}


					}


					} finally { DebugExitDecision(152); }
					switch ( alt152 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1190:18: ',' variableInitializer
						{
						DebugLocation(1190, 18);
						Match(input,COMMA,Follow._COMMA_in_arrayInitializer7430); if (state.failed) return;
						DebugLocation(1190, 22);
						PushFollow(Follow._variableInitializer_in_arrayInitializer7432);
						variableInitializer();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop152;
					}
				}

				loop152:
					;

				} finally { DebugExitSubRule(152); }


				}
				break;

			}
			} finally { DebugExitSubRule(153); }

			DebugLocation(1193, 13);
			// Java.g:1193:13: ( ',' )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_1 = input.LA(1);

			if ((LA154_1==COMMA))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1193:14: ','
				{
				DebugLocation(1193, 14);
				Match(input,COMMA,Follow._COMMA_in_arrayInitializer7482); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(1194, 9);
			Match(input,RBRACE,Follow._RBRACE_in_arrayInitializer7495); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayInitializer", 96);
			LeaveRule("arrayInitializer", 96);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 96, arrayInitializer_StartIndex); }

		}
		DebugLocation(1195, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_createdName();
	partial void LeaveRule_createdName();
	// $ANTLR start "createdName"
	// Java.g:1198:1: createdName : ( classOrInterfaceType | primitiveType );
	[GrammarRule("createdName")]
	private void createdName()
	{
		EnterRule_createdName();
		EnterRule("createdName", 97);
		TraceIn("createdName", 97);
		int createdName_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "createdName");
		DebugLocation(1198, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return; }

			// Java.g:1199:5: ( classOrInterfaceType | primitiveType )
			int alt155=2;
			try { DebugEnterDecision(155, false);
			int LA155_1 = input.LA(1);

			if ((LA155_1==IDENTIFIER))
			{
				alt155 = 1;
			}
			else if ((LA155_1==BOOLEAN||LA155_1==BYTE||LA155_1==CHAR||LA155_1==DOUBLE||LA155_1==FLOAT||LA155_1==INT||LA155_1==LONG||LA155_1==SHORT))
			{
				alt155 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 155, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1199:9: classOrInterfaceType
				{
				DebugLocation(1199, 9);
				PushFollow(Follow._classOrInterfaceType_in_createdName7529);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1200:9: primitiveType
				{
				DebugLocation(1200, 9);
				PushFollow(Follow._primitiveType_in_createdName7539);
				primitiveType();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("createdName", 97);
			LeaveRule("createdName", 97);
			LeaveRule_createdName();
			if (state.backtracking > 0) { Memoize(input, 97, createdName_StartIndex); }

		}
		DebugLocation(1201, 4);
		} finally { DebugExitRule(GrammarFileName, "createdName"); }
		return;

	}
	// $ANTLR end "createdName"

	partial void EnterRule_innerCreator();
	partial void LeaveRule_innerCreator();
	// $ANTLR start "innerCreator"
	// Java.g:1203:1: innerCreator : '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest ;
	[GrammarRule("innerCreator")]
	private void innerCreator()
	{
		EnterRule_innerCreator();
		EnterRule("innerCreator", 98);
		TraceIn("innerCreator", 98);
		int innerCreator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "innerCreator");
		DebugLocation(1203, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return; }

			// Java.g:1204:5: ( '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1204:9: '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest
			{
			DebugLocation(1204, 9);
			Match(input,DOT,Follow._DOT_in_innerCreator7560); if (state.failed) return;
			DebugLocation(1204, 13);
			Match(input,NEW,Follow._NEW_in_innerCreator7562); if (state.failed) return;
			DebugLocation(1205, 9);
			// Java.g:1205:9: ( nonWildcardTypeArguments )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_1 = input.LA(1);

			if ((LA156_1==LT))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1205:10: nonWildcardTypeArguments
				{
				DebugLocation(1205, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_innerCreator7573);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(156); }

			DebugLocation(1207, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_innerCreator7594); if (state.failed) return;
			DebugLocation(1208, 9);
			// Java.g:1208:9: ( typeArguments )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if ((LA157_1==LT))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1208:10: typeArguments
				{
				DebugLocation(1208, 10);
				PushFollow(Follow._typeArguments_in_innerCreator7605);
				typeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(1210, 9);
			PushFollow(Follow._classCreatorRest_in_innerCreator7626);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("innerCreator", 98);
			LeaveRule("innerCreator", 98);
			LeaveRule_innerCreator();
			if (state.backtracking > 0) { Memoize(input, 98, innerCreator_StartIndex); }

		}
		DebugLocation(1211, 4);
		} finally { DebugExitRule(GrammarFileName, "innerCreator"); }
		return;

	}
	// $ANTLR end "innerCreator"

	partial void EnterRule_classCreatorRest();
	partial void LeaveRule_classCreatorRest();
	// $ANTLR start "classCreatorRest"
	// Java.g:1214:1: classCreatorRest : arguments ( classBody )? ;
	[GrammarRule("classCreatorRest")]
	private void classCreatorRest()
	{
		EnterRule_classCreatorRest();
		EnterRule("classCreatorRest", 99);
		TraceIn("classCreatorRest", 99);
		int classCreatorRest_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classCreatorRest");
		DebugLocation(1214, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return; }

			// Java.g:1215:5: ( arguments ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:1215:9: arguments ( classBody )?
			{
			DebugLocation(1215, 9);
			PushFollow(Follow._arguments_in_classCreatorRest7647);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1216, 9);
			// Java.g:1216:9: ( classBody )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, false);
			int LA158_1 = input.LA(1);

			if ((LA158_1==LBRACE))
			{
				alt158 = 1;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1216:10: classBody
				{
				DebugLocation(1216, 10);
				PushFollow(Follow._classBody_in_classCreatorRest7658);
				classBody();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(158); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classCreatorRest", 99);
			LeaveRule("classCreatorRest", 99);
			LeaveRule_classCreatorRest();
			if (state.backtracking > 0) { Memoize(input, 99, classCreatorRest_StartIndex); }

		}
		DebugLocation(1218, 4);
		} finally { DebugExitRule(GrammarFileName, "classCreatorRest"); }
		return;

	}
	// $ANTLR end "classCreatorRest"

	partial void EnterRule_nonWildcardTypeArguments();
	partial void LeaveRule_nonWildcardTypeArguments();
	// $ANTLR start "nonWildcardTypeArguments"
	// Java.g:1221:1: nonWildcardTypeArguments : '<' typeList '>' ;
	[GrammarRule("nonWildcardTypeArguments")]
	private void nonWildcardTypeArguments()
	{
		EnterRule_nonWildcardTypeArguments();
		EnterRule("nonWildcardTypeArguments", 100);
		TraceIn("nonWildcardTypeArguments", 100);
		int nonWildcardTypeArguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "nonWildcardTypeArguments");
		DebugLocation(1221, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return; }

			// Java.g:1222:5: ( '<' typeList '>' )
			DebugEnterAlt(1);
			// Java.g:1222:9: '<' typeList '>'
			{
			DebugLocation(1222, 9);
			Match(input,LT,Follow._LT_in_nonWildcardTypeArguments7690); if (state.failed) return;
			DebugLocation(1222, 13);
			PushFollow(Follow._typeList_in_nonWildcardTypeArguments7692);
			typeList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1223, 9);
			Match(input,GT,Follow._GT_in_nonWildcardTypeArguments7702); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("nonWildcardTypeArguments", 100);
			LeaveRule("nonWildcardTypeArguments", 100);
			LeaveRule_nonWildcardTypeArguments();
			if (state.backtracking > 0) { Memoize(input, 100, nonWildcardTypeArguments_StartIndex); }

		}
		DebugLocation(1224, 4);
		} finally { DebugExitRule(GrammarFileName, "nonWildcardTypeArguments"); }
		return;

	}
	// $ANTLR end "nonWildcardTypeArguments"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// Java.g:1226:1: arguments : '(' ( expressionList )? ')' ;
	[GrammarRule("arguments")]
	private void arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 101);
		TraceIn("arguments", 101);
		int arguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1226, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return; }

			// Java.g:1227:5: ( '(' ( expressionList )? ')' )
			DebugEnterAlt(1);
			// Java.g:1227:9: '(' ( expressionList )? ')'
			{
			DebugLocation(1227, 9);
			Match(input,LPAREN,Follow._LPAREN_in_arguments7722); if (state.failed) return;
			DebugLocation(1227, 13);
			// Java.g:1227:13: ( expressionList )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, false);
			int LA159_1 = input.LA(1);

			if ((LA159_1==BANG||LA159_1==BOOLEAN||LA159_1==BYTE||(LA159_1>=CHAR && LA159_1<=CHARLITERAL)||(LA159_1>=DOUBLE && LA159_1<=DOUBLELITERAL)||LA159_1==FALSE||(LA159_1>=FLOAT && LA159_1<=FLOATLITERAL)||LA159_1==IDENTIFIER||LA159_1==INT||LA159_1==INTLITERAL||(LA159_1>=LONG && LA159_1<=LPAREN)||(LA159_1>=NEW && LA159_1<=NULL)||LA159_1==PLUS||LA159_1==PLUSPLUS||LA159_1==SHORT||(LA159_1>=STRINGLITERAL && LA159_1<=SUB)||(LA159_1>=SUBSUB && LA159_1<=SUPER)||LA159_1==THIS||LA159_1==TILDE||LA159_1==TRUE||LA159_1==VOID))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1227:14: expressionList
				{
				DebugLocation(1227, 14);
				PushFollow(Follow._expressionList_in_arguments7725);
				expressionList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(159); }

			DebugLocation(1228, 12);
			Match(input,RPAREN,Follow._RPAREN_in_arguments7738); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 101);
			LeaveRule("arguments", 101);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 101, arguments_StartIndex); }

		}
		DebugLocation(1229, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Java.g:1231:1: literal : ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private void literal()
	{
		EnterRule_literal();
		EnterRule("literal", 102);
		TraceIn("literal", 102);
		int literal_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1231, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return; }

			// Java.g:1232:5: ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// Java.g:
			{
			DebugLocation(1232, 5);
			if (input.LA(1)==CHARLITERAL||input.LA(1)==DOUBLELITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATLITERAL||input.LA(1)==INTLITERAL||input.LA(1)==LONGLITERAL||input.LA(1)==NULL||input.LA(1)==STRINGLITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 102);
			LeaveRule("literal", 102);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 102, literal_StartIndex); }

		}
		DebugLocation(1241, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return;

	}
	// $ANTLR end "literal"

	partial void EnterRule_classHeader();
	partial void LeaveRule_classHeader();
	// $ANTLR start "classHeader"
	// Java.g:1247:1: classHeader : modifiers 'class' IDENTIFIER ;
	[GrammarRule("classHeader")]
	private void classHeader()
	{
		EnterRule_classHeader();
		EnterRule("classHeader", 103);
		TraceIn("classHeader", 103);
		int classHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classHeader");
		DebugLocation(1247, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return; }

			// Java.g:1248:5: ( modifiers 'class' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1248:9: modifiers 'class' IDENTIFIER
			{
			DebugLocation(1248, 9);
			PushFollow(Follow._modifiers_in_classHeader7862);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1248, 19);
			Match(input,CLASS,Follow._CLASS_in_classHeader7864); if (state.failed) return;
			DebugLocation(1248, 27);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classHeader7866); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classHeader", 103);
			LeaveRule("classHeader", 103);
			LeaveRule_classHeader();
			if (state.backtracking > 0) { Memoize(input, 103, classHeader_StartIndex); }

		}
		DebugLocation(1249, 4);
		} finally { DebugExitRule(GrammarFileName, "classHeader"); }
		return;

	}
	// $ANTLR end "classHeader"

	partial void EnterRule_enumHeader();
	partial void LeaveRule_enumHeader();
	// $ANTLR start "enumHeader"
	// Java.g:1251:1: enumHeader : modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER ;
	[GrammarRule("enumHeader")]
	private void enumHeader()
	{
		EnterRule_enumHeader();
		EnterRule("enumHeader", 104);
		TraceIn("enumHeader", 104);
		int enumHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumHeader");
		DebugLocation(1251, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return; }

			// Java.g:1252:5: ( modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1252:9: modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER
			{
			DebugLocation(1252, 9);
			PushFollow(Follow._modifiers_in_enumHeader7886);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1252, 19);
			if (input.LA(1)==ENUM||input.LA(1)==IDENTIFIER)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1252, 39);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumHeader7894); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumHeader", 104);
			LeaveRule("enumHeader", 104);
			LeaveRule_enumHeader();
			if (state.backtracking > 0) { Memoize(input, 104, enumHeader_StartIndex); }

		}
		DebugLocation(1253, 4);
		} finally { DebugExitRule(GrammarFileName, "enumHeader"); }
		return;

	}
	// $ANTLR end "enumHeader"

	partial void EnterRule_interfaceHeader();
	partial void LeaveRule_interfaceHeader();
	// $ANTLR start "interfaceHeader"
	// Java.g:1255:1: interfaceHeader : modifiers 'interface' IDENTIFIER ;
	[GrammarRule("interfaceHeader")]
	private void interfaceHeader()
	{
		EnterRule_interfaceHeader();
		EnterRule("interfaceHeader", 105);
		TraceIn("interfaceHeader", 105);
		int interfaceHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceHeader");
		DebugLocation(1255, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return; }

			// Java.g:1256:5: ( modifiers 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1256:9: modifiers 'interface' IDENTIFIER
			{
			DebugLocation(1256, 9);
			PushFollow(Follow._modifiers_in_interfaceHeader7914);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1256, 19);
			Match(input,INTERFACE,Follow._INTERFACE_in_interfaceHeader7916); if (state.failed) return;
			DebugLocation(1256, 31);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceHeader7918); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceHeader", 105);
			LeaveRule("interfaceHeader", 105);
			LeaveRule_interfaceHeader();
			if (state.backtracking > 0) { Memoize(input, 105, interfaceHeader_StartIndex); }

		}
		DebugLocation(1257, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceHeader"); }
		return;

	}
	// $ANTLR end "interfaceHeader"

	partial void EnterRule_annotationHeader();
	partial void LeaveRule_annotationHeader();
	// $ANTLR start "annotationHeader"
	// Java.g:1259:1: annotationHeader : modifiers '@' 'interface' IDENTIFIER ;
	[GrammarRule("annotationHeader")]
	private void annotationHeader()
	{
		EnterRule_annotationHeader();
		EnterRule("annotationHeader", 106);
		TraceIn("annotationHeader", 106);
		int annotationHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationHeader");
		DebugLocation(1259, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return; }

			// Java.g:1260:5: ( modifiers '@' 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1260:9: modifiers '@' 'interface' IDENTIFIER
			{
			DebugLocation(1260, 9);
			PushFollow(Follow._modifiers_in_annotationHeader7938);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1260, 19);
			Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationHeader7940); if (state.failed) return;
			DebugLocation(1260, 23);
			Match(input,INTERFACE,Follow._INTERFACE_in_annotationHeader7942); if (state.failed) return;
			DebugLocation(1260, 35);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationHeader7944); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationHeader", 106);
			LeaveRule("annotationHeader", 106);
			LeaveRule_annotationHeader();
			if (state.backtracking > 0) { Memoize(input, 106, annotationHeader_StartIndex); }

		}
		DebugLocation(1261, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationHeader"); }
		return;

	}
	// $ANTLR end "annotationHeader"

	partial void EnterRule_typeHeader();
	partial void LeaveRule_typeHeader();
	// $ANTLR start "typeHeader"
	// Java.g:1263:1: typeHeader : modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER ;
	[GrammarRule("typeHeader")]
	private void typeHeader()
	{
		EnterRule_typeHeader();
		EnterRule("typeHeader", 107);
		TraceIn("typeHeader", 107);
		int typeHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeHeader");
		DebugLocation(1263, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return; }

			// Java.g:1264:5: ( modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1264:9: modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER
			{
			DebugLocation(1264, 9);
			PushFollow(Follow._modifiers_in_typeHeader7964);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1264, 19);
			// Java.g:1264:19: ( 'class' | 'enum' | ( ( '@' )? 'interface' ) )
			int alt161=3;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt161 = 1;
				}
				break;
			case ENUM:
				{
				alt161 = 2;
				}
				break;
			case INTERFACE:
			case MONKEYS_AT:
				{
				alt161 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 161, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1264:20: 'class'
				{
				DebugLocation(1264, 20);
				Match(input,CLASS,Follow._CLASS_in_typeHeader7967); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1264:28: 'enum'
				{
				DebugLocation(1264, 28);
				Match(input,ENUM,Follow._ENUM_in_typeHeader7969); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1264:35: ( ( '@' )? 'interface' )
				{
				DebugLocation(1264, 35);
				// Java.g:1264:35: ( ( '@' )? 'interface' )
				DebugEnterAlt(1);
				// Java.g:1264:36: ( '@' )? 'interface'
				{
				DebugLocation(1264, 36);
				// Java.g:1264:36: ( '@' )?
				int alt160=2;
				try { DebugEnterSubRule(160);
				try { DebugEnterDecision(160, false);
				int LA160_1 = input.LA(1);

				if ((LA160_1==MONKEYS_AT))
				{
					alt160 = 1;
				}
				} finally { DebugExitDecision(160); }
				switch (alt160)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1264:36: '@'
					{
					DebugLocation(1264, 36);
					Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_typeHeader7972); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(160); }

				DebugLocation(1264, 42);
				Match(input,INTERFACE,Follow._INTERFACE_in_typeHeader7976); if (state.failed) return;

				}


				}
				break;

			}
			} finally { DebugExitSubRule(161); }

			DebugLocation(1264, 56);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeHeader7980); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeHeader", 107);
			LeaveRule("typeHeader", 107);
			LeaveRule_typeHeader();
			if (state.backtracking > 0) { Memoize(input, 107, typeHeader_StartIndex); }

		}
		DebugLocation(1265, 4);
		} finally { DebugExitRule(GrammarFileName, "typeHeader"); }
		return;

	}
	// $ANTLR end "typeHeader"

	partial void EnterRule_methodHeader();
	partial void LeaveRule_methodHeader();
	// $ANTLR start "methodHeader"
	// Java.g:1267:1: methodHeader : modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' ;
	[GrammarRule("methodHeader")]
	private void methodHeader()
	{
		EnterRule_methodHeader();
		EnterRule("methodHeader", 108);
		TraceIn("methodHeader", 108);
		int methodHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "methodHeader");
		DebugLocation(1267, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return; }

			// Java.g:1268:5: ( modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' )
			DebugEnterAlt(1);
			// Java.g:1268:9: modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '('
			{
			DebugLocation(1268, 9);
			PushFollow(Follow._modifiers_in_methodHeader8000);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1268, 19);
			// Java.g:1268:19: ( typeParameters )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_1 = input.LA(1);

			if ((LA162_1==LT))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1268:19: typeParameters
				{
				DebugLocation(1268, 19);
				PushFollow(Follow._typeParameters_in_methodHeader8002);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(1268, 35);
			// Java.g:1268:35: ( type | 'void' )?
			int alt163=3;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA163_2 = input.LA(2);

				if ((LA163_2==DOT||LA163_2==IDENTIFIER||LA163_2==LBRACKET||LA163_2==LT))
				{
					alt163 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt163 = 1;
				}
				break;
			case VOID:
				{
				alt163 = 2;
				}
				break;
			}

			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1268:36: type
				{
				DebugLocation(1268, 36);
				PushFollow(Follow._type_in_methodHeader8006);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1268:41: 'void'
				{
				DebugLocation(1268, 41);
				Match(input,VOID,Follow._VOID_in_methodHeader8008); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(1268, 50);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodHeader8012); if (state.failed) return;
			DebugLocation(1268, 61);
			Match(input,LPAREN,Follow._LPAREN_in_methodHeader8014); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("methodHeader", 108);
			LeaveRule("methodHeader", 108);
			LeaveRule_methodHeader();
			if (state.backtracking > 0) { Memoize(input, 108, methodHeader_StartIndex); }

		}
		DebugLocation(1269, 4);
		} finally { DebugExitRule(GrammarFileName, "methodHeader"); }
		return;

	}
	// $ANTLR end "methodHeader"

	partial void EnterRule_fieldHeader();
	partial void LeaveRule_fieldHeader();
	// $ANTLR start "fieldHeader"
	// Java.g:1271:1: fieldHeader : modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("fieldHeader")]
	private void fieldHeader()
	{
		EnterRule_fieldHeader();
		EnterRule("fieldHeader", 109);
		TraceIn("fieldHeader", 109);
		int fieldHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "fieldHeader");
		DebugLocation(1271, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return; }

			// Java.g:1272:5: ( modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1272:9: modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			DebugLocation(1272, 9);
			PushFollow(Follow._modifiers_in_fieldHeader8034);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1272, 19);
			PushFollow(Follow._type_in_fieldHeader8036);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1272, 24);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_fieldHeader8038); if (state.failed) return;
			DebugLocation(1272, 35);
			// Java.g:1272:35: ( '[' ']' )*
			try { DebugEnterSubRule(164);
			while (true)
			{
				int alt164=2;
				try { DebugEnterDecision(164, false);
				int LA164_1 = input.LA(1);

				if ((LA164_1==LBRACKET))
				{
					alt164 = 1;
				}


				} finally { DebugExitDecision(164); }
				switch ( alt164 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1272:36: '[' ']'
					{
					DebugLocation(1272, 36);
					Match(input,LBRACKET,Follow._LBRACKET_in_fieldHeader8041); if (state.failed) return;
					DebugLocation(1272, 39);
					Match(input,RBRACKET,Follow._RBRACKET_in_fieldHeader8042); if (state.failed) return;

					}
					break;

				default:
					goto loop164;
				}
			}

			loop164:
				;

			} finally { DebugExitSubRule(164); }

			DebugLocation(1272, 45);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldHeader", 109);
			LeaveRule("fieldHeader", 109);
			LeaveRule_fieldHeader();
			if (state.backtracking > 0) { Memoize(input, 109, fieldHeader_StartIndex); }

		}
		DebugLocation(1273, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldHeader"); }
		return;

	}
	// $ANTLR end "fieldHeader"

	partial void EnterRule_localVariableHeader();
	partial void LeaveRule_localVariableHeader();
	// $ANTLR start "localVariableHeader"
	// Java.g:1275:1: localVariableHeader : variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("localVariableHeader")]
	private void localVariableHeader()
	{
		EnterRule_localVariableHeader();
		EnterRule("localVariableHeader", 110);
		TraceIn("localVariableHeader", 110);
		int localVariableHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableHeader");
		DebugLocation(1275, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return; }

			// Java.g:1276:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1276:9: variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			DebugLocation(1276, 9);
			PushFollow(Follow._variableModifiers_in_localVariableHeader8072);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1276, 27);
			PushFollow(Follow._type_in_localVariableHeader8074);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1276, 32);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableHeader8076); if (state.failed) return;
			DebugLocation(1276, 43);
			// Java.g:1276:43: ( '[' ']' )*
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, false);
				int LA165_1 = input.LA(1);

				if ((LA165_1==LBRACKET))
				{
					alt165 = 1;
				}


				} finally { DebugExitDecision(165); }
				switch ( alt165 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1276:44: '[' ']'
					{
					DebugLocation(1276, 44);
					Match(input,LBRACKET,Follow._LBRACKET_in_localVariableHeader8079); if (state.failed) return;
					DebugLocation(1276, 47);
					Match(input,RBRACKET,Follow._RBRACKET_in_localVariableHeader8080); if (state.failed) return;

					}
					break;

				default:
					goto loop165;
				}
			}

			loop165:
				;

			} finally { DebugExitSubRule(165); }

			DebugLocation(1276, 53);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableHeader", 110);
			LeaveRule("localVariableHeader", 110);
			LeaveRule_localVariableHeader();
			if (state.backtracking > 0) { Memoize(input, 110, localVariableHeader_StartIndex); }

		}
		DebugLocation(1277, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableHeader"); }
		return;

	}
	// $ANTLR end "localVariableHeader"

	partial void EnterRule_synpred2_Java_fragment();
	partial void LeaveRule_synpred2_Java_fragment();

	// $ANTLR start synpred2_Java
	public void synpred2_Java_fragment()
	{
		EnterRule_synpred2_Java_fragment();
		EnterRule("synpred2_Java_fragment", 112);
		TraceIn("synpred2_Java_fragment", 112);
		try
		{
			// Java.g:297:13: ( ( annotations )? packageDeclaration )
			DebugEnterAlt(1);
			// Java.g:297:13: ( annotations )? packageDeclaration
			{
			DebugLocation(297, 13);
			// Java.g:297:13: ( annotations )?
			int alt166=2;
			try { DebugEnterSubRule(166);
			try { DebugEnterDecision(166, false);
			int LA166_1 = input.LA(1);

			if ((LA166_1==MONKEYS_AT))
			{
				alt166 = 1;
			}
			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:297:14: annotations
				{
				DebugLocation(297, 14);
				PushFollow(Follow._annotations_in_synpred2_Java82);
				annotations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(166); }

			DebugLocation(299, 13);
			PushFollow(Follow._packageDeclaration_in_synpred2_Java111);
			packageDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Java_fragment", 112);
			LeaveRule("synpred2_Java_fragment", 112);
			LeaveRule_synpred2_Java_fragment();
		}
	}
	// $ANTLR end synpred2_Java

	partial void EnterRule_synpred12_Java_fragment();
	partial void LeaveRule_synpred12_Java_fragment();

	// $ANTLR start synpred12_Java
	public void synpred12_Java_fragment()
	{
		EnterRule_synpred12_Java_fragment();
		EnterRule("synpred12_Java_fragment", 122);
		TraceIn("synpred12_Java_fragment", 122);
		try
		{
			// Java.g:341:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:341:10: classDeclaration
			{
			DebugLocation(341, 10);
			PushFollow(Follow._classDeclaration_in_synpred12_Java469);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Java_fragment", 122);
			LeaveRule("synpred12_Java_fragment", 122);
			LeaveRule_synpred12_Java_fragment();
		}
	}
	// $ANTLR end synpred12_Java

	partial void EnterRule_synpred27_Java_fragment();
	partial void LeaveRule_synpred27_Java_fragment();

	// $ANTLR start synpred27_Java
	public void synpred27_Java_fragment()
	{
		EnterRule_synpred27_Java_fragment();
		EnterRule("synpred27_Java_fragment", 137);
		TraceIn("synpred27_Java_fragment", 137);
		try
		{
			// Java.g:372:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:372:9: normalClassDeclaration
			{
			DebugLocation(372, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred27_Java706);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_Java_fragment", 137);
			LeaveRule("synpred27_Java_fragment", 137);
			LeaveRule_synpred27_Java_fragment();
		}
	}
	// $ANTLR end synpred27_Java

	partial void EnterRule_synpred43_Java_fragment();
	partial void LeaveRule_synpred43_Java_fragment();

	// $ANTLR start synpred43_Java
	public void synpred43_Java_fragment()
	{
		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 153);
		TraceIn("synpred43_Java_fragment", 153);
		try
		{
			// Java.g:460:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:460:9: normalInterfaceDeclaration
			{
			DebugLocation(460, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred43_Java1385);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 153);
			LeaveRule("synpred43_Java_fragment", 153);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java

	partial void EnterRule_synpred52_Java_fragment();
	partial void LeaveRule_synpred52_Java_fragment();

	// $ANTLR start synpred52_Java
	public void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 162);
		TraceIn("synpred52_Java_fragment", 162);
		try
		{
			// Java.g:502:10: ( fieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:502:10: fieldDeclaration
			{
			DebugLocation(502, 10);
			PushFollow(Follow._fieldDeclaration_in_synpred52_Java1715);
			fieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 162);
			LeaveRule("synpred52_Java_fragment", 162);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java

	partial void EnterRule_synpred53_Java_fragment();
	partial void LeaveRule_synpred53_Java_fragment();

	// $ANTLR start synpred53_Java
	public void synpred53_Java_fragment()
	{
		EnterRule_synpred53_Java_fragment();
		EnterRule("synpred53_Java_fragment", 163);
		TraceIn("synpred53_Java_fragment", 163);
		try
		{
			// Java.g:503:10: ( methodDeclaration )
			DebugEnterAlt(1);
			// Java.g:503:10: methodDeclaration
			{
			DebugLocation(503, 10);
			PushFollow(Follow._methodDeclaration_in_synpred53_Java1726);
			methodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Java_fragment", 163);
			LeaveRule("synpred53_Java_fragment", 163);
			LeaveRule_synpred53_Java_fragment();
		}
	}
	// $ANTLR end synpred53_Java

	partial void EnterRule_synpred54_Java_fragment();
	partial void LeaveRule_synpred54_Java_fragment();

	// $ANTLR start synpred54_Java
	public void synpred54_Java_fragment()
	{
		EnterRule_synpred54_Java_fragment();
		EnterRule("synpred54_Java_fragment", 164);
		TraceIn("synpred54_Java_fragment", 164);
		try
		{
			// Java.g:504:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:504:10: classDeclaration
			{
			DebugLocation(504, 10);
			PushFollow(Follow._classDeclaration_in_synpred54_Java1737);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_Java_fragment", 164);
			LeaveRule("synpred54_Java_fragment", 164);
			LeaveRule_synpred54_Java_fragment();
		}
	}
	// $ANTLR end synpred54_Java

	partial void EnterRule_synpred57_Java_fragment();
	partial void LeaveRule_synpred57_Java_fragment();

	// $ANTLR start synpred57_Java
	public void synpred57_Java_fragment()
	{
		EnterRule_synpred57_Java_fragment();
		EnterRule("synpred57_Java_fragment", 167);
		TraceIn("synpred57_Java_fragment", 167);
		try
		{
			// Java.g:520:10: ( explicitConstructorInvocation )
			DebugEnterAlt(1);
			// Java.g:520:10: explicitConstructorInvocation
			{
			DebugLocation(520, 10);
			PushFollow(Follow._explicitConstructorInvocation_in_synpred57_Java1874);
			explicitConstructorInvocation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Java_fragment", 167);
			LeaveRule("synpred57_Java_fragment", 167);
			LeaveRule_synpred57_Java_fragment();
		}
	}
	// $ANTLR end synpred57_Java

	partial void EnterRule_synpred59_Java_fragment();
	partial void LeaveRule_synpred59_Java_fragment();

	// $ANTLR start synpred59_Java
	public void synpred59_Java_fragment()
	{
		EnterRule_synpred59_Java_fragment();
		EnterRule("synpred59_Java_fragment", 169);
		TraceIn("synpred59_Java_fragment", 169);
		try
		{
			// Java.g:512:10: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:512:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
			{
			DebugLocation(512, 10);
			PushFollow(Follow._modifiers_in_synpred59_Java1786);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(513, 9);
			// Java.g:513:9: ( typeParameters )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_1 = input.LA(1);

			if ((LA169_1==LT))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:513:10: typeParameters
				{
				DebugLocation(513, 10);
				PushFollow(Follow._typeParameters_in_synpred59_Java1797);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(515, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred59_Java1818); if (state.failed) return;
			DebugLocation(516, 9);
			PushFollow(Follow._formalParameters_in_synpred59_Java1828);
			formalParameters();
			PopFollow();
			if (state.failed) return;
			DebugLocation(517, 9);
			// Java.g:517:9: ( 'throws' qualifiedNameList )?
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, false);
			int LA170_1 = input.LA(1);

			if ((LA170_1==THROWS))
			{
				alt170 = 1;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:517:10: 'throws' qualifiedNameList
				{
				DebugLocation(517, 10);
				Match(input,THROWS,Follow._THROWS_in_synpred59_Java1839); if (state.failed) return;
				DebugLocation(517, 19);
				PushFollow(Follow._qualifiedNameList_in_synpred59_Java1841);
				qualifiedNameList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(170); }

			DebugLocation(519, 9);
			Match(input,LBRACE,Follow._LBRACE_in_synpred59_Java1862); if (state.failed) return;
			DebugLocation(520, 9);
			// Java.g:520:9: ( explicitConstructorInvocation )?
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt171 = 1;
				}
				break;
			case THIS:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case LPAREN:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case SUPER:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case NULL:
			case STRINGLITERAL:
			case TRUE:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case NEW:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case VOID:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:520:10: explicitConstructorInvocation
				{
				DebugLocation(520, 10);
				PushFollow(Follow._explicitConstructorInvocation_in_synpred59_Java1874);
				explicitConstructorInvocation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(171); }

			DebugLocation(522, 9);
			// Java.g:522:9: ( blockStatement )*
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, false);
				int LA172_1 = input.LA(1);

				if ((LA172_1==ABSTRACT||(LA172_1>=ASSERT && LA172_1<=BANG)||(LA172_1>=BOOLEAN && LA172_1<=BYTE)||(LA172_1>=CHAR && LA172_1<=CLASS)||LA172_1==CONTINUE||LA172_1==DO||(LA172_1>=DOUBLE && LA172_1<=DOUBLELITERAL)||LA172_1==ENUM||(LA172_1>=FALSE && LA172_1<=FINAL)||(LA172_1>=FLOAT && LA172_1<=FOR)||(LA172_1>=IDENTIFIER && LA172_1<=IF)||(LA172_1>=INT && LA172_1<=INTLITERAL)||LA172_1==LBRACE||(LA172_1>=LONG && LA172_1<=LT)||(LA172_1>=MONKEYS_AT && LA172_1<=NULL)||LA172_1==PLUS||(LA172_1>=PLUSPLUS && LA172_1<=PUBLIC)||LA172_1==RETURN||(LA172_1>=SEMI && LA172_1<=SHORT)||(LA172_1>=STATIC && LA172_1<=SUB)||(LA172_1>=SUBSUB && LA172_1<=SYNCHRONIZED)||(LA172_1>=THIS && LA172_1<=THROW)||(LA172_1>=TILDE && LA172_1<=WHILE)))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch ( alt172 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:522:10: blockStatement
					{
					DebugLocation(522, 10);
					PushFollow(Follow._blockStatement_in_synpred59_Java1896);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop172;
				}
			}

			loop172:
				;

			} finally { DebugExitSubRule(172); }

			DebugLocation(524, 9);
			Match(input,RBRACE,Follow._RBRACE_in_synpred59_Java1917); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Java_fragment", 169);
			LeaveRule("synpred59_Java_fragment", 169);
			LeaveRule_synpred59_Java_fragment();
		}
	}
	// $ANTLR end synpred59_Java

	partial void EnterRule_synpred68_Java_fragment();
	partial void LeaveRule_synpred68_Java_fragment();

	// $ANTLR start synpred68_Java
	public void synpred68_Java_fragment()
	{
		EnterRule_synpred68_Java_fragment();
		EnterRule("synpred68_Java_fragment", 178);
		TraceIn("synpred68_Java_fragment", 178);
		try
		{
			// Java.g:566:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:566:9: interfaceFieldDeclaration
			{
			DebugLocation(566, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred68_Java2292);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Java_fragment", 178);
			LeaveRule("synpred68_Java_fragment", 178);
			LeaveRule_synpred68_Java_fragment();
		}
	}
	// $ANTLR end synpred68_Java

	partial void EnterRule_synpred69_Java_fragment();
	partial void LeaveRule_synpred69_Java_fragment();

	// $ANTLR start synpred69_Java
	public void synpred69_Java_fragment()
	{
		EnterRule_synpred69_Java_fragment();
		EnterRule("synpred69_Java_fragment", 179);
		TraceIn("synpred69_Java_fragment", 179);
		try
		{
			// Java.g:567:9: ( interfaceMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:567:9: interfaceMethodDeclaration
			{
			DebugLocation(567, 9);
			PushFollow(Follow._interfaceMethodDeclaration_in_synpred69_Java2302);
			interfaceMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Java_fragment", 179);
			LeaveRule("synpred69_Java_fragment", 179);
			LeaveRule_synpred69_Java_fragment();
		}
	}
	// $ANTLR end synpred69_Java

	partial void EnterRule_synpred70_Java_fragment();
	partial void LeaveRule_synpred70_Java_fragment();

	// $ANTLR start synpred70_Java
	public void synpred70_Java_fragment()
	{
		EnterRule_synpred70_Java_fragment();
		EnterRule("synpred70_Java_fragment", 180);
		TraceIn("synpred70_Java_fragment", 180);
		try
		{
			// Java.g:568:9: ( interfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:568:9: interfaceDeclaration
			{
			DebugLocation(568, 9);
			PushFollow(Follow._interfaceDeclaration_in_synpred70_Java2312);
			interfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_Java_fragment", 180);
			LeaveRule("synpred70_Java_fragment", 180);
			LeaveRule_synpred70_Java_fragment();
		}
	}
	// $ANTLR end synpred70_Java

	partial void EnterRule_synpred71_Java_fragment();
	partial void LeaveRule_synpred71_Java_fragment();

	// $ANTLR start synpred71_Java
	public void synpred71_Java_fragment()
	{
		EnterRule_synpred71_Java_fragment();
		EnterRule("synpred71_Java_fragment", 181);
		TraceIn("synpred71_Java_fragment", 181);
		try
		{
			// Java.g:569:9: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:569:9: classDeclaration
			{
			DebugLocation(569, 9);
			PushFollow(Follow._classDeclaration_in_synpred71_Java2322);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_Java_fragment", 181);
			LeaveRule("synpred71_Java_fragment", 181);
			LeaveRule_synpred71_Java_fragment();
		}
	}
	// $ANTLR end synpred71_Java

	partial void EnterRule_synpred96_Java_fragment();
	partial void LeaveRule_synpred96_Java_fragment();

	// $ANTLR start synpred96_Java
	public void synpred96_Java_fragment()
	{
		EnterRule_synpred96_Java_fragment();
		EnterRule("synpred96_Java_fragment", 206);
		TraceIn("synpred96_Java_fragment", 206);
		try
		{
			// Java.g:664:9: ( ellipsisParameterDecl )
			DebugEnterAlt(1);
			// Java.g:664:9: ellipsisParameterDecl
			{
			DebugLocation(664, 9);
			PushFollow(Follow._ellipsisParameterDecl_in_synpred96_Java3086);
			ellipsisParameterDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_Java_fragment", 206);
			LeaveRule("synpred96_Java_fragment", 206);
			LeaveRule_synpred96_Java_fragment();
		}
	}
	// $ANTLR end synpred96_Java

	partial void EnterRule_synpred98_Java_fragment();
	partial void LeaveRule_synpred98_Java_fragment();

	// $ANTLR start synpred98_Java
	public void synpred98_Java_fragment()
	{
		EnterRule_synpred98_Java_fragment();
		EnterRule("synpred98_Java_fragment", 208);
		TraceIn("synpred98_Java_fragment", 208);
		try
		{
			// Java.g:665:9: ( normalParameterDecl ( ',' normalParameterDecl )* )
			DebugEnterAlt(1);
			// Java.g:665:9: normalParameterDecl ( ',' normalParameterDecl )*
			{
			DebugLocation(665, 9);
			PushFollow(Follow._normalParameterDecl_in_synpred98_Java3096);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(666, 9);
			// Java.g:666:9: ( ',' normalParameterDecl )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, false);
				int LA175_1 = input.LA(1);

				if ((LA175_1==COMMA))
				{
					alt175 = 1;
				}


				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:666:10: ',' normalParameterDecl
					{
					DebugLocation(666, 10);
					Match(input,COMMA,Follow._COMMA_in_synpred98_Java3107); if (state.failed) return;
					DebugLocation(666, 14);
					PushFollow(Follow._normalParameterDecl_in_synpred98_Java3109);
					normalParameterDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }


			}

		}
		finally
		{
			TraceOut("synpred98_Java_fragment", 208);
			LeaveRule("synpred98_Java_fragment", 208);
			LeaveRule_synpred98_Java_fragment();
		}
	}
	// $ANTLR end synpred98_Java

	partial void EnterRule_synpred99_Java_fragment();
	partial void LeaveRule_synpred99_Java_fragment();

	// $ANTLR start synpred99_Java
	public void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 209);
		TraceIn("synpred99_Java_fragment", 209);
		try
		{
			// Java.g:668:10: ( normalParameterDecl ',' )
			DebugEnterAlt(1);
			// Java.g:668:10: normalParameterDecl ','
			{
			DebugLocation(668, 10);
			PushFollow(Follow._normalParameterDecl_in_synpred99_Java3131);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(669, 9);
			Match(input,COMMA,Follow._COMMA_in_synpred99_Java3141); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 209);
			LeaveRule("synpred99_Java_fragment", 209);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java

	partial void EnterRule_synpred103_Java_fragment();
	partial void LeaveRule_synpred103_Java_fragment();

	// $ANTLR start synpred103_Java
	public void synpred103_Java_fragment()
	{
		EnterRule_synpred103_Java_fragment();
		EnterRule("synpred103_Java_fragment", 213);
		TraceIn("synpred103_Java_fragment", 213);
		try
		{
			// Java.g:688:9: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' )
			DebugEnterAlt(1);
			// Java.g:688:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
			{
			DebugLocation(688, 9);
			// Java.g:688:9: ( nonWildcardTypeArguments )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_1 = input.LA(1);

			if ((LA176_1==LT))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:688:10: nonWildcardTypeArguments
				{
				DebugLocation(688, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_synpred103_Java3276);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(690, 9);
			if (input.LA(1)==SUPER||input.LA(1)==THIS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(693, 9);
			PushFollow(Follow._arguments_in_synpred103_Java3334);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(693, 19);
			Match(input,SEMI,Follow._SEMI_in_synpred103_Java3336); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_Java_fragment", 213);
			LeaveRule("synpred103_Java_fragment", 213);
			LeaveRule_synpred103_Java_fragment();
		}
	}
	// $ANTLR end synpred103_Java

	partial void EnterRule_synpred117_Java_fragment();
	partial void LeaveRule_synpred117_Java_fragment();

	// $ANTLR start synpred117_Java
	public void synpred117_Java_fragment()
	{
		EnterRule_synpred117_Java_fragment();
		EnterRule("synpred117_Java_fragment", 227);
		TraceIn("synpred117_Java_fragment", 227);
		try
		{
			// Java.g:775:9: ( annotationMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:775:9: annotationMethodDeclaration
			{
			DebugLocation(775, 9);
			PushFollow(Follow._annotationMethodDeclaration_in_synpred117_Java3935);
			annotationMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_Java_fragment", 227);
			LeaveRule("synpred117_Java_fragment", 227);
			LeaveRule_synpred117_Java_fragment();
		}
	}
	// $ANTLR end synpred117_Java

	partial void EnterRule_synpred118_Java_fragment();
	partial void LeaveRule_synpred118_Java_fragment();

	// $ANTLR start synpred118_Java
	public void synpred118_Java_fragment()
	{
		EnterRule_synpred118_Java_fragment();
		EnterRule("synpred118_Java_fragment", 228);
		TraceIn("synpred118_Java_fragment", 228);
		try
		{
			// Java.g:776:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:776:9: interfaceFieldDeclaration
			{
			DebugLocation(776, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred118_Java3945);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred118_Java_fragment", 228);
			LeaveRule("synpred118_Java_fragment", 228);
			LeaveRule_synpred118_Java_fragment();
		}
	}
	// $ANTLR end synpred118_Java

	partial void EnterRule_synpred119_Java_fragment();
	partial void LeaveRule_synpred119_Java_fragment();

	// $ANTLR start synpred119_Java
	public void synpred119_Java_fragment()
	{
		EnterRule_synpred119_Java_fragment();
		EnterRule("synpred119_Java_fragment", 229);
		TraceIn("synpred119_Java_fragment", 229);
		try
		{
			// Java.g:777:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:777:9: normalClassDeclaration
			{
			DebugLocation(777, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred119_Java3955);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Java_fragment", 229);
			LeaveRule("synpred119_Java_fragment", 229);
			LeaveRule_synpred119_Java_fragment();
		}
	}
	// $ANTLR end synpred119_Java

	partial void EnterRule_synpred120_Java_fragment();
	partial void LeaveRule_synpred120_Java_fragment();

	// $ANTLR start synpred120_Java
	public void synpred120_Java_fragment()
	{
		EnterRule_synpred120_Java_fragment();
		EnterRule("synpred120_Java_fragment", 230);
		TraceIn("synpred120_Java_fragment", 230);
		try
		{
			// Java.g:778:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:778:9: normalInterfaceDeclaration
			{
			DebugLocation(778, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred120_Java3965);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred120_Java_fragment", 230);
			LeaveRule("synpred120_Java_fragment", 230);
			LeaveRule_synpred120_Java_fragment();
		}
	}
	// $ANTLR end synpred120_Java

	partial void EnterRule_synpred121_Java_fragment();
	partial void LeaveRule_synpred121_Java_fragment();

	// $ANTLR start synpred121_Java
	public void synpred121_Java_fragment()
	{
		EnterRule_synpred121_Java_fragment();
		EnterRule("synpred121_Java_fragment", 231);
		TraceIn("synpred121_Java_fragment", 231);
		try
		{
			// Java.g:779:9: ( enumDeclaration )
			DebugEnterAlt(1);
			// Java.g:779:9: enumDeclaration
			{
			DebugLocation(779, 9);
			PushFollow(Follow._enumDeclaration_in_synpred121_Java3975);
			enumDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Java_fragment", 231);
			LeaveRule("synpred121_Java_fragment", 231);
			LeaveRule_synpred121_Java_fragment();
		}
	}
	// $ANTLR end synpred121_Java

	partial void EnterRule_synpred122_Java_fragment();
	partial void LeaveRule_synpred122_Java_fragment();

	// $ANTLR start synpred122_Java
	public void synpred122_Java_fragment()
	{
		EnterRule_synpred122_Java_fragment();
		EnterRule("synpred122_Java_fragment", 232);
		TraceIn("synpred122_Java_fragment", 232);
		try
		{
			// Java.g:780:9: ( annotationTypeDeclaration )
			DebugEnterAlt(1);
			// Java.g:780:9: annotationTypeDeclaration
			{
			DebugLocation(780, 9);
			PushFollow(Follow._annotationTypeDeclaration_in_synpred122_Java3985);
			annotationTypeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred122_Java_fragment", 232);
			LeaveRule("synpred122_Java_fragment", 232);
			LeaveRule_synpred122_Java_fragment();
		}
	}
	// $ANTLR end synpred122_Java

	partial void EnterRule_synpred125_Java_fragment();
	partial void LeaveRule_synpred125_Java_fragment();

	// $ANTLR start synpred125_Java
	public void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 235);
		TraceIn("synpred125_Java_fragment", 235);
		try
		{
			// Java.g:823:9: ( localVariableDeclarationStatement )
			DebugEnterAlt(1);
			// Java.g:823:9: localVariableDeclarationStatement
			{
			DebugLocation(823, 9);
			PushFollow(Follow._localVariableDeclarationStatement_in_synpred125_Java4143);
			localVariableDeclarationStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 235);
			LeaveRule("synpred125_Java_fragment", 235);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java

	partial void EnterRule_synpred126_Java_fragment();
	partial void LeaveRule_synpred126_Java_fragment();

	// $ANTLR start synpred126_Java
	public void synpred126_Java_fragment()
	{
		EnterRule_synpred126_Java_fragment();
		EnterRule("synpred126_Java_fragment", 236);
		TraceIn("synpred126_Java_fragment", 236);
		try
		{
			// Java.g:824:9: ( classOrInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:824:9: classOrInterfaceDeclaration
			{
			DebugLocation(824, 9);
			PushFollow(Follow._classOrInterfaceDeclaration_in_synpred126_Java4153);
			classOrInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred126_Java_fragment", 236);
			LeaveRule("synpred126_Java_fragment", 236);
			LeaveRule_synpred126_Java_fragment();
		}
	}
	// $ANTLR end synpred126_Java

	partial void EnterRule_synpred130_Java_fragment();
	partial void LeaveRule_synpred130_Java_fragment();

	// $ANTLR start synpred130_Java
	public void synpred130_Java_fragment()
	{
		EnterRule_synpred130_Java_fragment();
		EnterRule("synpred130_Java_fragment", 240);
		TraceIn("synpred130_Java_fragment", 240);
		try
		{
			// Java.g:844:9: ( ( 'assert' ) expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// Java.g:844:9: ( 'assert' ) expression ( ':' expression )? ';'
			{
			DebugLocation(844, 9);
			// Java.g:844:9: ( 'assert' )
			DebugEnterAlt(1);
			// Java.g:844:10: 'assert'
			{
			DebugLocation(844, 10);
			Match(input,ASSERT,Follow._ASSERT_in_synpred130_Java4294); if (state.failed) return;

			}

			DebugLocation(846, 9);
			PushFollow(Follow._expression_in_synpred130_Java4314);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(846, 20);
			// Java.g:846:20: ( ':' expression )?
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_1 = input.LA(1);

			if ((LA179_1==COLON))
			{
				alt179 = 1;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:846:21: ':' expression
				{
				DebugLocation(846, 21);
				Match(input,COLON,Follow._COLON_in_synpred130_Java4317); if (state.failed) return;
				DebugLocation(846, 25);
				PushFollow(Follow._expression_in_synpred130_Java4319);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(179); }

			DebugLocation(846, 38);
			Match(input,SEMI,Follow._SEMI_in_synpred130_Java4323); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred130_Java_fragment", 240);
			LeaveRule("synpred130_Java_fragment", 240);
			LeaveRule_synpred130_Java_fragment();
		}
	}
	// $ANTLR end synpred130_Java

	partial void EnterRule_synpred132_Java_fragment();
	partial void LeaveRule_synpred132_Java_fragment();

	// $ANTLR start synpred132_Java
	public void synpred132_Java_fragment()
	{
		EnterRule_synpred132_Java_fragment();
		EnterRule("synpred132_Java_fragment", 242);
		TraceIn("synpred132_Java_fragment", 242);
		try
		{
			// Java.g:847:9: ( 'assert' expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// Java.g:847:9: 'assert' expression ( ':' expression )? ';'
			{
			DebugLocation(847, 9);
			Match(input,ASSERT,Follow._ASSERT_in_synpred132_Java4333); if (state.failed) return;
			DebugLocation(847, 19);
			PushFollow(Follow._expression_in_synpred132_Java4336);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(847, 30);
			// Java.g:847:30: ( ':' expression )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_1 = input.LA(1);

			if ((LA180_1==COLON))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:847:31: ':' expression
				{
				DebugLocation(847, 31);
				Match(input,COLON,Follow._COLON_in_synpred132_Java4339); if (state.failed) return;
				DebugLocation(847, 35);
				PushFollow(Follow._expression_in_synpred132_Java4341);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(847, 48);
			Match(input,SEMI,Follow._SEMI_in_synpred132_Java4345); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred132_Java_fragment", 242);
			LeaveRule("synpred132_Java_fragment", 242);
			LeaveRule_synpred132_Java_fragment();
		}
	}
	// $ANTLR end synpred132_Java

	partial void EnterRule_synpred133_Java_fragment();
	partial void LeaveRule_synpred133_Java_fragment();

	// $ANTLR start synpred133_Java
	public void synpred133_Java_fragment()
	{
		EnterRule_synpred133_Java_fragment();
		EnterRule("synpred133_Java_fragment", 243);
		TraceIn("synpred133_Java_fragment", 243);
		try
		{
			// Java.g:848:39: ( 'else' statement )
			DebugEnterAlt(1);
			// Java.g:848:39: 'else' statement
			{
			DebugLocation(848, 39);
			Match(input,ELSE,Follow._ELSE_in_synpred133_Java4374); if (state.failed) return;
			DebugLocation(848, 46);
			PushFollow(Follow._statement_in_synpred133_Java4376);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred133_Java_fragment", 243);
			LeaveRule("synpred133_Java_fragment", 243);
			LeaveRule_synpred133_Java_fragment();
		}
	}
	// $ANTLR end synpred133_Java

	partial void EnterRule_synpred148_Java_fragment();
	partial void LeaveRule_synpred148_Java_fragment();

	// $ANTLR start synpred148_Java
	public void synpred148_Java_fragment()
	{
		EnterRule_synpred148_Java_fragment();
		EnterRule("synpred148_Java_fragment", 258);
		TraceIn("synpred148_Java_fragment", 258);
		try
		{
			// Java.g:863:9: ( expression ';' )
			DebugEnterAlt(1);
			// Java.g:863:9: expression ';'
			{
			DebugLocation(863, 9);
			PushFollow(Follow._expression_in_synpred148_Java4598);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(863, 21);
			Match(input,SEMI,Follow._SEMI_in_synpred148_Java4601); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred148_Java_fragment", 258);
			LeaveRule("synpred148_Java_fragment", 258);
			LeaveRule_synpred148_Java_fragment();
		}
	}
	// $ANTLR end synpred148_Java

	partial void EnterRule_synpred149_Java_fragment();
	partial void LeaveRule_synpred149_Java_fragment();

	// $ANTLR start synpred149_Java
	public void synpred149_Java_fragment()
	{
		EnterRule_synpred149_Java_fragment();
		EnterRule("synpred149_Java_fragment", 259);
		TraceIn("synpred149_Java_fragment", 259);
		try
		{
			// Java.g:864:9: ( IDENTIFIER ':' statement )
			DebugEnterAlt(1);
			// Java.g:864:9: IDENTIFIER ':' statement
			{
			DebugLocation(864, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred149_Java4616); if (state.failed) return;
			DebugLocation(864, 20);
			Match(input,COLON,Follow._COLON_in_synpred149_Java4618); if (state.failed) return;
			DebugLocation(864, 24);
			PushFollow(Follow._statement_in_synpred149_Java4620);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred149_Java_fragment", 259);
			LeaveRule("synpred149_Java_fragment", 259);
			LeaveRule_synpred149_Java_fragment();
		}
	}
	// $ANTLR end synpred149_Java

	partial void EnterRule_synpred153_Java_fragment();
	partial void LeaveRule_synpred153_Java_fragment();

	// $ANTLR start synpred153_Java
	public void synpred153_Java_fragment()
	{
		EnterRule_synpred153_Java_fragment();
		EnterRule("synpred153_Java_fragment", 263);
		TraceIn("synpred153_Java_fragment", 263);
		try
		{
			// Java.g:888:13: ( catches 'finally' block )
			DebugEnterAlt(1);
			// Java.g:888:13: catches 'finally' block
			{
			DebugLocation(888, 13);
			PushFollow(Follow._catches_in_synpred153_Java4776);
			catches();
			PopFollow();
			if (state.failed) return;
			DebugLocation(888, 21);
			Match(input,FINALLY,Follow._FINALLY_in_synpred153_Java4778); if (state.failed) return;
			DebugLocation(888, 31);
			PushFollow(Follow._block_in_synpred153_Java4780);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred153_Java_fragment", 263);
			LeaveRule("synpred153_Java_fragment", 263);
			LeaveRule_synpred153_Java_fragment();
		}
	}
	// $ANTLR end synpred153_Java

	partial void EnterRule_synpred154_Java_fragment();
	partial void LeaveRule_synpred154_Java_fragment();

	// $ANTLR start synpred154_Java
	public void synpred154_Java_fragment()
	{
		EnterRule_synpred154_Java_fragment();
		EnterRule("synpred154_Java_fragment", 264);
		TraceIn("synpred154_Java_fragment", 264);
		try
		{
			// Java.g:889:13: ( catches )
			DebugEnterAlt(1);
			// Java.g:889:13: catches
			{
			DebugLocation(889, 13);
			PushFollow(Follow._catches_in_synpred154_Java4794);
			catches();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred154_Java_fragment", 264);
			LeaveRule("synpred154_Java_fragment", 264);
			LeaveRule_synpred154_Java_fragment();
		}
	}
	// $ANTLR end synpred154_Java

	partial void EnterRule_synpred157_Java_fragment();
	partial void LeaveRule_synpred157_Java_fragment();

	// $ANTLR start synpred157_Java
	public void synpred157_Java_fragment()
	{
		EnterRule_synpred157_Java_fragment();
		EnterRule("synpred157_Java_fragment", 267);
		TraceIn("synpred157_Java_fragment", 267);
		try
		{
			// Java.g:914:9: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement )
			DebugEnterAlt(1);
			// Java.g:914:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
			{
			DebugLocation(914, 9);
			Match(input,FOR,Follow._FOR_in_synpred157_Java4986); if (state.failed) return;
			DebugLocation(914, 15);
			Match(input,LPAREN,Follow._LPAREN_in_synpred157_Java4988); if (state.failed) return;
			DebugLocation(914, 19);
			PushFollow(Follow._variableModifiers_in_synpred157_Java4990);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(914, 37);
			PushFollow(Follow._type_in_synpred157_Java4992);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(914, 42);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred157_Java4994); if (state.failed) return;
			DebugLocation(914, 53);
			Match(input,COLON,Follow._COLON_in_synpred157_Java4996); if (state.failed) return;
			DebugLocation(915, 9);
			PushFollow(Follow._expression_in_synpred157_Java5007);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(915, 20);
			Match(input,RPAREN,Follow._RPAREN_in_synpred157_Java5009); if (state.failed) return;
			DebugLocation(915, 24);
			PushFollow(Follow._statement_in_synpred157_Java5011);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred157_Java_fragment", 267);
			LeaveRule("synpred157_Java_fragment", 267);
			LeaveRule_synpred157_Java_fragment();
		}
	}
	// $ANTLR end synpred157_Java

	partial void EnterRule_synpred161_Java_fragment();
	partial void LeaveRule_synpred161_Java_fragment();

	// $ANTLR start synpred161_Java
	public void synpred161_Java_fragment()
	{
		EnterRule_synpred161_Java_fragment();
		EnterRule("synpred161_Java_fragment", 271);
		TraceIn("synpred161_Java_fragment", 271);
		try
		{
			// Java.g:928:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// Java.g:928:9: localVariableDeclaration
			{
			DebugLocation(928, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred161_Java5190);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred161_Java_fragment", 271);
			LeaveRule("synpred161_Java_fragment", 271);
			LeaveRule_synpred161_Java_fragment();
		}
	}
	// $ANTLR end synpred161_Java

	partial void EnterRule_synpred202_Java_fragment();
	partial void LeaveRule_synpred202_Java_fragment();

	// $ANTLR start synpred202_Java
	public void synpred202_Java_fragment()
	{
		EnterRule_synpred202_Java_fragment();
		EnterRule("synpred202_Java_fragment", 312);
		TraceIn("synpred202_Java_fragment", 312);
		try
		{
			// Java.g:1082:9: ( castExpression )
			DebugEnterAlt(1);
			// Java.g:1082:9: castExpression
			{
			DebugLocation(1082, 9);
			PushFollow(Follow._castExpression_in_synpred202_Java6435);
			castExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred202_Java_fragment", 312);
			LeaveRule("synpred202_Java_fragment", 312);
			LeaveRule_synpred202_Java_fragment();
		}
	}
	// $ANTLR end synpred202_Java

	partial void EnterRule_synpred206_Java_fragment();
	partial void LeaveRule_synpred206_Java_fragment();

	// $ANTLR start synpred206_Java
	public void synpred206_Java_fragment()
	{
		EnterRule_synpred206_Java_fragment();
		EnterRule("synpred206_Java_fragment", 316);
		TraceIn("synpred206_Java_fragment", 316);
		try
		{
			// Java.g:1092:9: ( '(' primitiveType ')' unaryExpression )
			DebugEnterAlt(1);
			// Java.g:1092:9: '(' primitiveType ')' unaryExpression
			{
			DebugLocation(1092, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred206_Java6526); if (state.failed) return;
			DebugLocation(1092, 13);
			PushFollow(Follow._primitiveType_in_synpred206_Java6528);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1092, 27);
			Match(input,RPAREN,Follow._RPAREN_in_synpred206_Java6530); if (state.failed) return;
			DebugLocation(1092, 31);
			PushFollow(Follow._unaryExpression_in_synpred206_Java6532);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Java_fragment", 316);
			LeaveRule("synpred206_Java_fragment", 316);
			LeaveRule_synpred206_Java_fragment();
		}
	}
	// $ANTLR end synpred206_Java

	partial void EnterRule_synpred208_Java_fragment();
	partial void LeaveRule_synpred208_Java_fragment();

	// $ANTLR start synpred208_Java
	public void synpred208_Java_fragment()
	{
		EnterRule_synpred208_Java_fragment();
		EnterRule("synpred208_Java_fragment", 318);
		TraceIn("synpred208_Java_fragment", 318);
		try
		{
			// Java.g:1102:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1102:10: '.' IDENTIFIER
			{
			DebugLocation(1102, 10);
			Match(input,DOT,Follow._DOT_in_synpred208_Java6603); if (state.failed) return;
			DebugLocation(1102, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred208_Java6605); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred208_Java_fragment", 318);
			LeaveRule("synpred208_Java_fragment", 318);
			LeaveRule_synpred208_Java_fragment();
		}
	}
	// $ANTLR end synpred208_Java

	partial void EnterRule_synpred209_Java_fragment();
	partial void LeaveRule_synpred209_Java_fragment();

	// $ANTLR start synpred209_Java
	public void synpred209_Java_fragment()
	{
		EnterRule_synpred209_Java_fragment();
		EnterRule("synpred209_Java_fragment", 319);
		TraceIn("synpred209_Java_fragment", 319);
		try
		{
			// Java.g:1104:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1104:10: identifierSuffix
			{
			DebugLocation(1104, 10);
			PushFollow(Follow._identifierSuffix_in_synpred209_Java6627);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred209_Java_fragment", 319);
			LeaveRule("synpred209_Java_fragment", 319);
			LeaveRule_synpred209_Java_fragment();
		}
	}
	// $ANTLR end synpred209_Java

	partial void EnterRule_synpred211_Java_fragment();
	partial void LeaveRule_synpred211_Java_fragment();

	// $ANTLR start synpred211_Java
	public void synpred211_Java_fragment()
	{
		EnterRule_synpred211_Java_fragment();
		EnterRule("synpred211_Java_fragment", 321);
		TraceIn("synpred211_Java_fragment", 321);
		try
		{
			// Java.g:1107:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1107:10: '.' IDENTIFIER
			{
			DebugLocation(1107, 10);
			Match(input,DOT,Follow._DOT_in_synpred211_Java6659); if (state.failed) return;
			DebugLocation(1107, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred211_Java6661); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred211_Java_fragment", 321);
			LeaveRule("synpred211_Java_fragment", 321);
			LeaveRule_synpred211_Java_fragment();
		}
	}
	// $ANTLR end synpred211_Java

	partial void EnterRule_synpred212_Java_fragment();
	partial void LeaveRule_synpred212_Java_fragment();

	// $ANTLR start synpred212_Java
	public void synpred212_Java_fragment()
	{
		EnterRule_synpred212_Java_fragment();
		EnterRule("synpred212_Java_fragment", 322);
		TraceIn("synpred212_Java_fragment", 322);
		try
		{
			// Java.g:1109:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1109:10: identifierSuffix
			{
			DebugLocation(1109, 10);
			PushFollow(Follow._identifierSuffix_in_synpred212_Java6683);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred212_Java_fragment", 322);
			LeaveRule("synpred212_Java_fragment", 322);
			LeaveRule_synpred212_Java_fragment();
		}
	}
	// $ANTLR end synpred212_Java

	partial void EnterRule_synpred224_Java_fragment();
	partial void LeaveRule_synpred224_Java_fragment();

	// $ANTLR start synpred224_Java
	public void synpred224_Java_fragment()
	{
		EnterRule_synpred224_Java_fragment();
		EnterRule("synpred224_Java_fragment", 334);
		TraceIn("synpred224_Java_fragment", 334);
		try
		{
			// Java.g:1137:10: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1137:10: '[' expression ']'
			{
			DebugLocation(1137, 10);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred224_Java6934); if (state.failed) return;
			DebugLocation(1137, 14);
			PushFollow(Follow._expression_in_synpred224_Java6936);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1137, 25);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred224_Java6938); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Java_fragment", 334);
			LeaveRule("synpred224_Java_fragment", 334);
			LeaveRule_synpred224_Java_fragment();
		}
	}
	// $ANTLR end synpred224_Java

	partial void EnterRule_synpred236_Java_fragment();
	partial void LeaveRule_synpred236_Java_fragment();

	// $ANTLR start synpred236_Java
	public void synpred236_Java_fragment()
	{
		EnterRule_synpred236_Java_fragment();
		EnterRule("synpred236_Java_fragment", 346);
		TraceIn("synpred236_Java_fragment", 346);
		try
		{
			// Java.g:1160:9: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1160:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
			{
			DebugLocation(1160, 9);
			Match(input,NEW,Follow._NEW_in_synpred236_Java7147); if (state.failed) return;
			DebugLocation(1160, 15);
			PushFollow(Follow._nonWildcardTypeArguments_in_synpred236_Java7149);
			nonWildcardTypeArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1160, 40);
			PushFollow(Follow._classOrInterfaceType_in_synpred236_Java7151);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1160, 61);
			PushFollow(Follow._classCreatorRest_in_synpred236_Java7153);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Java_fragment", 346);
			LeaveRule("synpred236_Java_fragment", 346);
			LeaveRule_synpred236_Java_fragment();
		}
	}
	// $ANTLR end synpred236_Java

	partial void EnterRule_synpred237_Java_fragment();
	partial void LeaveRule_synpred237_Java_fragment();

	// $ANTLR start synpred237_Java
	public void synpred237_Java_fragment()
	{
		EnterRule_synpred237_Java_fragment();
		EnterRule("synpred237_Java_fragment", 347);
		TraceIn("synpred237_Java_fragment", 347);
		try
		{
			// Java.g:1161:9: ( 'new' classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1161:9: 'new' classOrInterfaceType classCreatorRest
			{
			DebugLocation(1161, 9);
			Match(input,NEW,Follow._NEW_in_synpred237_Java7163); if (state.failed) return;
			DebugLocation(1161, 15);
			PushFollow(Follow._classOrInterfaceType_in_synpred237_Java7165);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1161, 36);
			PushFollow(Follow._classCreatorRest_in_synpred237_Java7167);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Java_fragment", 347);
			LeaveRule("synpred237_Java_fragment", 347);
			LeaveRule_synpred237_Java_fragment();
		}
	}
	// $ANTLR end synpred237_Java

	partial void EnterRule_synpred239_Java_fragment();
	partial void LeaveRule_synpred239_Java_fragment();

	// $ANTLR start synpred239_Java
	public void synpred239_Java_fragment()
	{
		EnterRule_synpred239_Java_fragment();
		EnterRule("synpred239_Java_fragment", 349);
		TraceIn("synpred239_Java_fragment", 349);
		try
		{
			// Java.g:1166:9: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer )
			DebugEnterAlt(1);
			// Java.g:1166:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
			{
			DebugLocation(1166, 9);
			Match(input,NEW,Follow._NEW_in_synpred239_Java7197); if (state.failed) return;
			DebugLocation(1166, 15);
			PushFollow(Follow._createdName_in_synpred239_Java7199);
			createdName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1167, 9);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred239_Java7209); if (state.failed) return;
			DebugLocation(1167, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred239_Java7211); if (state.failed) return;
			DebugLocation(1168, 9);
			// Java.g:1168:9: ( '[' ']' )*
			try { DebugEnterSubRule(193);
			while (true)
			{
				int alt193=2;
				try { DebugEnterDecision(193, false);
				int LA193_1 = input.LA(1);

				if ((LA193_1==LBRACKET))
				{
					alt193 = 1;
				}


				} finally { DebugExitDecision(193); }
				switch ( alt193 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1168:10: '[' ']'
					{
					DebugLocation(1168, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_synpred239_Java7222); if (state.failed) return;
					DebugLocation(1168, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_synpred239_Java7224); if (state.failed) return;

					}
					break;

				default:
					goto loop193;
				}
			}

			loop193:
				;

			} finally { DebugExitSubRule(193); }

			DebugLocation(1170, 9);
			PushFollow(Follow._arrayInitializer_in_synpred239_Java7245);
			arrayInitializer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Java_fragment", 349);
			LeaveRule("synpred239_Java_fragment", 349);
			LeaveRule_synpred239_Java_fragment();
		}
	}
	// $ANTLR end synpred239_Java

	partial void EnterRule_synpred240_Java_fragment();
	partial void LeaveRule_synpred240_Java_fragment();

	// $ANTLR start synpred240_Java
	public void synpred240_Java_fragment()
	{
		EnterRule_synpred240_Java_fragment();
		EnterRule("synpred240_Java_fragment", 350);
		TraceIn("synpred240_Java_fragment", 350);
		try
		{
			// Java.g:1175:13: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1175:13: '[' expression ']'
			{
			DebugLocation(1175, 13);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred240_Java7294); if (state.failed) return;
			DebugLocation(1175, 17);
			PushFollow(Follow._expression_in_synpred240_Java7296);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1176, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred240_Java7310); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred240_Java_fragment", 350);
			LeaveRule("synpred240_Java_fragment", 350);
			LeaveRule_synpred240_Java_fragment();
		}
	}
	// $ANTLR end synpred240_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _annotations_in_compilationUnit82 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit111 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit133 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _typeDeclaration_in_compilationUnit155 = new BitSet(new ulong[]{0x1000102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration186 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_packageDeclaration188 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration219 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration231 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration252 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration254 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration256 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration283 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration295 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration316 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration327 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration329 = new BitSet(new ulong[]{0x80000000UL,0x10000000UL});
		public static readonly BitSet _DOT_in_importDeclaration351 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration353 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName394 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedImportName405 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName407 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_typeDeclaration438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDeclaration448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_classOrInterfaceDeclaration469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_classOrInterfaceDeclaration479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_modifiers514 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PUBLIC_in_modifiers524 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PROTECTED_in_modifiers534 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PRIVATE_in_modifiers544 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STATIC_in_modifiers554 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _ABSTRACT_in_modifiers564 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_modifiers574 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _NATIVE_in_modifiers584 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifiers594 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _TRANSIENT_in_modifiers604 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _VOLATILE_in_modifiers614 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STRICTFP_in_modifiers624 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_variableModifiers656 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _annotation_in_variableModifiers670 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _normalClassDeclaration_in_classDeclaration706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_classDeclaration716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalClassDeclaration736 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_normalClassDeclaration739 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalClassDeclaration741 = new BitSet(new ulong[]{0x100010000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalClassDeclaration752 = new BitSet(new ulong[]{0x100010000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalClassDeclaration774 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalClassDeclaration776 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_normalClassDeclaration798 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalClassDeclaration800 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _classBody_in_normalClassDeclaration833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_typeParameters854 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters868 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeParameters883 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters885 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeParameters910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_typeParameter930 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _EXTENDS_in_typeParameter941 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeBound_in_typeParameter943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeBound975 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_typeBound986 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeBound988 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _modifiers_in_enumDeclaration1020 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ENUM_in_enumDeclaration1032 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumDeclaration1053 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_enumDeclaration1064 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_enumDeclaration1066 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _enumBody_in_enumDeclaration1087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_enumBody1112 = new BitSet(new ulong[]{0x40000002000000UL,0x11000200UL});
		public static readonly BitSet _enumConstants_in_enumBody1123 = new BitSet(new ulong[]{0x2000000UL,0x11000000UL});
		public static readonly BitSet _COMMA_in_enumBody1145 = new BitSet(new ulong[]{0x0UL,0x11000000UL});
		public static readonly BitSet _enumBodyDeclarations_in_enumBody1158 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_enumBody1180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstant_in_enumConstants1200 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_enumConstants1211 = new BitSet(new ulong[]{0x40000000000000UL,0x200UL});
		public static readonly BitSet _enumConstant_in_enumConstants1213 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _annotations_in_enumConstant1247 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumConstant1268 = new BitSet(new ulong[]{0x2UL,0x42UL});
		public static readonly BitSet _arguments_in_enumConstant1279 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_enumConstant1301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumBodyDeclarations1342 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _classBodyDeclaration_in_enumBodyDeclarations1354 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_interfaceDeclaration1385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_interfaceDeclaration1395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalInterfaceDeclaration1419 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_normalInterfaceDeclaration1421 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalInterfaceDeclaration1423 = new BitSet(new ulong[]{0x10000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalInterfaceDeclaration1434 = new BitSet(new ulong[]{0x10000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalInterfaceDeclaration1456 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalInterfaceDeclaration1458 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _interfaceBody_in_normalInterfaceDeclaration1479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList1499 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_typeList1510 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeList1512 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LBRACE_in_classBody1543 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _classBodyDeclaration_in_classBody1555 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _RBRACE_in_classBody1577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_interfaceBody1597 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _interfaceBodyDeclaration_in_interfaceBody1609 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _RBRACE_in_interfaceBody1631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classBodyDeclaration1651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classBodyDeclaration1662 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_classBodyDeclaration1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberDecl_in_classBodyDeclaration1694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_memberDecl1715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_memberDecl1726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_memberDecl1737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_memberDecl1748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1786 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1797 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration1818 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration1828 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_methodDeclaration1839 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration1841 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_methodDeclaration1862 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_methodDeclaration1874 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_methodDeclaration1896 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_methodDeclaration1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1927 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1938 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodDeclaration1960 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodDeclaration1974 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration1994 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration2004 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _LBRACKET_in_methodDeclaration2015 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_methodDeclaration2017 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _THROWS_in_methodDeclaration2039 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration2041 = new BitSet(new ulong[]{0x0UL,0x10000002UL});
		public static readonly BitSet _block_in_methodDeclaration2096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_methodDeclaration2110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldDeclaration2142 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldDeclaration2152 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2162 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_fieldDeclaration2173 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2175 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_fieldDeclaration2196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variableDeclarator2216 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_variableDeclarator2227 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_variableDeclarator2229 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _EQ_in_variableDeclarator2251 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator2253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_interfaceBodyDeclaration2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_interfaceBodyDeclaration2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_interfaceBodyDeclaration2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_interfaceBodyDeclaration2322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceBodyDeclaration2332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceMethodDeclaration2352 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_interfaceMethodDeclaration2363 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_interfaceMethodDeclaration2385 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_interfaceMethodDeclaration2396 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceMethodDeclaration2416 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_interfaceMethodDeclaration2426 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _LBRACKET_in_interfaceMethodDeclaration2437 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_interfaceMethodDeclaration2439 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _THROWS_in_interfaceMethodDeclaration2461 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_interfaceMethodDeclaration2463 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceMethodDeclaration2476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceFieldDeclaration2498 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_interfaceFieldDeclaration2500 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2502 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaration2513 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2515 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceFieldDeclaration2536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_type2557 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2568 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2570 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _primitiveType_in_type2591 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2602 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2604 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2636 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2647 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_classOrInterfaceType2669 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2671 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2686 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _LT_in_typeArguments2823 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2825 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeArguments2836 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2838 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeArguments2860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeArgument2880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUES_in_typeArgument2890 = new BitSet(new ulong[]{0x10000000002UL,0x10000000000UL});
		public static readonly BitSet _set_in_typeArgument2914 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeArgument2958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList2989 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_qualifiedNameList3000 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3002 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LPAREN_in_formalParameters3033 = new BitSet(new ulong[]{0x840500100214000UL,0x28000210UL});
		public static readonly BitSet _formalParameterDecls_in_formalParameters3044 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_formalParameters3066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3096 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3107 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3109 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3131 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3141 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_normalParameterDecl3183 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalParameterDecl3185 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalParameterDecl3187 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_normalParameterDecl3198 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_normalParameterDecl3200 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _variableModifiers_in_ellipsisParameterDecl3231 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_ellipsisParameterDecl3241 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ELLIPSIS_in_ellipsisParameterDecl3244 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_ellipsisParameterDecl3254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3276 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_explicitConstructorInvocation3302 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3334 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_explicitConstructorInvocation3347 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_explicitConstructorInvocation3357 = new BitSet(new ulong[]{0x0UL,0x10000000080UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3368 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_explicitConstructorInvocation3389 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3399 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3421 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedName3432 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3434 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _annotation_in_annotations3466 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotation3499 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_annotation3501 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotation3515 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1A72UL});
		public static readonly BitSet _elementValuePairs_in_annotation3542 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _elementValue_in_annotation3566 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotation3602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3634 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_elementValuePairs3645 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3647 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _IDENTIFIER_in_elementValuePair3678 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_elementValuePair3680 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValuePair3682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_elementValue3702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_elementValue3712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValueArrayInitializer_in_elementValue3722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_elementValueArrayInitializer3742 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3753 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3768 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3770 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3799 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_elementValueArrayInitializer3803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationTypeDeclaration3826 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationTypeDeclaration3828 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration3838 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationTypeDeclaration3848 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _annotationTypeBody_in_annotationTypeDeclaration3858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_annotationTypeBody3879 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _annotationTypeElementDeclaration_in_annotationTypeBody3891 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _RBRACE_in_annotationTypeBody3913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_annotationTypeElementDeclaration3935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_annotationTypeElementDeclaration3945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_annotationTypeElementDeclaration3955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_annotationTypeElementDeclaration3965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_annotationTypeElementDeclaration3975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_annotationTypeElementDeclaration3985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_annotationTypeElementDeclaration3995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationMethodDeclaration4015 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_annotationMethodDeclaration4017 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationMethodDeclaration4019 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotationMethodDeclaration4029 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotationMethodDeclaration4031 = new BitSet(new ulong[]{0x20000000UL,0x10000000UL});
		public static readonly BitSet _DEFAULT_in_annotationMethodDeclaration4034 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_annotationMethodDeclaration4036 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_annotationMethodDeclaration4065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block4089 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_block4100 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_block4121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_blockStatement4143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_blockStatement4153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement4163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_localVariableDeclarationStatement4184 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_localVariableDeclarationStatement4194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableDeclaration4214 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableDeclaration4216 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4226 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration4237 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4239 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _block_in_statement4270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4294 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4314 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4317 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4319 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4333 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4336 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4339 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4341 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement4367 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4369 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4371 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _ELSE_in_statement4374 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forstatement_in_statement4398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement4408 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4410 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement4422 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4424 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _WHILE_in_statement4426 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4428 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _trystatement_in_statement4440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement4450 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4452 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_statement4454 = new BitSet(new ulong[]{0x20080000UL,0x1000000UL});
		public static readonly BitSet _switchBlockStatementGroups_in_statement4456 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_statement4458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement4468 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4470 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_statement4472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement4482 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_statement4485 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement4500 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4502 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement4514 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4529 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement4556 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4571 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement4598 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_statement4616 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_statement4618 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement4630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchBlockStatementGroup_in_switchBlockStatementGroups4652 = new BitSet(new ulong[]{0x20080002UL});
		public static readonly BitSet _switchLabel_in_switchBlockStatementGroup4681 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _blockStatement_in_switchBlockStatementGroup4692 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _CASE_in_switchLabel4723 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_switchLabel4725 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_switchLabel4737 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_trystatement4760 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4762 = new BitSet(new ulong[]{0x200000100000UL});
		public static readonly BitSet _catches_in_trystatement4776 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_trystatement4778 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_trystatement4794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_trystatement4808 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches4841 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _catchClause_in_catches4852 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _CATCH_in_catchClause4883 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_catchClause4885 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _formalParameter_in_catchClause4887 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_catchClause4897 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_catchClause4899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_formalParameter4920 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_formalParameter4922 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_formalParameter4924 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_formalParameter4935 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_formalParameter4937 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _FOR_in_forstatement4986 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement4988 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_forstatement4990 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_forstatement4992 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_forstatement4994 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_forstatement4996 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_forstatement5007 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5009 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forstatement5043 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement5045 = new BitSet(new ulong[]{0x2840D80300614200UL,0xA91B0300A1A70UL});
		public static readonly BitSet _forInit_in_forstatement5065 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5086 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_forstatement5106 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5127 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_forstatement5147 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5168 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit5190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit5200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parExpression5220 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_parExpression5222 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_parExpression5224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList5244 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_expressionList5255 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expressionList5257 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _conditionalExpression_in_expression5289 = new BitSet(new ulong[]{0x8004000042082UL,0x4280050080UL});
		public static readonly BitSet _assignmentOperator_in_expression5300 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expression5302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_assignmentOperator5334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSEQ_in_assignmentOperator5344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBEQ_in_assignmentOperator5354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAREQ_in_assignmentOperator5364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLASHEQ_in_assignmentOperator5374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AMPEQ_in_assignmentOperator5384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BAREQ_in_assignmentOperator5394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CARETEQ_in_assignmentOperator5404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PERCENTEQ_in_assignmentOperator5414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_assignmentOperator5425 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_assignmentOperator5427 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5440 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5442 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5444 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5457 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5459 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression5482 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _QUES_in_conditionalExpression5493 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_conditionalExpression5495 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5497 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression5499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5530 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _BARBAR_in_conditionalOrExpression5541 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5543 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5574 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AMPAMP_in_conditionalAndExpression5585 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5587 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5618 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _BAR_in_inclusiveOrExpression5629 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5631 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5662 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _CARET_in_exclusiveOrExpression5673 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5675 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _equalityExpression_in_andExpression5706 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_andExpression5717 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _equalityExpression_in_andExpression5719 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression5750 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _set_in_equalityExpression5777 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression5827 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression5858 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression5869 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_instanceOfExpression5871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression5902 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _relationalOp_in_relationalExpression5913 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression5915 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_relationalOp5947 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp5949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp5960 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp5962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_relationalOp5972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp5982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6002 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _shiftOp_in_shiftExpression6013 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6015 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6048 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6061 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6063 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6076 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6099 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _set_in_additiveExpression6126 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6176 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6214 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _set_in_multiplicativeExpression6241 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6309 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _PLUS_in_unaryExpression6342 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryExpression6355 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSPLUS_in_unaryExpression6367 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBSUB_in_unaryExpression6379 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression6391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILDE_in_unaryExpressionNotPlusMinus6411 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BANG_in_unaryExpressionNotPlusMinus6423 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_unaryExpressionNotPlusMinus6435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_unaryExpressionNotPlusMinus6445 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _selector_in_unaryExpressionNotPlusMinus6456 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _LPAREN_in_castExpression6526 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_castExpression6528 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6530 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_castExpression6532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_castExpression6542 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_castExpression6544 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6546 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA911020001870UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_castExpression6548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parExpression_in_primary6570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primary6592 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary6603 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary6605 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary6627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary6648 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary6659 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary6661 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary6683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primary6704 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_primary6714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary6724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _creator_in_primary6734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primary6744 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_primary6755 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_primary6757 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_primary6778 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary6780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primary6790 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_primary6792 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary6794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_superSuffix6820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_superSuffix6830 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeArguments_in_superSuffix6833 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_superSuffix6854 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_superSuffix6865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix6898 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix6900 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_identifierSuffix6921 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix6923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix6934 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_identifierSuffix6936 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix6938 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arguments_in_identifierSuffix6959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix6969 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix6971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix6981 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_identifierSuffix6983 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_identifierSuffix6985 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix6987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix6997 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_identifierSuffix6999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7009 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_identifierSuffix7011 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix7013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_identifierSuffix7023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7045 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_selector7047 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_selector7058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7079 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_selector7081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7091 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_selector7093 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_selector7103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_selector7113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_selector7123 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_selector7125 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_selector7127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7147 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_creator7149 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7151 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7163 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7165 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayCreator_in_creator7177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7197 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7199 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7209 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7211 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7222 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7224 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_arrayCreator7245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7256 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7258 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7268 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7270 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7280 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7294 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7296 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7310 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7332 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7334 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer7365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer7375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_arrayInitializer7395 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7411 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7430 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7432 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7482 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_arrayInitializer7495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_createdName7529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_createdName7539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_innerCreator7560 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _NEW_in_innerCreator7562 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_innerCreator7573 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_innerCreator7594 = new BitSet(new ulong[]{0x0UL,0xC0UL});
		public static readonly BitSet _typeArguments_in_innerCreator7605 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_innerCreator7626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_classCreatorRest7647 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_classCreatorRest7658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_nonWildcardTypeArguments7690 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_nonWildcardTypeArguments7692 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_nonWildcardTypeArguments7702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments7722 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_arguments7725 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_arguments7738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_classHeader7862 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_classHeader7864 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classHeader7866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_enumHeader7886 = new BitSet(new ulong[]{0x40002000000000UL});
		public static readonly BitSet _set_in_enumHeader7888 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumHeader7894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceHeader7914 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_interfaceHeader7916 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceHeader7918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationHeader7938 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationHeader7940 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationHeader7942 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationHeader7944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_typeHeader7964 = new BitSet(new ulong[]{0x1000002000800000UL,0x200UL});
		public static readonly BitSet _CLASS_in_typeHeader7967 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _ENUM_in_typeHeader7969 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _MONKEYS_AT_in_typeHeader7972 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_typeHeader7976 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_typeHeader7980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodHeader8000 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodHeader8002 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodHeader8006 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodHeader8008 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodHeader8012 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_methodHeader8014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldHeader8034 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldHeader8036 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_fieldHeader8038 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_fieldHeader8041 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_fieldHeader8042 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_fieldHeader8046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableHeader8072 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableHeader8074 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableHeader8076 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_localVariableHeader8079 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_localVariableHeader8080 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_localVariableHeader8084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotations_in_synpred2_Java82 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_synpred2_Java111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred12_Java469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred27_Java706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred43_Java1385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_synpred52_Java1715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_synpred53_Java1726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred54_Java1737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred57_Java1874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred59_Java1786 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_synpred59_Java1797 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred59_Java1818 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_synpred59_Java1828 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_synpred59_Java1839 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_synpred59_Java1841 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_synpred59_Java1862 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred59_Java1874 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_synpred59_Java1896 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_synpred59_Java1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred68_Java2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_synpred69_Java2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_synpred70_Java2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred71_Java2322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_synpred96_Java3086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3096 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_synpred98_Java3107 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3109 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_synpred99_Java3131 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_synpred99_Java3141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred103_Java3276 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_synpred103_Java3302 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_synpred103_Java3334 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred103_Java3336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_synpred117_Java3935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred118_Java3945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred119_Java3955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred120_Java3965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_synpred121_Java3975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_synpred122_Java3985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_synpred125_Java4143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_synpred126_Java4153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred130_Java4294 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4314 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred130_Java4317 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4319 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred130_Java4323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred132_Java4333 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4336 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred132_Java4339 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4341 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred132_Java4345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred133_Java4374 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred133_Java4376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred148_Java4598 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred148_Java4601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_synpred149_Java4616 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred149_Java4618 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred149_Java4620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred153_Java4776 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_synpred153_Java4778 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_synpred153_Java4780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred154_Java4794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_synpred157_Java4986 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_synpred157_Java4988 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_synpred157_Java4990 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_synpred157_Java4992 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred157_Java4994 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred157_Java4996 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred157_Java5007 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred157_Java5009 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred157_Java5011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred161_Java5190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_synpred202_Java6435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred206_Java6526 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_synpred206_Java6528 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred206_Java6530 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_synpred206_Java6532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred208_Java6603 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred208_Java6605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred209_Java6627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred211_Java6659 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred211_Java6661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred212_Java6683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred224_Java6934 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred224_Java6936 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred224_Java6938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred236_Java7147 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred236_Java7149 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred236_Java7151 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred236_Java7153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred237_Java7163 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred237_Java7165 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred237_Java7167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred239_Java7197 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_synpred239_Java7199 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_synpred239_Java7209 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred239_Java7211 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_synpred239_Java7222 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred239_Java7224 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_synpred239_Java7245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred240_Java7294 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred240_Java7296 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred240_Java7310 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
