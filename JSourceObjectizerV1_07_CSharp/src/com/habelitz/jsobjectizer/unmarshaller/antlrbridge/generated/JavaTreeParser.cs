//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 JavaTreeParser.g 2012-05-12 11:58:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
// Should be replaced for individual needs.
namespace com.habelitz.jsobjectizer.unmarshaller.antlrbridge.generated {


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/**
 * For more information see the head comment within the 'java.g' grammar file
 * that defines the input for this tree grammar.
 *
 * BSD license
 * 
 * Copyright (c) 2007-2011 by HABELITZ Software Developments
 *
 * All rights reserved.
 * 
 * http://www.habelitz.com
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY HABELITZ SOFTWARE DEVELOPMENTS ('HSD') ``AS IS'' 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL 'HSD' BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class JavaTreeParser : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSERT", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_COMMENT", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "CONST", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_FP_LITERAL", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GOTO", "GREATER_OR_EQUAL", "GREATER_THAN", "HEXADECIMAL_FP_LITERAL", "HEX_DIGIT", "HEX_LITERAL", "HEX_PREFIX", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVADOC_COMMENT", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NL", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "SIGNED_INTEGER", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WS", "XOR", "XOR_ASSIGN"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSERT=20;
	public const int ASSIGN=21;
	public const int AT=22;
	public const int BIT_SHIFT_RIGHT=23;
	public const int BIT_SHIFT_RIGHT_ASSIGN=24;
	public const int BLOCK_COMMENT=25;
	public const int BLOCK_SCOPE=26;
	public const int BOOLEAN=27;
	public const int BREAK=28;
	public const int BYTE=29;
	public const int CASE=30;
	public const int CAST_EXPR=31;
	public const int CATCH=32;
	public const int CATCH_CLAUSE_LIST=33;
	public const int CHAR=34;
	public const int CHARACTER_LITERAL=35;
	public const int CLASS=36;
	public const int CLASS_CONSTRUCTOR_CALL=37;
	public const int CLASS_INSTANCE_INITIALIZER=38;
	public const int CLASS_STATIC_INITIALIZER=39;
	public const int CLASS_TOP_LEVEL_SCOPE=40;
	public const int COLON=41;
	public const int COMMA=42;
	public const int CONST=43;
	public const int CONSTRUCTOR_DECL=44;
	public const int CONTINUE=45;
	public const int DEC=46;
	public const int DECIMAL_FP_LITERAL=47;
	public const int DECIMAL_LITERAL=48;
	public const int DEFAULT=49;
	public const int DIV=50;
	public const int DIV_ASSIGN=51;
	public const int DO=52;
	public const int DOT=53;
	public const int DOTSTAR=54;
	public const int DOUBLE=55;
	public const int ELLIPSIS=56;
	public const int ELSE=57;
	public const int ENUM=58;
	public const int ENUM_TOP_LEVEL_SCOPE=59;
	public const int EQUAL=60;
	public const int ESCAPE_SEQUENCE=61;
	public const int EXPONENT=62;
	public const int EXPR=63;
	public const int EXTENDS=64;
	public const int EXTENDS_BOUND_LIST=65;
	public const int EXTENDS_CLAUSE=66;
	public const int FALSE=67;
	public const int FINAL=68;
	public const int FINALLY=69;
	public const int FLOAT=70;
	public const int FLOATING_POINT_LITERAL=71;
	public const int FLOAT_TYPE_SUFFIX=72;
	public const int FOR=73;
	public const int FORMAL_PARAM_LIST=74;
	public const int FORMAL_PARAM_STD_DECL=75;
	public const int FORMAL_PARAM_VARARG_DECL=76;
	public const int FOR_CONDITION=77;
	public const int FOR_EACH=78;
	public const int FOR_INIT=79;
	public const int FOR_UPDATE=80;
	public const int FUNCTION_METHOD_DECL=81;
	public const int GENERIC_TYPE_ARG_LIST=82;
	public const int GENERIC_TYPE_PARAM_LIST=83;
	public const int GOTO=84;
	public const int GREATER_OR_EQUAL=85;
	public const int GREATER_THAN=86;
	public const int HEXADECIMAL_FP_LITERAL=87;
	public const int HEX_DIGIT=88;
	public const int HEX_LITERAL=89;
	public const int HEX_PREFIX=90;
	public const int IDENT=91;
	public const int IF=92;
	public const int IMPLEMENTS=93;
	public const int IMPLEMENTS_CLAUSE=94;
	public const int IMPORT=95;
	public const int INC=96;
	public const int INSTANCEOF=97;
	public const int INT=98;
	public const int INTEGER_TYPE_SUFFIX=99;
	public const int INTERFACE=100;
	public const int INTERFACE_TOP_LEVEL_SCOPE=101;
	public const int JAVADOC_COMMENT=102;
	public const int JAVA_ID_PART=103;
	public const int JAVA_ID_START=104;
	public const int JAVA_SOURCE=105;
	public const int LABELED_STATEMENT=106;
	public const int LBRACK=107;
	public const int LCURLY=108;
	public const int LESS_OR_EQUAL=109;
	public const int LESS_THAN=110;
	public const int LINE_COMMENT=111;
	public const int LOCAL_MODIFIER_LIST=112;
	public const int LOGICAL_AND=113;
	public const int LOGICAL_NOT=114;
	public const int LOGICAL_OR=115;
	public const int LONG=116;
	public const int LPAREN=117;
	public const int METHOD_CALL=118;
	public const int MINUS=119;
	public const int MINUS_ASSIGN=120;
	public const int MOD=121;
	public const int MODIFIER_LIST=122;
	public const int MOD_ASSIGN=123;
	public const int NATIVE=124;
	public const int NEW=125;
	public const int NL=126;
	public const int NOT=127;
	public const int NOT_EQUAL=128;
	public const int NULL=129;
	public const int OCTAL_ESCAPE=130;
	public const int OCTAL_LITERAL=131;
	public const int OR=132;
	public const int OR_ASSIGN=133;
	public const int PACKAGE=134;
	public const int PARENTESIZED_EXPR=135;
	public const int PLUS=136;
	public const int PLUS_ASSIGN=137;
	public const int POST_DEC=138;
	public const int POST_INC=139;
	public const int PRE_DEC=140;
	public const int PRE_INC=141;
	public const int PRIVATE=142;
	public const int PROTECTED=143;
	public const int PUBLIC=144;
	public const int QUALIFIED_TYPE_IDENT=145;
	public const int QUESTION=146;
	public const int RBRACK=147;
	public const int RCURLY=148;
	public const int RETURN=149;
	public const int RPAREN=150;
	public const int SEMI=151;
	public const int SHIFT_LEFT=152;
	public const int SHIFT_LEFT_ASSIGN=153;
	public const int SHIFT_RIGHT=154;
	public const int SHIFT_RIGHT_ASSIGN=155;
	public const int SHORT=156;
	public const int SIGNED_INTEGER=157;
	public const int STAR=158;
	public const int STAR_ASSIGN=159;
	public const int STATIC=160;
	public const int STATIC_ARRAY_CREATOR=161;
	public const int STRICTFP=162;
	public const int STRING_LITERAL=163;
	public const int SUPER=164;
	public const int SUPER_CONSTRUCTOR_CALL=165;
	public const int SWITCH=166;
	public const int SWITCH_BLOCK_LABEL_LIST=167;
	public const int SYNCHRONIZED=168;
	public const int THIS=169;
	public const int THIS_CONSTRUCTOR_CALL=170;
	public const int THROW=171;
	public const int THROWS=172;
	public const int THROWS_CLAUSE=173;
	public const int TRANSIENT=174;
	public const int TRUE=175;
	public const int TRY=176;
	public const int TYPE=177;
	public const int UNARY_MINUS=178;
	public const int UNARY_PLUS=179;
	public const int UNICODE_ESCAPE=180;
	public const int VAR_DECLARATION=181;
	public const int VAR_DECLARATOR=182;
	public const int VAR_DECLARATOR_LIST=183;
	public const int VOID=184;
	public const int VOID_METHOD_DECL=185;
	public const int VOLATILE=186;
	public const int WHILE=187;
	public const int WS=188;
	public const int XOR=189;
	public const int XOR_ASSIGN=190;

	public JavaTreeParser(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaTreeParser(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[289+1];


		OnCreated();
	}

	public override string[] TokenNames { get { return JavaTreeParser.tokenNames; } }
	public override string GrammarFileName { get { return "JavaTreeParser.g"; } }


	    
	private bool mMessageCollectionEnabled = false;
	private List<String> mMessages;

	/**
	 * Switches error message collection on or of.
	 * <p>
	 * The standard destination for parser error messages is <code>
	 * System.err</code>. However, if <code>true</code> gets passed to this method 
	 * this default behaviour will be switched off and all error messages will be 
	 * collected instead of writing them to an output stream.
	 * <p>
	 * The default value is <code>false</code>.
	 *
	 * @param pNewState  <code>true</code> if error messages should be collected.
	 */
	public void EnableErrorMessageCollection(bool pNewState) {

	    mMessageCollectionEnabled = pNewState;
	    if (mMessages == null && mMessageCollectionEnabled) {
	        mMessages = new List<String>();
	    }
	}

	/**
	 * Collects an error message or passes the error message to <code>
	 * base.EmitErrorMessage(...)</code>.
	 * <p>
	 * The actual behaviour depends on whether collecting error messages has been 
	 * enabled or not.
	 *
	 * @param pMessage  The error message.
	 */
	public override void EmitErrorMessage(String pMessage) {

	    if (mMessageCollectionEnabled) {
	        mMessages.Add(pMessage);
	    } else {
	        base.EmitErrorMessage(pMessage);
	    }
	}

	/**
	 * Returns collected error messages.
	 * <p>
	 * This method returns a copy of the internal list of error messages and clears
	 * the internal list.
	 * <p>
	 * Note that calling this method eqauls to a <code>getMessages(null)</code>
	 * call.
	 *
	 * @see #getMessages(List)
	 *
	 * @return  A list holding collected error messages or <code>null</code> if
	 *          collecting error messages is disabled. Of course, the returned list 
	 *		    may be empty if no error message has been emited.
	 */
	public List<String> GetMessages() {

		return GetMessages(null);
	}

	/**
	 * Returns collected error messages.
	 *
	 * @param pUserList  If this argument is not <code>null</code> the error
	 *                   messages will be added to this list and it's this list that
	 *                   will be returned. Otherwise a copy of the internal list of 
	 *                   error messages will be created and returned. The internal
	 *                   list will be cleared just before the method returns.
	 *
	 * @return  A list holding collected error messages. If collecting error 
	 *          messages is disabled <code>null</code> will be returned, even if the 
	 *			argument <code>pUserList</code> is not <code>null</code>.
	 */
	public List<String> GetMessages(List<String> pUserList) {

		if (!mMessageCollectionEnabled) {
		    return null;
		}
		List<String> result = pUserList;
		if (result == null) {
			result = new List<String>();
		}
		result.AddRange(mMessages);
	    mMessages.Clear();
	    
	    return result;
	}

	/**
	 * Tells if there is any collected error messages.
	 *
	 * @return  <code>true</code> if there is at least one collected error message.
	 */
	public bool HasErrors() {

	    return mMessages != null && mMessages.Count > 0;
	}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_javaSource();
	partial void LeaveRule_javaSource();
	// $ANTLR start "javaSource"
	// JavaTreeParser.g:157:1: javaSource : ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) ;
	[GrammarRule("javaSource")]
	public void javaSource()
	{
		EnterRule_javaSource();
		EnterRule("javaSource", 1);
		TraceIn("javaSource", 1);
		int javaSource_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "javaSource");
		DebugLocation(157, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return; }

			// JavaTreeParser.g:158:5: ( ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:158:9: ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
			{
			DebugLocation(158, 9);
			DebugLocation(158, 11);
			Match(input,JAVA_SOURCE,Follow._JAVA_SOURCE_in_javaSource92); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(158, 23);
			PushFollow(Follow._annotationList_in_javaSource94);
			annotationList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(158, 38);
			// JavaTreeParser.g:158:38: ( packageDeclaration )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==PACKAGE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:158:38: packageDeclaration
				{
				DebugLocation(158, 38);
				PushFollow(Follow._packageDeclaration_in_javaSource96);
				packageDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(158, 58);
			// JavaTreeParser.g:158:58: ( importDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:158:58: importDeclaration
					{
					DebugLocation(158, 58);
					PushFollow(Follow._importDeclaration_in_javaSource99);
					importDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(158, 77);
			// JavaTreeParser.g:158:77: ( typeDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==AT||LA3_1==CLASS||LA3_1==ENUM||LA3_1==INTERFACE))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:158:77: typeDeclaration
					{
					DebugLocation(158, 77);
					PushFollow(Follow._typeDeclaration_in_javaSource102);
					typeDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("javaSource", 1);
			LeaveRule("javaSource", 1);
			LeaveRule_javaSource();
			if (state.backtracking > 0) { Memoize(input, 1, javaSource_StartIndex); }

		}
		DebugLocation(159, 4);
		} finally { DebugExitRule(GrammarFileName, "javaSource"); }
		return;

	}
	// $ANTLR end "javaSource"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// JavaTreeParser.g:161:1: packageDeclaration : ^( PACKAGE qualifiedIdentifier ) ;
	[GrammarRule("packageDeclaration")]
	public void packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
		int packageDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(161, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return; }

			// JavaTreeParser.g:162:5: ( ^( PACKAGE qualifiedIdentifier ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:162:9: ^( PACKAGE qualifiedIdentifier )
			{
			DebugLocation(162, 9);
			DebugLocation(162, 11);
			Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration124); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(162, 19);
			PushFollow(Follow._qualifiedIdentifier_in_packageDeclaration126);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

		}
		DebugLocation(163, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// JavaTreeParser.g:165:1: importDeclaration : ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? ) ;
	[GrammarRule("importDeclaration")]
	public void importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		int importDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(165, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return; }

			// JavaTreeParser.g:166:5: ( ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:166:9: ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? )
			{
			DebugLocation(166, 9);
			DebugLocation(166, 11);
			Match(input,IMPORT,Follow._IMPORT_in_importDeclaration153); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(166, 18);
			// JavaTreeParser.g:166:18: ( STATIC )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==STATIC))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:166:18: STATIC
				{
				DebugLocation(166, 18);
				Match(input,STATIC,Follow._STATIC_in_importDeclaration155); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(166, 26);
			PushFollow(Follow._qualifiedIdentifier_in_importDeclaration158);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(166, 46);
			// JavaTreeParser.g:166:46: ( DOTSTAR )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==DOTSTAR))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:166:46: DOTSTAR
				{
				DebugLocation(166, 46);
				Match(input,DOTSTAR,Follow._DOTSTAR_in_importDeclaration160); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

		}
		DebugLocation(167, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// JavaTreeParser.g:169:1: typeDeclaration : ( ^( CLASS modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope ) | ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope ) | ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope ) | ^( AT modifierList IDENT annotationTopLevelScope ) );
	[GrammarRule("typeDeclaration")]
	public void typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 4);
		TraceIn("typeDeclaration", 4);
		int typeDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(169, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return; }

			// JavaTreeParser.g:170:5: ( ^( CLASS modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope ) | ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope ) | ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope ) | ^( AT modifierList IDENT annotationTopLevelScope ) )
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			case ENUM:
				{
				alt12 = 3;
				}
				break;
			case AT:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:170:9: ^( CLASS modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope )
				{
				DebugLocation(170, 9);
				DebugLocation(170, 11);
				Match(input,CLASS,Follow._CLASS_in_typeDeclaration186); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(170, 17);
				PushFollow(Follow._modifierList_in_typeDeclaration188);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(170, 30);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration190); if (state.failed) return;
				DebugLocation(170, 36);
				// JavaTreeParser.g:170:36: ( genericTypeParameterList )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:170:36: genericTypeParameterList
					{
					DebugLocation(170, 36);
					PushFollow(Follow._genericTypeParameterList_in_typeDeclaration192);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(170, 62);
				// JavaTreeParser.g:170:62: ( extendsClause )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==EXTENDS_CLAUSE))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:170:62: extendsClause
					{
					DebugLocation(170, 62);
					PushFollow(Follow._extendsClause_in_typeDeclaration195);
					extendsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(170, 77);
				// JavaTreeParser.g:170:77: ( implementsClause )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==IMPLEMENTS_CLAUSE))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:170:77: implementsClause
					{
					DebugLocation(170, 77);
					PushFollow(Follow._implementsClause_in_typeDeclaration198);
					implementsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(170, 95);
				PushFollow(Follow._classTopLevelScope_in_typeDeclaration201);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:171:9: ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope )
				{
				DebugLocation(171, 9);
				DebugLocation(171, 11);
				Match(input,INTERFACE,Follow._INTERFACE_in_typeDeclaration213); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(171, 21);
				PushFollow(Follow._modifierList_in_typeDeclaration215);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(171, 34);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration217); if (state.failed) return;
				DebugLocation(171, 40);
				// JavaTreeParser.g:171:40: ( genericTypeParameterList )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:171:40: genericTypeParameterList
					{
					DebugLocation(171, 40);
					PushFollow(Follow._genericTypeParameterList_in_typeDeclaration219);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(171, 66);
				// JavaTreeParser.g:171:66: ( extendsClause )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==EXTENDS_CLAUSE))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:171:66: extendsClause
					{
					DebugLocation(171, 66);
					PushFollow(Follow._extendsClause_in_typeDeclaration222);
					extendsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(171, 81);
				PushFollow(Follow._interfaceTopLevelScope_in_typeDeclaration225);
				interfaceTopLevelScope();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:172:9: ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope )
				{
				DebugLocation(172, 9);
				DebugLocation(172, 11);
				Match(input,ENUM,Follow._ENUM_in_typeDeclaration237); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(172, 16);
				PushFollow(Follow._modifierList_in_typeDeclaration239);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(172, 29);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration241); if (state.failed) return;
				DebugLocation(172, 35);
				// JavaTreeParser.g:172:35: ( implementsClause )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==IMPLEMENTS_CLAUSE))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:172:35: implementsClause
					{
					DebugLocation(172, 35);
					PushFollow(Follow._implementsClause_in_typeDeclaration243);
					implementsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(172, 53);
				PushFollow(Follow._enumTopLevelScope_in_typeDeclaration246);
				enumTopLevelScope();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaTreeParser.g:173:9: ^( AT modifierList IDENT annotationTopLevelScope )
				{
				DebugLocation(173, 9);
				DebugLocation(173, 11);
				Match(input,AT,Follow._AT_in_typeDeclaration258); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(173, 14);
				PushFollow(Follow._modifierList_in_typeDeclaration260);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(173, 27);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration262); if (state.failed) return;
				DebugLocation(173, 33);
				PushFollow(Follow._annotationTopLevelScope_in_typeDeclaration264);
				annotationTopLevelScope();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeDeclaration", 4);
			LeaveRule("typeDeclaration", 4);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 4, typeDeclaration_StartIndex); }

		}
		DebugLocation(174, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_extendsClause();
	partial void LeaveRule_extendsClause();
	// $ANTLR start "extendsClause"
	// JavaTreeParser.g:176:1: extendsClause : ^( EXTENDS_CLAUSE ( type )+ ) ;
	[GrammarRule("extendsClause")]
	public void extendsClause()
	{
		EnterRule_extendsClause();
		EnterRule("extendsClause", 5);
		TraceIn("extendsClause", 5);
		int extendsClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "extendsClause");
		DebugLocation(176, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return; }

			// JavaTreeParser.g:178:5: ( ^( EXTENDS_CLAUSE ( type )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:178:9: ^( EXTENDS_CLAUSE ( type )+ )
			{
			DebugLocation(178, 9);
			DebugLocation(178, 11);
			Match(input,EXTENDS_CLAUSE,Follow._EXTENDS_CLAUSE_in_extendsClause301); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(178, 26);
			// JavaTreeParser.g:178:26: ( type )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==TYPE))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:178:26: type
					{
					DebugLocation(178, 26);
					PushFollow(Follow._type_in_extendsClause303);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("extendsClause", 5);
			LeaveRule("extendsClause", 5);
			LeaveRule_extendsClause();
			if (state.backtracking > 0) { Memoize(input, 5, extendsClause_StartIndex); }

		}
		DebugLocation(179, 4);
		} finally { DebugExitRule(GrammarFileName, "extendsClause"); }
		return;

	}
	// $ANTLR end "extendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// JavaTreeParser.g:181:1: implementsClause : ^( IMPLEMENTS_CLAUSE ( type )+ ) ;
	[GrammarRule("implementsClause")]
	public void implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 6);
		TraceIn("implementsClause", 6);
		int implementsClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(181, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return; }

			// JavaTreeParser.g:182:5: ( ^( IMPLEMENTS_CLAUSE ( type )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:182:9: ^( IMPLEMENTS_CLAUSE ( type )+ )
			{
			DebugLocation(182, 9);
			DebugLocation(182, 11);
			Match(input,IMPLEMENTS_CLAUSE,Follow._IMPLEMENTS_CLAUSE_in_implementsClause332); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(182, 29);
			// JavaTreeParser.g:182:29: ( type )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==TYPE))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:182:29: type
					{
					DebugLocation(182, 29);
					PushFollow(Follow._type_in_implementsClause334);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implementsClause", 6);
			LeaveRule("implementsClause", 6);
			LeaveRule_implementsClause();
			if (state.backtracking > 0) { Memoize(input, 6, implementsClause_StartIndex); }

		}
		DebugLocation(183, 4);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_genericTypeParameterList();
	partial void LeaveRule_genericTypeParameterList();
	// $ANTLR start "genericTypeParameterList"
	// JavaTreeParser.g:185:1: genericTypeParameterList : ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ ) ;
	[GrammarRule("genericTypeParameterList")]
	public void genericTypeParameterList()
	{
		EnterRule_genericTypeParameterList();
		EnterRule("genericTypeParameterList", 7);
		TraceIn("genericTypeParameterList", 7);
		int genericTypeParameterList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericTypeParameterList");
		DebugLocation(185, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return; }

			// JavaTreeParser.g:186:5: ( ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:186:9: ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ )
			{
			DebugLocation(186, 9);
			DebugLocation(186, 11);
			Match(input,GENERIC_TYPE_PARAM_LIST,Follow._GENERIC_TYPE_PARAM_LIST_in_genericTypeParameterList364); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(186, 35);
			// JavaTreeParser.g:186:35: ( genericTypeParameter )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==IDENT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:186:35: genericTypeParameter
					{
					DebugLocation(186, 35);
					PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList366);
					genericTypeParameter();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeParameterList", 7);
			LeaveRule("genericTypeParameterList", 7);
			LeaveRule_genericTypeParameterList();
			if (state.backtracking > 0) { Memoize(input, 7, genericTypeParameterList_StartIndex); }

		}
		DebugLocation(187, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameterList"); }
		return;

	}
	// $ANTLR end "genericTypeParameterList"

	partial void EnterRule_genericTypeParameter();
	partial void LeaveRule_genericTypeParameter();
	// $ANTLR start "genericTypeParameter"
	// JavaTreeParser.g:189:1: genericTypeParameter : ^( IDENT ( bound )? ) ;
	[GrammarRule("genericTypeParameter")]
	public void genericTypeParameter()
	{
		EnterRule_genericTypeParameter();
		EnterRule("genericTypeParameter", 8);
		TraceIn("genericTypeParameter", 8);
		int genericTypeParameter_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericTypeParameter");
		DebugLocation(189, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return; }

			// JavaTreeParser.g:190:5: ( ^( IDENT ( bound )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:190:9: ^( IDENT ( bound )? )
			{
			DebugLocation(190, 9);
			DebugLocation(190, 11);
			Match(input,IDENT,Follow._IDENT_in_genericTypeParameter388); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(190, 17);
				// JavaTreeParser.g:190:17: ( bound )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==EXTENDS_BOUND_LIST))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:190:17: bound
					{
					DebugLocation(190, 17);
					PushFollow(Follow._bound_in_genericTypeParameter390);
					bound();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeParameter", 8);
			LeaveRule("genericTypeParameter", 8);
			LeaveRule_genericTypeParameter();
			if (state.backtracking > 0) { Memoize(input, 8, genericTypeParameter_StartIndex); }

		}
		DebugLocation(191, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameter"); }
		return;

	}
	// $ANTLR end "genericTypeParameter"

	partial void EnterRule_bound();
	partial void LeaveRule_bound();
	// $ANTLR start "bound"
	// JavaTreeParser.g:193:1: bound : ^( EXTENDS_BOUND_LIST ( type )+ ) ;
	[GrammarRule("bound")]
	public void bound()
	{
		EnterRule_bound();
		EnterRule("bound", 9);
		TraceIn("bound", 9);
		int bound_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bound");
		DebugLocation(193, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return; }

			// JavaTreeParser.g:194:5: ( ^( EXTENDS_BOUND_LIST ( type )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:194:9: ^( EXTENDS_BOUND_LIST ( type )+ )
			{
			DebugLocation(194, 9);
			DebugLocation(194, 11);
			Match(input,EXTENDS_BOUND_LIST,Follow._EXTENDS_BOUND_LIST_in_bound420); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(194, 30);
			// JavaTreeParser.g:194:30: ( type )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==TYPE))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:194:30: type
					{
					DebugLocation(194, 30);
					PushFollow(Follow._type_in_bound422);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bound", 9);
			LeaveRule("bound", 9);
			LeaveRule_bound();
			if (state.backtracking > 0) { Memoize(input, 9, bound_StartIndex); }

		}
		DebugLocation(195, 4);
		} finally { DebugExitRule(GrammarFileName, "bound"); }
		return;

	}
	// $ANTLR end "bound"

	partial void EnterRule_enumTopLevelScope();
	partial void LeaveRule_enumTopLevelScope();
	// $ANTLR start "enumTopLevelScope"
	// JavaTreeParser.g:197:1: enumTopLevelScope : ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )* ( classTopLevelScope )? ) ;
	[GrammarRule("enumTopLevelScope")]
	public void enumTopLevelScope()
	{
		EnterRule_enumTopLevelScope();
		EnterRule("enumTopLevelScope", 10);
		TraceIn("enumTopLevelScope", 10);
		int enumTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumTopLevelScope");
		DebugLocation(197, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return; }

			// JavaTreeParser.g:198:5: ( ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )* ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:198:9: ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )* ( classTopLevelScope )? )
			{
			DebugLocation(198, 9);
			DebugLocation(198, 11);
			Match(input,ENUM_TOP_LEVEL_SCOPE,Follow._ENUM_TOP_LEVEL_SCOPE_in_enumTopLevelScope444); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(198, 32);
				// JavaTreeParser.g:198:32: ( enumConstant )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if ((LA18_1==IDENT))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:198:32: enumConstant
						{
						DebugLocation(198, 32);
						PushFollow(Follow._enumConstant_in_enumTopLevelScope446);
						enumConstant();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(198, 46);
				// JavaTreeParser.g:198:46: ( classTopLevelScope )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==CLASS_TOP_LEVEL_SCOPE))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:198:46: classTopLevelScope
					{
					DebugLocation(198, 46);
					PushFollow(Follow._classTopLevelScope_in_enumTopLevelScope449);
					classTopLevelScope();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumTopLevelScope", 10);
			LeaveRule("enumTopLevelScope", 10);
			LeaveRule_enumTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 10, enumTopLevelScope_StartIndex); }

		}
		DebugLocation(199, 4);
		} finally { DebugExitRule(GrammarFileName, "enumTopLevelScope"); }
		return;

	}
	// $ANTLR end "enumTopLevelScope"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// JavaTreeParser.g:201:1: enumConstant : ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? ) ;
	[GrammarRule("enumConstant")]
	public void enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 11);
		TraceIn("enumConstant", 11);
		int enumConstant_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(201, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return; }

			// JavaTreeParser.g:202:5: ( ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:202:9: ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? )
			{
			DebugLocation(202, 9);
			DebugLocation(202, 11);
			Match(input,IDENT,Follow._IDENT_in_enumConstant475); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(202, 17);
			PushFollow(Follow._annotationList_in_enumConstant477);
			annotationList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(202, 32);
			// JavaTreeParser.g:202:32: ( arguments )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==ARGUMENT_LIST))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:202:32: arguments
				{
				DebugLocation(202, 32);
				PushFollow(Follow._arguments_in_enumConstant479);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(202, 43);
			// JavaTreeParser.g:202:43: ( classTopLevelScope )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:202:43: classTopLevelScope
				{
				DebugLocation(202, 43);
				PushFollow(Follow._classTopLevelScope_in_enumConstant482);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumConstant", 11);
			LeaveRule("enumConstant", 11);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 11, enumConstant_StartIndex); }

		}
		DebugLocation(203, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_classTopLevelScope();
	partial void LeaveRule_classTopLevelScope();
	// $ANTLR start "classTopLevelScope"
	// JavaTreeParser.g:206:1: classTopLevelScope : ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* ) ;
	[GrammarRule("classTopLevelScope")]
	public void classTopLevelScope()
	{
		EnterRule_classTopLevelScope();
		EnterRule("classTopLevelScope", 12);
		TraceIn("classTopLevelScope", 12);
		int classTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classTopLevelScope");
		DebugLocation(206, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return; }

			// JavaTreeParser.g:207:5: ( ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:207:9: ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* )
			{
			DebugLocation(207, 9);
			DebugLocation(207, 11);
			Match(input,CLASS_TOP_LEVEL_SCOPE,Follow._CLASS_TOP_LEVEL_SCOPE_in_classTopLevelScope513); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(207, 33);
				// JavaTreeParser.g:207:33: ( classScopeDeclarations )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_1 = input.LA(1);

					if ((LA22_1==AT||LA22_1==CLASS||(LA22_1>=CLASS_INSTANCE_INITIALIZER && LA22_1<=CLASS_STATIC_INITIALIZER)||LA22_1==CONSTRUCTOR_DECL||LA22_1==ENUM||LA22_1==FUNCTION_METHOD_DECL||LA22_1==INTERFACE||LA22_1==VAR_DECLARATION||LA22_1==VOID_METHOD_DECL))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:207:33: classScopeDeclarations
						{
						DebugLocation(207, 33);
						PushFollow(Follow._classScopeDeclarations_in_classTopLevelScope515);
						classScopeDeclarations();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classTopLevelScope", 12);
			LeaveRule("classTopLevelScope", 12);
			LeaveRule_classTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 12, classTopLevelScope_StartIndex); }

		}
		DebugLocation(208, 4);
		} finally { DebugExitRule(GrammarFileName, "classTopLevelScope"); }
		return;

	}
	// $ANTLR end "classTopLevelScope"

	partial void EnterRule_classScopeDeclarations();
	partial void LeaveRule_classScopeDeclarations();
	// $ANTLR start "classScopeDeclarations"
	// JavaTreeParser.g:210:1: classScopeDeclarations : ( ^( CLASS_INSTANCE_INITIALIZER block ) | ^( CLASS_STATIC_INITIALIZER block ) | ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) | typeDeclaration );
	[GrammarRule("classScopeDeclarations")]
	public void classScopeDeclarations()
	{
		EnterRule_classScopeDeclarations();
		EnterRule("classScopeDeclarations", 13);
		TraceIn("classScopeDeclarations", 13);
		int classScopeDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classScopeDeclarations");
		DebugLocation(210, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return; }

			// JavaTreeParser.g:211:5: ( ^( CLASS_INSTANCE_INITIALIZER block ) | ^( CLASS_STATIC_INITIALIZER block ) | ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) | typeDeclaration )
			int alt32=7;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case CLASS_INSTANCE_INITIALIZER:
				{
				alt32 = 1;
				}
				break;
			case CLASS_STATIC_INITIALIZER:
				{
				alt32 = 2;
				}
				break;
			case FUNCTION_METHOD_DECL:
				{
				alt32 = 3;
				}
				break;
			case VOID_METHOD_DECL:
				{
				alt32 = 4;
				}
				break;
			case VAR_DECLARATION:
				{
				alt32 = 5;
				}
				break;
			case CONSTRUCTOR_DECL:
				{
				alt32 = 6;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt32 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:211:9: ^( CLASS_INSTANCE_INITIALIZER block )
				{
				DebugLocation(211, 9);
				DebugLocation(211, 11);
				Match(input,CLASS_INSTANCE_INITIALIZER,Follow._CLASS_INSTANCE_INITIALIZER_in_classScopeDeclarations541); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(211, 38);
				PushFollow(Follow._block_in_classScopeDeclarations543);
				block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:212:9: ^( CLASS_STATIC_INITIALIZER block )
				{
				DebugLocation(212, 9);
				DebugLocation(212, 11);
				Match(input,CLASS_STATIC_INITIALIZER,Follow._CLASS_STATIC_INITIALIZER_in_classScopeDeclarations555); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(212, 36);
				PushFollow(Follow._block_in_classScopeDeclarations557);
				block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:213:9: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
				{
				DebugLocation(213, 9);
				DebugLocation(213, 11);
				Match(input,FUNCTION_METHOD_DECL,Follow._FUNCTION_METHOD_DECL_in_classScopeDeclarations569); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(213, 32);
				PushFollow(Follow._modifierList_in_classScopeDeclarations571);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(213, 45);
				// JavaTreeParser.g:213:45: ( genericTypeParameterList )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:213:45: genericTypeParameterList
					{
					DebugLocation(213, 45);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations573);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(213, 71);
				PushFollow(Follow._type_in_classScopeDeclarations576);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(213, 76);
				Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations578); if (state.failed) return;
				DebugLocation(213, 82);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations580);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(213, 102);
				// JavaTreeParser.g:213:102: ( arrayDeclaratorList )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==ARRAY_DECLARATOR_LIST))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:213:102: arrayDeclaratorList
					{
					DebugLocation(213, 102);
					PushFollow(Follow._arrayDeclaratorList_in_classScopeDeclarations582);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(213, 123);
				// JavaTreeParser.g:213:123: ( throwsClause )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==THROWS_CLAUSE))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:213:123: throwsClause
					{
					DebugLocation(213, 123);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations585);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(213, 137);
				// JavaTreeParser.g:213:137: ( block )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==BLOCK_SCOPE))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:213:137: block
					{
					DebugLocation(213, 137);
					PushFollow(Follow._block_in_classScopeDeclarations588);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaTreeParser.g:214:9: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
				{
				DebugLocation(214, 9);
				DebugLocation(214, 11);
				Match(input,VOID_METHOD_DECL,Follow._VOID_METHOD_DECL_in_classScopeDeclarations601); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(214, 28);
				PushFollow(Follow._modifierList_in_classScopeDeclarations603);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(214, 41);
				// JavaTreeParser.g:214:41: ( genericTypeParameterList )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:214:41: genericTypeParameterList
					{
					DebugLocation(214, 41);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations605);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(214, 67);
				Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations608); if (state.failed) return;
				DebugLocation(214, 73);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations610);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(214, 93);
				// JavaTreeParser.g:214:93: ( throwsClause )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==THROWS_CLAUSE))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:214:93: throwsClause
					{
					DebugLocation(214, 93);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations612);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(214, 107);
				// JavaTreeParser.g:214:107: ( block )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==BLOCK_SCOPE))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:214:107: block
					{
					DebugLocation(214, 107);
					PushFollow(Follow._block_in_classScopeDeclarations615);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaTreeParser.g:215:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(215, 9);
				DebugLocation(215, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_classScopeDeclarations628); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(215, 27);
				PushFollow(Follow._modifierList_in_classScopeDeclarations630);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(215, 40);
				PushFollow(Follow._type_in_classScopeDeclarations632);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(215, 45);
				PushFollow(Follow._variableDeclaratorList_in_classScopeDeclarations634);
				variableDeclaratorList();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaTreeParser.g:216:9: ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
				{
				DebugLocation(216, 9);
				DebugLocation(216, 11);
				Match(input,CONSTRUCTOR_DECL,Follow._CONSTRUCTOR_DECL_in_classScopeDeclarations646); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(216, 28);
				PushFollow(Follow._modifierList_in_classScopeDeclarations648);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(216, 41);
				// JavaTreeParser.g:216:41: ( genericTypeParameterList )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:216:41: genericTypeParameterList
					{
					DebugLocation(216, 41);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations650);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(216, 67);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations653);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(216, 87);
				// JavaTreeParser.g:216:87: ( throwsClause )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==THROWS_CLAUSE))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:216:87: throwsClause
					{
					DebugLocation(216, 87);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations655);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(216, 101);
				PushFollow(Follow._block_in_classScopeDeclarations658);
				block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaTreeParser.g:217:9: typeDeclaration
				{
				DebugLocation(217, 9);
				PushFollow(Follow._typeDeclaration_in_classScopeDeclarations669);
				typeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classScopeDeclarations", 13);
			LeaveRule("classScopeDeclarations", 13);
			LeaveRule_classScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 13, classScopeDeclarations_StartIndex); }

		}
		DebugLocation(218, 4);
		} finally { DebugExitRule(GrammarFileName, "classScopeDeclarations"); }
		return;

	}
	// $ANTLR end "classScopeDeclarations"

	partial void EnterRule_interfaceTopLevelScope();
	partial void LeaveRule_interfaceTopLevelScope();
	// $ANTLR start "interfaceTopLevelScope"
	// JavaTreeParser.g:220:1: interfaceTopLevelScope : ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* ) ;
	[GrammarRule("interfaceTopLevelScope")]
	public void interfaceTopLevelScope()
	{
		EnterRule_interfaceTopLevelScope();
		EnterRule("interfaceTopLevelScope", 14);
		TraceIn("interfaceTopLevelScope", 14);
		int interfaceTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceTopLevelScope");
		DebugLocation(220, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return; }

			// JavaTreeParser.g:221:5: ( ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:221:9: ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* )
			{
			DebugLocation(221, 9);
			DebugLocation(221, 11);
			Match(input,INTERFACE_TOP_LEVEL_SCOPE,Follow._INTERFACE_TOP_LEVEL_SCOPE_in_interfaceTopLevelScope693); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(221, 37);
				// JavaTreeParser.g:221:37: ( interfaceScopeDeclarations )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_1 = input.LA(1);

					if ((LA33_1==AT||LA33_1==CLASS||LA33_1==ENUM||LA33_1==FUNCTION_METHOD_DECL||LA33_1==INTERFACE||LA33_1==VAR_DECLARATION||LA33_1==VOID_METHOD_DECL))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:221:37: interfaceScopeDeclarations
						{
						DebugLocation(221, 37);
						PushFollow(Follow._interfaceScopeDeclarations_in_interfaceTopLevelScope695);
						interfaceScopeDeclarations();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceTopLevelScope", 14);
			LeaveRule("interfaceTopLevelScope", 14);
			LeaveRule_interfaceTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 14, interfaceTopLevelScope_StartIndex); }

		}
		DebugLocation(222, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceTopLevelScope"); }
		return;

	}
	// $ANTLR end "interfaceTopLevelScope"

	partial void EnterRule_interfaceScopeDeclarations();
	partial void LeaveRule_interfaceScopeDeclarations();
	// $ANTLR start "interfaceScopeDeclarations"
	// JavaTreeParser.g:224:1: interfaceScopeDeclarations : ( ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration );
	[GrammarRule("interfaceScopeDeclarations")]
	public void interfaceScopeDeclarations()
	{
		EnterRule_interfaceScopeDeclarations();
		EnterRule("interfaceScopeDeclarations", 15);
		TraceIn("interfaceScopeDeclarations", 15);
		int interfaceScopeDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceScopeDeclarations");
		DebugLocation(224, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return; }

			// JavaTreeParser.g:225:5: ( ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration )
			int alt39=4;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case FUNCTION_METHOD_DECL:
				{
				alt39 = 1;
				}
				break;
			case VOID_METHOD_DECL:
				{
				alt39 = 2;
				}
				break;
			case VAR_DECLARATION:
				{
				alt39 = 3;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt39 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:225:9: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
				{
				DebugLocation(225, 9);
				DebugLocation(225, 11);
				Match(input,FUNCTION_METHOD_DECL,Follow._FUNCTION_METHOD_DECL_in_interfaceScopeDeclarations721); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(225, 32);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations723);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(225, 45);
				// JavaTreeParser.g:225:45: ( genericTypeParameterList )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:225:45: genericTypeParameterList
					{
					DebugLocation(225, 45);
					PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations725);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(225, 71);
				PushFollow(Follow._type_in_interfaceScopeDeclarations728);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(225, 76);
				Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations730); if (state.failed) return;
				DebugLocation(225, 82);
				PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations732);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(225, 102);
				// JavaTreeParser.g:225:102: ( arrayDeclaratorList )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==ARRAY_DECLARATOR_LIST))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:225:102: arrayDeclaratorList
					{
					DebugLocation(225, 102);
					PushFollow(Follow._arrayDeclaratorList_in_interfaceScopeDeclarations734);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(225, 123);
				// JavaTreeParser.g:225:123: ( throwsClause )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==THROWS_CLAUSE))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:225:123: throwsClause
					{
					DebugLocation(225, 123);
					PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations737);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(36); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:226:9: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
				{
				DebugLocation(226, 9);
				DebugLocation(226, 11);
				Match(input,VOID_METHOD_DECL,Follow._VOID_METHOD_DECL_in_interfaceScopeDeclarations750); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(226, 28);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations752);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(226, 41);
				// JavaTreeParser.g:226:41: ( genericTypeParameterList )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:226:41: genericTypeParameterList
					{
					DebugLocation(226, 41);
					PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations754);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(226, 67);
				Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations757); if (state.failed) return;
				DebugLocation(226, 73);
				PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations759);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(226, 93);
				// JavaTreeParser.g:226:93: ( throwsClause )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==THROWS_CLAUSE))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:226:93: throwsClause
					{
					DebugLocation(226, 93);
					PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations761);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(38); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:230:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(230, 9);
				DebugLocation(230, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_interfaceScopeDeclarations852); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(230, 27);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations854);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(230, 40);
				PushFollow(Follow._type_in_interfaceScopeDeclarations856);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(230, 45);
				PushFollow(Follow._variableDeclaratorList_in_interfaceScopeDeclarations858);
				variableDeclaratorList();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaTreeParser.g:231:9: typeDeclaration
				{
				DebugLocation(231, 9);
				PushFollow(Follow._typeDeclaration_in_interfaceScopeDeclarations869);
				typeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceScopeDeclarations", 15);
			LeaveRule("interfaceScopeDeclarations", 15);
			LeaveRule_interfaceScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 15, interfaceScopeDeclarations_StartIndex); }

		}
		DebugLocation(232, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceScopeDeclarations"); }
		return;

	}
	// $ANTLR end "interfaceScopeDeclarations"

	partial void EnterRule_variableDeclaratorList();
	partial void LeaveRule_variableDeclaratorList();
	// $ANTLR start "variableDeclaratorList"
	// JavaTreeParser.g:234:1: variableDeclaratorList : ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ ) ;
	[GrammarRule("variableDeclaratorList")]
	public void variableDeclaratorList()
	{
		EnterRule_variableDeclaratorList();
		EnterRule("variableDeclaratorList", 16);
		TraceIn("variableDeclaratorList", 16);
		int variableDeclaratorList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclaratorList");
		DebugLocation(234, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return; }

			// JavaTreeParser.g:235:5: ( ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:235:9: ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ )
			{
			DebugLocation(235, 9);
			DebugLocation(235, 11);
			Match(input,VAR_DECLARATOR_LIST,Follow._VAR_DECLARATOR_LIST_in_variableDeclaratorList889); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(235, 31);
			// JavaTreeParser.g:235:31: ( variableDeclarator )+
			int cnt40=0;
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==VAR_DECLARATOR))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:235:31: variableDeclarator
					{
					DebugLocation(235, 31);
					PushFollow(Follow._variableDeclarator_in_variableDeclaratorList891);
					variableDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt40 >= 1)
						goto loop40;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee40 = new EarlyExitException( 40, input );
					DebugRecognitionException(eee40);
					throw eee40;
				}
				cnt40++;
			}
			loop40:
				;

			} finally { DebugExitSubRule(40); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaratorList", 16);
			LeaveRule("variableDeclaratorList", 16);
			LeaveRule_variableDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 16, variableDeclaratorList_StartIndex); }

		}
		DebugLocation(236, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorList"); }
		return;

	}
	// $ANTLR end "variableDeclaratorList"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// JavaTreeParser.g:238:1: variableDeclarator : ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
	[GrammarRule("variableDeclarator")]
	public void variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 17);
		TraceIn("variableDeclarator", 17);
		int variableDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(238, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return; }

			// JavaTreeParser.g:239:5: ( ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:239:9: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
			{
			DebugLocation(239, 9);
			DebugLocation(239, 11);
			Match(input,VAR_DECLARATOR,Follow._VAR_DECLARATOR_in_variableDeclarator913); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(239, 26);
			PushFollow(Follow._variableDeclaratorId_in_variableDeclarator915);
			variableDeclaratorId();
			PopFollow();
			if (state.failed) return;
			DebugLocation(239, 47);
			// JavaTreeParser.g:239:47: ( variableInitializer )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==ARRAY_INITIALIZER||LA41_1==EXPR))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:239:47: variableInitializer
				{
				DebugLocation(239, 47);
				PushFollow(Follow._variableInitializer_in_variableDeclarator917);
				variableInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(41); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarator", 17);
			LeaveRule("variableDeclarator", 17);
			LeaveRule_variableDeclarator();
			if (state.backtracking > 0) { Memoize(input, 17, variableDeclarator_StartIndex); }

		}
		DebugLocation(240, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_variableDeclaratorId();
	partial void LeaveRule_variableDeclaratorId();
	// $ANTLR start "variableDeclaratorId"
	// JavaTreeParser.g:242:1: variableDeclaratorId : ^( IDENT ( arrayDeclaratorList )? ) ;
	[GrammarRule("variableDeclaratorId")]
	public void variableDeclaratorId()
	{
		EnterRule_variableDeclaratorId();
		EnterRule("variableDeclaratorId", 18);
		TraceIn("variableDeclaratorId", 18);
		int variableDeclaratorId_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclaratorId");
		DebugLocation(242, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return; }

			// JavaTreeParser.g:243:5: ( ^( IDENT ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:243:9: ^( IDENT ( arrayDeclaratorList )? )
			{
			DebugLocation(243, 9);
			DebugLocation(243, 11);
			Match(input,IDENT,Follow._IDENT_in_variableDeclaratorId943); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(243, 17);
				// JavaTreeParser.g:243:17: ( arrayDeclaratorList )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==ARRAY_DECLARATOR_LIST))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:243:17: arrayDeclaratorList
					{
					DebugLocation(243, 17);
					PushFollow(Follow._arrayDeclaratorList_in_variableDeclaratorId945);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaratorId", 18);
			LeaveRule("variableDeclaratorId", 18);
			LeaveRule_variableDeclaratorId();
			if (state.backtracking > 0) { Memoize(input, 18, variableDeclaratorId_StartIndex); }

		}
		DebugLocation(244, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorId"); }
		return;

	}
	// $ANTLR end "variableDeclaratorId"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// JavaTreeParser.g:246:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	public void variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 19);
		TraceIn("variableInitializer", 19);
		int variableInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(246, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return; }

			// JavaTreeParser.g:247:5: ( arrayInitializer | expression )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==ARRAY_INITIALIZER))
			{
				alt43 = 1;
			}
			else if ((LA43_1==EXPR))
			{
				alt43 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:247:9: arrayInitializer
				{
				DebugLocation(247, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer966);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:248:9: expression
				{
				DebugLocation(248, 9);
				PushFollow(Follow._expression_in_variableInitializer976);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableInitializer", 19);
			LeaveRule("variableInitializer", 19);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 19, variableInitializer_StartIndex); }

		}
		DebugLocation(249, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayDeclarator();
	partial void LeaveRule_arrayDeclarator();
	// $ANTLR start "arrayDeclarator"
	// JavaTreeParser.g:251:1: arrayDeclarator : LBRACK RBRACK ;
	[GrammarRule("arrayDeclarator")]
	public void arrayDeclarator()
	{
		EnterRule_arrayDeclarator();
		EnterRule("arrayDeclarator", 20);
		TraceIn("arrayDeclarator", 20);
		int arrayDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayDeclarator");
		DebugLocation(251, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return; }

			// JavaTreeParser.g:252:5: ( LBRACK RBRACK )
			DebugEnterAlt(1);
			// JavaTreeParser.g:252:9: LBRACK RBRACK
			{
			DebugLocation(252, 9);
			Match(input,LBRACK,Follow._LBRACK_in_arrayDeclarator995); if (state.failed) return;
			DebugLocation(252, 16);
			Match(input,RBRACK,Follow._RBRACK_in_arrayDeclarator997); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayDeclarator", 20);
			LeaveRule("arrayDeclarator", 20);
			LeaveRule_arrayDeclarator();
			if (state.backtracking > 0) { Memoize(input, 20, arrayDeclarator_StartIndex); }

		}
		DebugLocation(253, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclarator"); }
		return;

	}
	// $ANTLR end "arrayDeclarator"

	partial void EnterRule_arrayDeclaratorList();
	partial void LeaveRule_arrayDeclaratorList();
	// $ANTLR start "arrayDeclaratorList"
	// JavaTreeParser.g:255:1: arrayDeclaratorList : ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* ) ;
	[GrammarRule("arrayDeclaratorList")]
	public void arrayDeclaratorList()
	{
		EnterRule_arrayDeclaratorList();
		EnterRule("arrayDeclaratorList", 21);
		TraceIn("arrayDeclaratorList", 21);
		int arrayDeclaratorList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayDeclaratorList");
		DebugLocation(255, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return; }

			// JavaTreeParser.g:256:5: ( ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:256:9: ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* )
			{
			DebugLocation(256, 9);
			DebugLocation(256, 11);
			Match(input,ARRAY_DECLARATOR_LIST,Follow._ARRAY_DECLARATOR_LIST_in_arrayDeclaratorList1017); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(256, 33);
				// JavaTreeParser.g:256:33: ( ARRAY_DECLARATOR )*
				try { DebugEnterSubRule(44);
				while (true)
				{
					int alt44=2;
					try { DebugEnterDecision(44, false);
					int LA44_1 = input.LA(1);

					if ((LA44_1==ARRAY_DECLARATOR))
					{
						alt44 = 1;
					}


					} finally { DebugExitDecision(44); }
					switch ( alt44 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:256:33: ARRAY_DECLARATOR
						{
						DebugLocation(256, 33);
						Match(input,ARRAY_DECLARATOR,Follow._ARRAY_DECLARATOR_in_arrayDeclaratorList1019); if (state.failed) return;

						}
						break;

					default:
						goto loop44;
					}
				}

				loop44:
					;

				} finally { DebugExitSubRule(44); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayDeclaratorList", 21);
			LeaveRule("arrayDeclaratorList", 21);
			LeaveRule_arrayDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 21, arrayDeclaratorList_StartIndex); }

		}
		DebugLocation(257, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaratorList"); }
		return;

	}
	// $ANTLR end "arrayDeclaratorList"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// JavaTreeParser.g:259:1: arrayInitializer : ^( ARRAY_INITIALIZER ( variableInitializer )* ) ;
	[GrammarRule("arrayInitializer")]
	public void arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 22);
		TraceIn("arrayInitializer", 22);
		int arrayInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(259, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return; }

			// JavaTreeParser.g:260:5: ( ^( ARRAY_INITIALIZER ( variableInitializer )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:260:9: ^( ARRAY_INITIALIZER ( variableInitializer )* )
			{
			DebugLocation(260, 9);
			DebugLocation(260, 11);
			Match(input,ARRAY_INITIALIZER,Follow._ARRAY_INITIALIZER_in_arrayInitializer1047); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(260, 29);
				// JavaTreeParser.g:260:29: ( variableInitializer )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_1 = input.LA(1);

					if ((LA45_1==ARRAY_INITIALIZER||LA45_1==EXPR))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:260:29: variableInitializer
						{
						DebugLocation(260, 29);
						PushFollow(Follow._variableInitializer_in_arrayInitializer1049);
						variableInitializer();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayInitializer", 22);
			LeaveRule("arrayInitializer", 22);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 22, arrayInitializer_StartIndex); }

		}
		DebugLocation(261, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_throwsClause();
	partial void LeaveRule_throwsClause();
	// $ANTLR start "throwsClause"
	// JavaTreeParser.g:263:1: throwsClause : ^( THROWS_CLAUSE ( qualifiedIdentifier )+ ) ;
	[GrammarRule("throwsClause")]
	public void throwsClause()
	{
		EnterRule_throwsClause();
		EnterRule("throwsClause", 23);
		TraceIn("throwsClause", 23);
		int throwsClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "throwsClause");
		DebugLocation(263, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return; }

			// JavaTreeParser.g:264:5: ( ^( THROWS_CLAUSE ( qualifiedIdentifier )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:264:9: ^( THROWS_CLAUSE ( qualifiedIdentifier )+ )
			{
			DebugLocation(264, 9);
			DebugLocation(264, 11);
			Match(input,THROWS_CLAUSE,Follow._THROWS_CLAUSE_in_throwsClause1071); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(264, 25);
			// JavaTreeParser.g:264:25: ( qualifiedIdentifier )+
			int cnt46=0;
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==DOT||LA46_1==IDENT))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:264:25: qualifiedIdentifier
					{
					DebugLocation(264, 25);
					PushFollow(Follow._qualifiedIdentifier_in_throwsClause1073);
					qualifiedIdentifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt46 >= 1)
						goto loop46;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee46 = new EarlyExitException( 46, input );
					DebugRecognitionException(eee46);
					throw eee46;
				}
				cnt46++;
			}
			loop46:
				;

			} finally { DebugExitSubRule(46); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwsClause", 23);
			LeaveRule("throwsClause", 23);
			LeaveRule_throwsClause();
			if (state.backtracking > 0) { Memoize(input, 23, throwsClause_StartIndex); }

		}
		DebugLocation(265, 4);
		} finally { DebugExitRule(GrammarFileName, "throwsClause"); }
		return;

	}
	// $ANTLR end "throwsClause"

	partial void EnterRule_modifierList();
	partial void LeaveRule_modifierList();
	// $ANTLR start "modifierList"
	// JavaTreeParser.g:267:1: modifierList : ^( MODIFIER_LIST ( modifier )* ) ;
	[GrammarRule("modifierList")]
	public void modifierList()
	{
		EnterRule_modifierList();
		EnterRule("modifierList", 24);
		TraceIn("modifierList", 24);
		int modifierList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "modifierList");
		DebugLocation(267, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return; }

			// JavaTreeParser.g:268:5: ( ^( MODIFIER_LIST ( modifier )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:268:9: ^( MODIFIER_LIST ( modifier )* )
			{
			DebugLocation(268, 9);
			DebugLocation(268, 11);
			Match(input,MODIFIER_LIST,Follow._MODIFIER_LIST_in_modifierList1095); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(268, 25);
				// JavaTreeParser.g:268:25: ( modifier )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_1 = input.LA(1);

					if ((LA47_1==ABSTRACT||LA47_1==AT||LA47_1==FINAL||LA47_1==NATIVE||(LA47_1>=PRIVATE && LA47_1<=PUBLIC)||LA47_1==STATIC||LA47_1==STRICTFP||LA47_1==SYNCHRONIZED||LA47_1==TRANSIENT||LA47_1==VOLATILE))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:268:25: modifier
						{
						DebugLocation(268, 25);
						PushFollow(Follow._modifier_in_modifierList1097);
						modifier();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifierList", 24);
			LeaveRule("modifierList", 24);
			LeaveRule_modifierList();
			if (state.backtracking > 0) { Memoize(input, 24, modifierList_StartIndex); }

		}
		DebugLocation(269, 4);
		} finally { DebugExitRule(GrammarFileName, "modifierList"); }
		return;

	}
	// $ANTLR end "modifierList"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// JavaTreeParser.g:271:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
	[GrammarRule("modifier")]
	public void modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 25);
		TraceIn("modifier", 25);
		int modifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(271, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return; }

			// JavaTreeParser.g:272:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
			int alt48=11;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt48 = 1;
				}
				break;
			case PROTECTED:
				{
				alt48 = 2;
				}
				break;
			case PRIVATE:
				{
				alt48 = 3;
				}
				break;
			case STATIC:
				{
				alt48 = 4;
				}
				break;
			case ABSTRACT:
				{
				alt48 = 5;
				}
				break;
			case NATIVE:
				{
				alt48 = 6;
				}
				break;
			case SYNCHRONIZED:
				{
				alt48 = 7;
				}
				break;
			case TRANSIENT:
				{
				alt48 = 8;
				}
				break;
			case VOLATILE:
				{
				alt48 = 9;
				}
				break;
			case STRICTFP:
				{
				alt48 = 10;
				}
				break;
			case AT:
			case FINAL:
				{
				alt48 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:272:9: PUBLIC
				{
				DebugLocation(272, 9);
				Match(input,PUBLIC,Follow._PUBLIC_in_modifier1118); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:273:9: PROTECTED
				{
				DebugLocation(273, 9);
				Match(input,PROTECTED,Follow._PROTECTED_in_modifier1128); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:274:9: PRIVATE
				{
				DebugLocation(274, 9);
				Match(input,PRIVATE,Follow._PRIVATE_in_modifier1138); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaTreeParser.g:275:9: STATIC
				{
				DebugLocation(275, 9);
				Match(input,STATIC,Follow._STATIC_in_modifier1148); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaTreeParser.g:276:9: ABSTRACT
				{
				DebugLocation(276, 9);
				Match(input,ABSTRACT,Follow._ABSTRACT_in_modifier1158); if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaTreeParser.g:277:9: NATIVE
				{
				DebugLocation(277, 9);
				Match(input,NATIVE,Follow._NATIVE_in_modifier1168); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaTreeParser.g:278:9: SYNCHRONIZED
				{
				DebugLocation(278, 9);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifier1178); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// JavaTreeParser.g:279:9: TRANSIENT
				{
				DebugLocation(279, 9);
				Match(input,TRANSIENT,Follow._TRANSIENT_in_modifier1188); if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// JavaTreeParser.g:280:9: VOLATILE
				{
				DebugLocation(280, 9);
				Match(input,VOLATILE,Follow._VOLATILE_in_modifier1198); if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// JavaTreeParser.g:281:9: STRICTFP
				{
				DebugLocation(281, 9);
				Match(input,STRICTFP,Follow._STRICTFP_in_modifier1208); if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// JavaTreeParser.g:282:9: localModifier
				{
				DebugLocation(282, 9);
				PushFollow(Follow._localModifier_in_modifier1218);
				localModifier();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifier", 25);
			LeaveRule("modifier", 25);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 25, modifier_StartIndex); }

		}
		DebugLocation(283, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_localModifierList();
	partial void LeaveRule_localModifierList();
	// $ANTLR start "localModifierList"
	// JavaTreeParser.g:285:1: localModifierList : ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
	[GrammarRule("localModifierList")]
	public void localModifierList()
	{
		EnterRule_localModifierList();
		EnterRule("localModifierList", 26);
		TraceIn("localModifierList", 26);
		int localModifierList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localModifierList");
		DebugLocation(285, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return; }

			// JavaTreeParser.g:286:5: ( ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:286:9: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
			{
			DebugLocation(286, 9);
			DebugLocation(286, 11);
			Match(input,LOCAL_MODIFIER_LIST,Follow._LOCAL_MODIFIER_LIST_in_localModifierList1238); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(286, 31);
				// JavaTreeParser.g:286:31: ( localModifier )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					int LA49_1 = input.LA(1);

					if ((LA49_1==AT||LA49_1==FINAL))
					{
						alt49 = 1;
					}


					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:286:31: localModifier
						{
						DebugLocation(286, 31);
						PushFollow(Follow._localModifier_in_localModifierList1240);
						localModifier();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localModifierList", 26);
			LeaveRule("localModifierList", 26);
			LeaveRule_localModifierList();
			if (state.backtracking > 0) { Memoize(input, 26, localModifierList_StartIndex); }

		}
		DebugLocation(287, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifierList"); }
		return;

	}
	// $ANTLR end "localModifierList"

	partial void EnterRule_localModifier();
	partial void LeaveRule_localModifier();
	// $ANTLR start "localModifier"
	// JavaTreeParser.g:289:1: localModifier : ( FINAL | annotation );
	[GrammarRule("localModifier")]
	public void localModifier()
	{
		EnterRule_localModifier();
		EnterRule("localModifier", 27);
		TraceIn("localModifier", 27);
		int localModifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localModifier");
		DebugLocation(289, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return; }

			// JavaTreeParser.g:290:5: ( FINAL | annotation )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==FINAL))
			{
				alt50 = 1;
			}
			else if ((LA50_1==AT))
			{
				alt50 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:290:9: FINAL
				{
				DebugLocation(290, 9);
				Match(input,FINAL,Follow._FINAL_in_localModifier1261); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:291:9: annotation
				{
				DebugLocation(291, 9);
				PushFollow(Follow._annotation_in_localModifier1271);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localModifier", 27);
			LeaveRule("localModifier", 27);
			LeaveRule_localModifier();
			if (state.backtracking > 0) { Memoize(input, 27, localModifier_StartIndex); }

		}
		DebugLocation(292, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifier"); }
		return;

	}
	// $ANTLR end "localModifier"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// JavaTreeParser.g:294:1: type : ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? ) ;
	[GrammarRule("type")]
	public void type()
	{
		EnterRule_type();
		EnterRule("type", 28);
		TraceIn("type", 28);
		int type_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(294, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return; }

			// JavaTreeParser.g:295:5: ( ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:295:9: ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? )
			{
			DebugLocation(295, 9);
			DebugLocation(295, 11);
			Match(input,TYPE,Follow._TYPE_in_type1291); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(295, 16);
			// JavaTreeParser.g:295:16: ( primitiveType | qualifiedTypeIdent )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==BOOLEAN||LA51_1==BYTE||LA51_1==CHAR||LA51_1==DOUBLE||LA51_1==FLOAT||LA51_1==INT||LA51_1==LONG||LA51_1==SHORT))
			{
				alt51 = 1;
			}
			else if ((LA51_1==QUALIFIED_TYPE_IDENT))
			{
				alt51 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:295:17: primitiveType
				{
				DebugLocation(295, 17);
				PushFollow(Follow._primitiveType_in_type1294);
				primitiveType();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:295:33: qualifiedTypeIdent
				{
				DebugLocation(295, 33);
				PushFollow(Follow._qualifiedTypeIdent_in_type1298);
				qualifiedTypeIdent();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(295, 53);
			// JavaTreeParser.g:295:53: ( arrayDeclaratorList )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==ARRAY_DECLARATOR_LIST))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:295:53: arrayDeclaratorList
				{
				DebugLocation(295, 53);
				PushFollow(Follow._arrayDeclaratorList_in_type1301);
				arrayDeclaratorList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 28);
			LeaveRule("type", 28);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 28, type_StartIndex); }

		}
		DebugLocation(296, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return;

	}
	// $ANTLR end "type"

	partial void EnterRule_qualifiedTypeIdent();
	partial void LeaveRule_qualifiedTypeIdent();
	// $ANTLR start "qualifiedTypeIdent"
	// JavaTreeParser.g:298:1: qualifiedTypeIdent : ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
	[GrammarRule("qualifiedTypeIdent")]
	public void qualifiedTypeIdent()
	{
		EnterRule_qualifiedTypeIdent();
		EnterRule("qualifiedTypeIdent", 29);
		TraceIn("qualifiedTypeIdent", 29);
		int qualifiedTypeIdent_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdent");
		DebugLocation(298, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return; }

			// JavaTreeParser.g:299:5: ( ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:299:9: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
			{
			DebugLocation(299, 9);
			DebugLocation(299, 11);
			Match(input,QUALIFIED_TYPE_IDENT,Follow._QUALIFIED_TYPE_IDENT_in_qualifiedTypeIdent1323); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(299, 32);
			// JavaTreeParser.g:299:32: ( typeIdent )+
			int cnt53=0;
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==IDENT))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:299:32: typeIdent
					{
					DebugLocation(299, 32);
					PushFollow(Follow._typeIdent_in_qualifiedTypeIdent1325);
					typeIdent();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt53 >= 1)
						goto loop53;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee53 = new EarlyExitException( 53, input );
					DebugRecognitionException(eee53);
					throw eee53;
				}
				cnt53++;
			}
			loop53:
				;

			} finally { DebugExitSubRule(53); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedTypeIdent", 29);
			LeaveRule("qualifiedTypeIdent", 29);
			LeaveRule_qualifiedTypeIdent();
			if (state.backtracking > 0) { Memoize(input, 29, qualifiedTypeIdent_StartIndex); }

		}
		DebugLocation(300, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdent"); }
		return;

	}
	// $ANTLR end "qualifiedTypeIdent"

	partial void EnterRule_typeIdent();
	partial void LeaveRule_typeIdent();
	// $ANTLR start "typeIdent"
	// JavaTreeParser.g:302:1: typeIdent : ^( IDENT ( genericTypeArgumentList )? ) ;
	[GrammarRule("typeIdent")]
	public void typeIdent()
	{
		EnterRule_typeIdent();
		EnterRule("typeIdent", 30);
		TraceIn("typeIdent", 30);
		int typeIdent_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeIdent");
		DebugLocation(302, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return; }

			// JavaTreeParser.g:303:5: ( ^( IDENT ( genericTypeArgumentList )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:303:9: ^( IDENT ( genericTypeArgumentList )? )
			{
			DebugLocation(303, 9);
			DebugLocation(303, 11);
			Match(input,IDENT,Follow._IDENT_in_typeIdent1348); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(303, 17);
				// JavaTreeParser.g:303:17: ( genericTypeArgumentList )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_1 = input.LA(1);

				if ((LA54_1==GENERIC_TYPE_ARG_LIST))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:303:17: genericTypeArgumentList
					{
					DebugLocation(303, 17);
					PushFollow(Follow._genericTypeArgumentList_in_typeIdent1350);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeIdent", 30);
			LeaveRule("typeIdent", 30);
			LeaveRule_typeIdent();
			if (state.backtracking > 0) { Memoize(input, 30, typeIdent_StartIndex); }

		}
		DebugLocation(304, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdent"); }
		return;

	}
	// $ANTLR end "typeIdent"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// JavaTreeParser.g:306:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
	[GrammarRule("primitiveType")]
	public void primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 31);
		TraceIn("primitiveType", 31);
		int primitiveType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(306, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return; }

			// JavaTreeParser.g:307:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
			DebugEnterAlt(1);
			// JavaTreeParser.g:
			{
			DebugLocation(307, 5);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 31);
			LeaveRule("primitiveType", 31);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 31, primitiveType_StartIndex); }

		}
		DebugLocation(315, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_genericTypeArgumentList();
	partial void LeaveRule_genericTypeArgumentList();
	// $ANTLR start "genericTypeArgumentList"
	// JavaTreeParser.g:317:1: genericTypeArgumentList : ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ ) ;
	[GrammarRule("genericTypeArgumentList")]
	public void genericTypeArgumentList()
	{
		EnterRule_genericTypeArgumentList();
		EnterRule("genericTypeArgumentList", 32);
		TraceIn("genericTypeArgumentList", 32);
		int genericTypeArgumentList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentList");
		DebugLocation(317, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return; }

			// JavaTreeParser.g:318:5: ( ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:318:9: ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ )
			{
			DebugLocation(318, 9);
			DebugLocation(318, 11);
			Match(input,GENERIC_TYPE_ARG_LIST,Follow._GENERIC_TYPE_ARG_LIST_in_genericTypeArgumentList1461); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(318, 33);
			// JavaTreeParser.g:318:33: ( genericTypeArgument )+
			int cnt55=0;
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==QUESTION||LA55_1==TYPE))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:318:33: genericTypeArgument
					{
					DebugLocation(318, 33);
					PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList1463);
					genericTypeArgument();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt55 >= 1)
						goto loop55;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee55 = new EarlyExitException( 55, input );
					DebugRecognitionException(eee55);
					throw eee55;
				}
				cnt55++;
			}
			loop55:
				;

			} finally { DebugExitSubRule(55); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeArgumentList", 32);
			LeaveRule("genericTypeArgumentList", 32);
			LeaveRule_genericTypeArgumentList();
			if (state.backtracking > 0) { Memoize(input, 32, genericTypeArgumentList_StartIndex); }

		}
		DebugLocation(319, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentList"); }
		return;

	}
	// $ANTLR end "genericTypeArgumentList"

	partial void EnterRule_genericTypeArgument();
	partial void LeaveRule_genericTypeArgument();
	// $ANTLR start "genericTypeArgument"
	// JavaTreeParser.g:321:1: genericTypeArgument : ( type | ^( QUESTION ( genericWildcardBoundType )? ) );
	[GrammarRule("genericTypeArgument")]
	public void genericTypeArgument()
	{
		EnterRule_genericTypeArgument();
		EnterRule("genericTypeArgument", 33);
		TraceIn("genericTypeArgument", 33);
		int genericTypeArgument_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericTypeArgument");
		DebugLocation(321, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return; }

			// JavaTreeParser.g:322:5: ( type | ^( QUESTION ( genericWildcardBoundType )? ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==TYPE))
			{
				alt57 = 1;
			}
			else if ((LA57_1==QUESTION))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:322:9: type
				{
				DebugLocation(322, 9);
				PushFollow(Follow._type_in_genericTypeArgument1488);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:323:9: ^( QUESTION ( genericWildcardBoundType )? )
				{
				DebugLocation(323, 9);
				DebugLocation(323, 11);
				Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgument1499); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(323, 20);
					// JavaTreeParser.g:323:20: ( genericWildcardBoundType )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, false);
					int LA56_1 = input.LA(1);

					if ((LA56_1==EXTENDS||LA56_1==SUPER))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:323:20: genericWildcardBoundType
						{
						DebugLocation(323, 20);
						PushFollow(Follow._genericWildcardBoundType_in_genericTypeArgument1501);
						genericWildcardBoundType();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(56); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeArgument", 33);
			LeaveRule("genericTypeArgument", 33);
			LeaveRule_genericTypeArgument();
			if (state.backtracking > 0) { Memoize(input, 33, genericTypeArgument_StartIndex); }

		}
		DebugLocation(324, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgument"); }
		return;

	}
	// $ANTLR end "genericTypeArgument"

	partial void EnterRule_genericWildcardBoundType();
	partial void LeaveRule_genericWildcardBoundType();
	// $ANTLR start "genericWildcardBoundType"
	// JavaTreeParser.g:326:1: genericWildcardBoundType : ( ^( EXTENDS type ) | ^( SUPER type ) );
	[GrammarRule("genericWildcardBoundType")]
	public void genericWildcardBoundType()
	{
		EnterRule_genericWildcardBoundType();
		EnterRule("genericWildcardBoundType", 34);
		TraceIn("genericWildcardBoundType", 34);
		int genericWildcardBoundType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericWildcardBoundType");
		DebugLocation(326, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return; }

			// JavaTreeParser.g:327:5: ( ^( EXTENDS type ) | ^( SUPER type ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==EXTENDS))
			{
				alt58 = 1;
			}
			else if ((LA58_1==SUPER))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:327:9: ^( EXTENDS type )
				{
				DebugLocation(327, 9);
				DebugLocation(327, 11);
				Match(input,EXTENDS,Follow._EXTENDS_in_genericWildcardBoundType1641); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(327, 19);
				PushFollow(Follow._type_in_genericWildcardBoundType1643);
				type();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:328:9: ^( SUPER type )
				{
				DebugLocation(328, 9);
				DebugLocation(328, 11);
				Match(input,SUPER,Follow._SUPER_in_genericWildcardBoundType1655); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(328, 17);
				PushFollow(Follow._type_in_genericWildcardBoundType1657);
				type();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericWildcardBoundType", 34);
			LeaveRule("genericWildcardBoundType", 34);
			LeaveRule_genericWildcardBoundType();
			if (state.backtracking > 0) { Memoize(input, 34, genericWildcardBoundType_StartIndex); }

		}
		DebugLocation(329, 4);
		} finally { DebugExitRule(GrammarFileName, "genericWildcardBoundType"); }
		return;

	}
	// $ANTLR end "genericWildcardBoundType"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// JavaTreeParser.g:331:1: formalParameterList : ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? ) ;
	[GrammarRule("formalParameterList")]
	public void formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 35);
		TraceIn("formalParameterList", 35);
		int formalParameterList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(331, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return; }

			// JavaTreeParser.g:332:5: ( ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:332:9: ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? )
			{
			DebugLocation(332, 9);
			DebugLocation(332, 11);
			Match(input,FORMAL_PARAM_LIST,Follow._FORMAL_PARAM_LIST_in_formalParameterList1678); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(332, 29);
				// JavaTreeParser.g:332:29: ( formalParameterStandardDecl )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==FORMAL_PARAM_STD_DECL))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:332:29: formalParameterStandardDecl
						{
						DebugLocation(332, 29);
						PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList1680);
						formalParameterStandardDecl();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }

				DebugLocation(332, 58);
				// JavaTreeParser.g:332:58: ( formalParameterVarargDecl )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==FORMAL_PARAM_VARARG_DECL))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:332:58: formalParameterVarargDecl
					{
					DebugLocation(332, 58);
					PushFollow(Follow._formalParameterVarargDecl_in_formalParameterList1683);
					formalParameterVarargDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterList", 35);
			LeaveRule("formalParameterList", 35);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 35, formalParameterList_StartIndex); }

		}
		DebugLocation(333, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameterStandardDecl();
	partial void LeaveRule_formalParameterStandardDecl();
	// $ANTLR start "formalParameterStandardDecl"
	// JavaTreeParser.g:335:1: formalParameterStandardDecl : ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterStandardDecl")]
	public void formalParameterStandardDecl()
	{
		EnterRule_formalParameterStandardDecl();
		EnterRule("formalParameterStandardDecl", 36);
		TraceIn("formalParameterStandardDecl", 36);
		int formalParameterStandardDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterStandardDecl");
		DebugLocation(335, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return; }

			// JavaTreeParser.g:336:5: ( ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:336:9: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
			{
			DebugLocation(336, 9);
			DebugLocation(336, 11);
			Match(input,FORMAL_PARAM_STD_DECL,Follow._FORMAL_PARAM_STD_DECL_in_formalParameterStandardDecl1710); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(336, 33);
			PushFollow(Follow._localModifierList_in_formalParameterStandardDecl1712);
			localModifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(336, 51);
			PushFollow(Follow._type_in_formalParameterStandardDecl1714);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(336, 56);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterStandardDecl1716);
			variableDeclaratorId();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterStandardDecl", 36);
			LeaveRule("formalParameterStandardDecl", 36);
			LeaveRule_formalParameterStandardDecl();
			if (state.backtracking > 0) { Memoize(input, 36, formalParameterStandardDecl_StartIndex); }

		}
		DebugLocation(337, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterStandardDecl"); }
		return;

	}
	// $ANTLR end "formalParameterStandardDecl"

	partial void EnterRule_formalParameterVarargDecl();
	partial void LeaveRule_formalParameterVarargDecl();
	// $ANTLR start "formalParameterVarargDecl"
	// JavaTreeParser.g:339:1: formalParameterVarargDecl : ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterVarargDecl")]
	public void formalParameterVarargDecl()
	{
		EnterRule_formalParameterVarargDecl();
		EnterRule("formalParameterVarargDecl", 37);
		TraceIn("formalParameterVarargDecl", 37);
		int formalParameterVarargDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterVarargDecl");
		DebugLocation(339, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return; }

			// JavaTreeParser.g:340:5: ( ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:340:9: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
			{
			DebugLocation(340, 9);
			DebugLocation(340, 11);
			Match(input,FORMAL_PARAM_VARARG_DECL,Follow._FORMAL_PARAM_VARARG_DECL_in_formalParameterVarargDecl1741); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(340, 36);
			PushFollow(Follow._localModifierList_in_formalParameterVarargDecl1743);
			localModifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(340, 54);
			PushFollow(Follow._type_in_formalParameterVarargDecl1745);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(340, 59);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterVarargDecl1747);
			variableDeclaratorId();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterVarargDecl", 37);
			LeaveRule("formalParameterVarargDecl", 37);
			LeaveRule_formalParameterVarargDecl();
			if (state.backtracking > 0) { Memoize(input, 37, formalParameterVarargDecl_StartIndex); }

		}
		DebugLocation(341, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterVarargDecl"); }
		return;

	}
	// $ANTLR end "formalParameterVarargDecl"

	partial void EnterRule_qualifiedIdentifier();
	partial void LeaveRule_qualifiedIdentifier();
	// $ANTLR start "qualifiedIdentifier"
	// JavaTreeParser.g:343:1: qualifiedIdentifier : ( IDENT | ^( DOT qualifiedIdentifier IDENT ) );
	[GrammarRule("qualifiedIdentifier")]
	public void qualifiedIdentifier()
	{
		EnterRule_qualifiedIdentifier();
		EnterRule("qualifiedIdentifier", 38);
		TraceIn("qualifiedIdentifier", 38);
		int qualifiedIdentifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedIdentifier");
		DebugLocation(343, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return; }

			// JavaTreeParser.g:344:5: ( IDENT | ^( DOT qualifiedIdentifier IDENT ) )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==IDENT))
			{
				alt61 = 1;
			}
			else if ((LA61_1==DOT))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:344:9: IDENT
				{
				DebugLocation(344, 9);
				Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier1771); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:345:9: ^( DOT qualifiedIdentifier IDENT )
				{
				DebugLocation(345, 9);
				DebugLocation(345, 11);
				Match(input,DOT,Follow._DOT_in_qualifiedIdentifier1782); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(345, 15);
				PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentifier1784);
				qualifiedIdentifier();
				PopFollow();
				if (state.failed) return;
				DebugLocation(345, 35);
				Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier1786); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedIdentifier", 38);
			LeaveRule("qualifiedIdentifier", 38);
			LeaveRule_qualifiedIdentifier();
			if (state.backtracking > 0) { Memoize(input, 38, qualifiedIdentifier_StartIndex); }

		}
		DebugLocation(346, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentifier"); }
		return;

	}
	// $ANTLR end "qualifiedIdentifier"

	partial void EnterRule_annotationList();
	partial void LeaveRule_annotationList();
	// $ANTLR start "annotationList"
	// JavaTreeParser.g:350:1: annotationList : ^( ANNOTATION_LIST ( annotation )* ) ;
	[GrammarRule("annotationList")]
	public void annotationList()
	{
		EnterRule_annotationList();
		EnterRule("annotationList", 39);
		TraceIn("annotationList", 39);
		int annotationList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationList");
		DebugLocation(350, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return; }

			// JavaTreeParser.g:351:5: ( ^( ANNOTATION_LIST ( annotation )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:351:9: ^( ANNOTATION_LIST ( annotation )* )
			{
			DebugLocation(351, 9);
			DebugLocation(351, 11);
			Match(input,ANNOTATION_LIST,Follow._ANNOTATION_LIST_in_annotationList1813); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(351, 27);
				// JavaTreeParser.g:351:27: ( annotation )*
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_1 = input.LA(1);

					if ((LA62_1==AT))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch ( alt62 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:351:27: annotation
						{
						DebugLocation(351, 27);
						PushFollow(Follow._annotation_in_annotationList1815);
						annotation();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop62;
					}
				}

				loop62:
					;

				} finally { DebugExitSubRule(62); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationList", 39);
			LeaveRule("annotationList", 39);
			LeaveRule_annotationList();
			if (state.backtracking > 0) { Memoize(input, 39, annotationList_StartIndex); }

		}
		DebugLocation(352, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationList"); }
		return;

	}
	// $ANTLR end "annotationList"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// JavaTreeParser.g:354:1: annotation : ^( AT qualifiedIdentifier ( annotationInit )? ) ;
	[GrammarRule("annotation")]
	public void annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 40);
		TraceIn("annotation", 40);
		int annotation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(354, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return; }

			// JavaTreeParser.g:355:5: ( ^( AT qualifiedIdentifier ( annotationInit )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:355:9: ^( AT qualifiedIdentifier ( annotationInit )? )
			{
			DebugLocation(355, 9);
			DebugLocation(355, 11);
			Match(input,AT,Follow._AT_in_annotation1837); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(355, 14);
			PushFollow(Follow._qualifiedIdentifier_in_annotation1839);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(355, 34);
			// JavaTreeParser.g:355:34: ( annotationInit )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==ANNOTATION_INIT_BLOCK))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:355:34: annotationInit
				{
				DebugLocation(355, 34);
				PushFollow(Follow._annotationInit_in_annotation1841);
				annotationInit();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotation", 40);
			LeaveRule("annotation", 40);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 40, annotation_StartIndex); }

		}
		DebugLocation(356, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationInit();
	partial void LeaveRule_annotationInit();
	// $ANTLR start "annotationInit"
	// JavaTreeParser.g:358:1: annotationInit : ^( ANNOTATION_INIT_BLOCK ( annotationInitializers )? ) ;
	[GrammarRule("annotationInit")]
	public void annotationInit()
	{
		EnterRule_annotationInit();
		EnterRule("annotationInit", 41);
		TraceIn("annotationInit", 41);
		int annotationInit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInit");
		DebugLocation(358, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return; }

			// JavaTreeParser.g:359:5: ( ^( ANNOTATION_INIT_BLOCK ( annotationInitializers )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:359:9: ^( ANNOTATION_INIT_BLOCK ( annotationInitializers )? )
			{
			DebugLocation(359, 9);
			DebugLocation(359, 11);
			Match(input,ANNOTATION_INIT_BLOCK,Follow._ANNOTATION_INIT_BLOCK_in_annotationInit1867); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(359, 33);
				// JavaTreeParser.g:359:33: ( annotationInitializers )?
				int alt64=2;
				try { DebugEnterSubRule(64);
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if (((LA64_1>=ANNOTATION_INIT_DEFAULT_KEY && LA64_1<=ANNOTATION_INIT_KEY_LIST)))
				{
					alt64 = 1;
				}
				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:359:33: annotationInitializers
					{
					DebugLocation(359, 33);
					PushFollow(Follow._annotationInitializers_in_annotationInit1869);
					annotationInitializers();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(64); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInit", 41);
			LeaveRule("annotationInit", 41);
			LeaveRule_annotationInit();
			if (state.backtracking > 0) { Memoize(input, 41, annotationInit_StartIndex); }

		}
		DebugLocation(360, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInit"); }
		return;

	}
	// $ANTLR end "annotationInit"

	partial void EnterRule_annotationInitializers();
	partial void LeaveRule_annotationInitializers();
	// $ANTLR start "annotationInitializers"
	// JavaTreeParser.g:362:1: annotationInitializers : ( ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
	[GrammarRule("annotationInitializers")]
	public void annotationInitializers()
	{
		EnterRule_annotationInitializers();
		EnterRule("annotationInitializers", 42);
		TraceIn("annotationInitializers", 42);
		int annotationInitializers_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInitializers");
		DebugLocation(362, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return; }

			// JavaTreeParser.g:363:5: ( ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if ((LA66_1==ANNOTATION_INIT_KEY_LIST))
			{
				alt66 = 1;
			}
			else if ((LA66_1==ANNOTATION_INIT_DEFAULT_KEY))
			{
				alt66 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:363:9: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
				{
				DebugLocation(363, 9);
				DebugLocation(363, 11);
				Match(input,ANNOTATION_INIT_KEY_LIST,Follow._ANNOTATION_INIT_KEY_LIST_in_annotationInitializers1891); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(363, 36);
				// JavaTreeParser.g:363:36: ( annotationInitializer )+
				int cnt65=0;
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_1 = input.LA(1);

					if ((LA65_1==IDENT))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:363:36: annotationInitializer
						{
						DebugLocation(363, 36);
						PushFollow(Follow._annotationInitializer_in_annotationInitializers1893);
						annotationInitializer();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						if (cnt65 >= 1)
							goto loop65;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee65 = new EarlyExitException( 65, input );
						DebugRecognitionException(eee65);
						throw eee65;
					}
					cnt65++;
				}
				loop65:
					;

				} finally { DebugExitSubRule(65); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:364:9: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
				{
				DebugLocation(364, 9);
				DebugLocation(364, 11);
				Match(input,ANNOTATION_INIT_DEFAULT_KEY,Follow._ANNOTATION_INIT_DEFAULT_KEY_in_annotationInitializers1906); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(364, 39);
				PushFollow(Follow._annotationElementValue_in_annotationInitializers1908);
				annotationElementValue();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInitializers", 42);
			LeaveRule("annotationInitializers", 42);
			LeaveRule_annotationInitializers();
			if (state.backtracking > 0) { Memoize(input, 42, annotationInitializers_StartIndex); }

		}
		DebugLocation(365, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializers"); }
		return;

	}
	// $ANTLR end "annotationInitializers"

	partial void EnterRule_annotationInitializer();
	partial void LeaveRule_annotationInitializer();
	// $ANTLR start "annotationInitializer"
	// JavaTreeParser.g:367:1: annotationInitializer : ^( IDENT annotationElementValue ) ;
	[GrammarRule("annotationInitializer")]
	public void annotationInitializer()
	{
		EnterRule_annotationInitializer();
		EnterRule("annotationInitializer", 43);
		TraceIn("annotationInitializer", 43);
		int annotationInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInitializer");
		DebugLocation(367, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return; }

			// JavaTreeParser.g:368:5: ( ^( IDENT annotationElementValue ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:368:9: ^( IDENT annotationElementValue )
			{
			DebugLocation(368, 9);
			DebugLocation(368, 11);
			Match(input,IDENT,Follow._IDENT_in_annotationInitializer1933); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(368, 17);
			PushFollow(Follow._annotationElementValue_in_annotationInitializer1935);
			annotationElementValue();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInitializer", 43);
			LeaveRule("annotationInitializer", 43);
			LeaveRule_annotationInitializer();
			if (state.backtracking > 0) { Memoize(input, 43, annotationInitializer_StartIndex); }

		}
		DebugLocation(369, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializer"); }
		return;

	}
	// $ANTLR end "annotationInitializer"

	partial void EnterRule_annotationElementValue();
	partial void LeaveRule_annotationElementValue();
	// $ANTLR start "annotationElementValue"
	// JavaTreeParser.g:371:1: annotationElementValue : ( ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* ) | annotation | expression );
	[GrammarRule("annotationElementValue")]
	public void annotationElementValue()
	{
		EnterRule_annotationElementValue();
		EnterRule("annotationElementValue", 44);
		TraceIn("annotationElementValue", 44);
		int annotationElementValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationElementValue");
		DebugLocation(371, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return; }

			// JavaTreeParser.g:372:5: ( ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* ) | annotation | expression )
			int alt68=3;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case ANNOTATION_INIT_ARRAY_ELEMENT:
				{
				alt68 = 1;
				}
				break;
			case AT:
				{
				alt68 = 2;
				}
				break;
			case EXPR:
				{
				alt68 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:372:9: ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* )
				{
				DebugLocation(372, 9);
				DebugLocation(372, 11);
				Match(input,ANNOTATION_INIT_ARRAY_ELEMENT,Follow._ANNOTATION_INIT_ARRAY_ELEMENT_in_annotationElementValue1960); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(372, 41);
					// JavaTreeParser.g:372:41: ( annotationElementValue )*
					try { DebugEnterSubRule(67);
					while (true)
					{
						int alt67=2;
						try { DebugEnterDecision(67, false);
						int LA67_1 = input.LA(1);

						if ((LA67_1==ANNOTATION_INIT_ARRAY_ELEMENT||LA67_1==AT||LA67_1==EXPR))
						{
							alt67 = 1;
						}


						} finally { DebugExitDecision(67); }
						switch ( alt67 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaTreeParser.g:372:41: annotationElementValue
							{
							DebugLocation(372, 41);
							PushFollow(Follow._annotationElementValue_in_annotationElementValue1962);
							annotationElementValue();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop67;
						}
					}

					loop67:
						;

					} finally { DebugExitSubRule(67); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:373:9: annotation
				{
				DebugLocation(373, 9);
				PushFollow(Follow._annotation_in_annotationElementValue1974);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:374:9: expression
				{
				DebugLocation(374, 9);
				PushFollow(Follow._expression_in_annotationElementValue1984);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationElementValue", 44);
			LeaveRule("annotationElementValue", 44);
			LeaveRule_annotationElementValue();
			if (state.backtracking > 0) { Memoize(input, 44, annotationElementValue_StartIndex); }

		}
		DebugLocation(375, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValue"); }
		return;

	}
	// $ANTLR end "annotationElementValue"

	partial void EnterRule_annotationTopLevelScope();
	partial void LeaveRule_annotationTopLevelScope();
	// $ANTLR start "annotationTopLevelScope"
	// JavaTreeParser.g:377:1: annotationTopLevelScope : ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* ) ;
	[GrammarRule("annotationTopLevelScope")]
	public void annotationTopLevelScope()
	{
		EnterRule_annotationTopLevelScope();
		EnterRule("annotationTopLevelScope", 45);
		TraceIn("annotationTopLevelScope", 45);
		int annotationTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTopLevelScope");
		DebugLocation(377, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return; }

			// JavaTreeParser.g:378:5: ( ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:378:9: ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* )
			{
			DebugLocation(378, 9);
			DebugLocation(378, 11);
			Match(input,ANNOTATION_TOP_LEVEL_SCOPE,Follow._ANNOTATION_TOP_LEVEL_SCOPE_in_annotationTopLevelScope2008); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(378, 38);
				// JavaTreeParser.g:378:38: ( annotationScopeDeclarations )*
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_1 = input.LA(1);

					if ((LA69_1==ANNOTATION_METHOD_DECL||LA69_1==AT||LA69_1==CLASS||LA69_1==ENUM||LA69_1==INTERFACE||LA69_1==VAR_DECLARATION))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch ( alt69 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:378:38: annotationScopeDeclarations
						{
						DebugLocation(378, 38);
						PushFollow(Follow._annotationScopeDeclarations_in_annotationTopLevelScope2010);
						annotationScopeDeclarations();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop69;
					}
				}

				loop69:
					;

				} finally { DebugExitSubRule(69); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTopLevelScope", 45);
			LeaveRule("annotationTopLevelScope", 45);
			LeaveRule_annotationTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 45, annotationTopLevelScope_StartIndex); }

		}
		DebugLocation(379, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTopLevelScope"); }
		return;

	}
	// $ANTLR end "annotationTopLevelScope"

	partial void EnterRule_annotationScopeDeclarations();
	partial void LeaveRule_annotationScopeDeclarations();
	// $ANTLR start "annotationScopeDeclarations"
	// JavaTreeParser.g:381:1: annotationScopeDeclarations : ( ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration );
	[GrammarRule("annotationScopeDeclarations")]
	public void annotationScopeDeclarations()
	{
		EnterRule_annotationScopeDeclarations();
		EnterRule("annotationScopeDeclarations", 46);
		TraceIn("annotationScopeDeclarations", 46);
		int annotationScopeDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationScopeDeclarations");
		DebugLocation(381, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return; }

			// JavaTreeParser.g:382:5: ( ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration )
			int alt71=3;
			try { DebugEnterDecision(71, false);
			switch (input.LA(1))
			{
			case ANNOTATION_METHOD_DECL:
				{
				alt71 = 1;
				}
				break;
			case VAR_DECLARATION:
				{
				alt71 = 2;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt71 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:382:9: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
				{
				DebugLocation(382, 9);
				DebugLocation(382, 11);
				Match(input,ANNOTATION_METHOD_DECL,Follow._ANNOTATION_METHOD_DECL_in_annotationScopeDeclarations2036); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(382, 34);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations2038);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(382, 47);
				PushFollow(Follow._type_in_annotationScopeDeclarations2040);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(382, 52);
				Match(input,IDENT,Follow._IDENT_in_annotationScopeDeclarations2042); if (state.failed) return;
				DebugLocation(382, 58);
				// JavaTreeParser.g:382:58: ( annotationDefaultValue )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==DEFAULT))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:382:58: annotationDefaultValue
					{
					DebugLocation(382, 58);
					PushFollow(Follow._annotationDefaultValue_in_annotationScopeDeclarations2044);
					annotationDefaultValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(70); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:383:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(383, 9);
				DebugLocation(383, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_annotationScopeDeclarations2057); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(383, 27);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations2059);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(383, 40);
				PushFollow(Follow._type_in_annotationScopeDeclarations2061);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(383, 45);
				PushFollow(Follow._variableDeclaratorList_in_annotationScopeDeclarations2063);
				variableDeclaratorList();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:384:9: typeDeclaration
				{
				DebugLocation(384, 9);
				PushFollow(Follow._typeDeclaration_in_annotationScopeDeclarations2074);
				typeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationScopeDeclarations", 46);
			LeaveRule("annotationScopeDeclarations", 46);
			LeaveRule_annotationScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 46, annotationScopeDeclarations_StartIndex); }

		}
		DebugLocation(385, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationScopeDeclarations"); }
		return;

	}
	// $ANTLR end "annotationScopeDeclarations"

	partial void EnterRule_annotationDefaultValue();
	partial void LeaveRule_annotationDefaultValue();
	// $ANTLR start "annotationDefaultValue"
	// JavaTreeParser.g:387:1: annotationDefaultValue : ^( DEFAULT annotationElementValue ) ;
	[GrammarRule("annotationDefaultValue")]
	public void annotationDefaultValue()
	{
		EnterRule_annotationDefaultValue();
		EnterRule("annotationDefaultValue", 47);
		TraceIn("annotationDefaultValue", 47);
		int annotationDefaultValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationDefaultValue");
		DebugLocation(387, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return; }

			// JavaTreeParser.g:388:5: ( ^( DEFAULT annotationElementValue ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:388:9: ^( DEFAULT annotationElementValue )
			{
			DebugLocation(388, 9);
			DebugLocation(388, 11);
			Match(input,DEFAULT,Follow._DEFAULT_in_annotationDefaultValue2098); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(388, 19);
			PushFollow(Follow._annotationElementValue_in_annotationDefaultValue2100);
			annotationElementValue();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationDefaultValue", 47);
			LeaveRule("annotationDefaultValue", 47);
			LeaveRule_annotationDefaultValue();
			if (state.backtracking > 0) { Memoize(input, 47, annotationDefaultValue_StartIndex); }

		}
		DebugLocation(389, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationDefaultValue"); }
		return;

	}
	// $ANTLR end "annotationDefaultValue"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// JavaTreeParser.g:393:1: block : ^( BLOCK_SCOPE ( blockStatement )* ) ;
	[GrammarRule("block")]
	public void block()
	{
		EnterRule_block();
		EnterRule("block", 48);
		TraceIn("block", 48);
		int block_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(393, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return; }

			// JavaTreeParser.g:394:5: ( ^( BLOCK_SCOPE ( blockStatement )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:394:9: ^( BLOCK_SCOPE ( blockStatement )* )
			{
			DebugLocation(394, 9);
			DebugLocation(394, 11);
			Match(input,BLOCK_SCOPE,Follow._BLOCK_SCOPE_in_block2123); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(394, 23);
				// JavaTreeParser.g:394:23: ( blockStatement )*
				try { DebugEnterSubRule(72);
				while (true)
				{
					int alt72=2;
					try { DebugEnterDecision(72, false);
					int LA72_1 = input.LA(1);

					if ((LA72_1==ASSERT||LA72_1==AT||LA72_1==BLOCK_SCOPE||LA72_1==BREAK||LA72_1==CLASS||LA72_1==CONTINUE||LA72_1==DO||LA72_1==ENUM||LA72_1==EXPR||LA72_1==FOR||LA72_1==FOR_EACH||LA72_1==IF||LA72_1==INTERFACE||LA72_1==LABELED_STATEMENT||LA72_1==RETURN||LA72_1==SEMI||LA72_1==SWITCH||LA72_1==SYNCHRONIZED||LA72_1==THROW||LA72_1==TRY||LA72_1==VAR_DECLARATION||LA72_1==WHILE))
					{
						alt72 = 1;
					}


					} finally { DebugExitDecision(72); }
					switch ( alt72 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:394:23: blockStatement
						{
						DebugLocation(394, 23);
						PushFollow(Follow._blockStatement_in_block2125);
						blockStatement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop72;
					}
				}

				loop72:
					;

				} finally { DebugExitSubRule(72); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 48);
			LeaveRule("block", 48);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 48, block_StartIndex); }

		}
		DebugLocation(395, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// JavaTreeParser.g:397:1: blockStatement : ( localVariableDeclaration | typeDeclaration | statement );
	[GrammarRule("blockStatement")]
	public void blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 49);
		TraceIn("blockStatement", 49);
		int blockStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(397, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return; }

			// JavaTreeParser.g:398:5: ( localVariableDeclaration | typeDeclaration | statement )
			int alt73=3;
			try { DebugEnterDecision(73, false);
			switch (input.LA(1))
			{
			case VAR_DECLARATION:
				{
				alt73 = 1;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt73 = 2;
				}
				break;
			case ASSERT:
			case BLOCK_SCOPE:
			case BREAK:
			case CONTINUE:
			case DO:
			case EXPR:
			case FOR:
			case FOR_EACH:
			case IF:
			case LABELED_STATEMENT:
			case RETURN:
			case SEMI:
			case SWITCH:
			case SYNCHRONIZED:
			case THROW:
			case TRY:
			case WHILE:
				{
				alt73 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:398:9: localVariableDeclaration
				{
				DebugLocation(398, 9);
				PushFollow(Follow._localVariableDeclaration_in_blockStatement2150);
				localVariableDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:399:9: typeDeclaration
				{
				DebugLocation(399, 9);
				PushFollow(Follow._typeDeclaration_in_blockStatement2160);
				typeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:400:9: statement
				{
				DebugLocation(400, 9);
				PushFollow(Follow._statement_in_blockStatement2170);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatement", 49);
			LeaveRule("blockStatement", 49);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 49, blockStatement_StartIndex); }

		}
		DebugLocation(401, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// JavaTreeParser.g:403:1: localVariableDeclaration : ^( VAR_DECLARATION localModifierList type variableDeclaratorList ) ;
	[GrammarRule("localVariableDeclaration")]
	public void localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 50);
		TraceIn("localVariableDeclaration", 50);
		int localVariableDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(403, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return; }

			// JavaTreeParser.g:404:5: ( ^( VAR_DECLARATION localModifierList type variableDeclaratorList ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:404:9: ^( VAR_DECLARATION localModifierList type variableDeclaratorList )
			{
			DebugLocation(404, 9);
			DebugLocation(404, 11);
			Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_localVariableDeclaration2194); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(404, 27);
			PushFollow(Follow._localModifierList_in_localVariableDeclaration2196);
			localModifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(404, 45);
			PushFollow(Follow._type_in_localVariableDeclaration2198);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(404, 50);
			PushFollow(Follow._variableDeclaratorList_in_localVariableDeclaration2200);
			variableDeclaratorList();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableDeclaration", 50);
			LeaveRule("localVariableDeclaration", 50);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 50, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(405, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// JavaTreeParser.g:408:1: statement : ( block | ^( ASSERT expression ( expression )? ) | ^( IF parenthesizedExpression statement ( statement )? ) | ^( FOR forInit forCondition forUpdater statement ) | ^( FOR_EACH localModifierList type IDENT expression statement ) | ^( WHILE parenthesizedExpression statement ) | ^( DO statement parenthesizedExpression ) | ^( TRY block ( catches )? ( block )? ) | ^( SWITCH parenthesizedExpression switchBlockLabels ) | ^( SYNCHRONIZED parenthesizedExpression block ) | ^( RETURN ( expression )? ) | ^( THROW expression ) | ^( BREAK ( IDENT )? ) | ^( CONTINUE ( IDENT )? ) | ^( LABELED_STATEMENT IDENT statement ) | expression | SEMI );
	[GrammarRule("statement")]
	public void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 51);
		TraceIn("statement", 51);
		int statement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(408, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return; }

			// JavaTreeParser.g:409:5: ( block | ^( ASSERT expression ( expression )? ) | ^( IF parenthesizedExpression statement ( statement )? ) | ^( FOR forInit forCondition forUpdater statement ) | ^( FOR_EACH localModifierList type IDENT expression statement ) | ^( WHILE parenthesizedExpression statement ) | ^( DO statement parenthesizedExpression ) | ^( TRY block ( catches )? ( block )? ) | ^( SWITCH parenthesizedExpression switchBlockLabels ) | ^( SYNCHRONIZED parenthesizedExpression block ) | ^( RETURN ( expression )? ) | ^( THROW expression ) | ^( BREAK ( IDENT )? ) | ^( CONTINUE ( IDENT )? ) | ^( LABELED_STATEMENT IDENT statement ) | expression | SEMI )
			int alt81=17;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case BLOCK_SCOPE:
				{
				alt81 = 1;
				}
				break;
			case ASSERT:
				{
				alt81 = 2;
				}
				break;
			case IF:
				{
				alt81 = 3;
				}
				break;
			case FOR:
				{
				alt81 = 4;
				}
				break;
			case FOR_EACH:
				{
				alt81 = 5;
				}
				break;
			case WHILE:
				{
				alt81 = 6;
				}
				break;
			case DO:
				{
				alt81 = 7;
				}
				break;
			case TRY:
				{
				alt81 = 8;
				}
				break;
			case SWITCH:
				{
				alt81 = 9;
				}
				break;
			case SYNCHRONIZED:
				{
				alt81 = 10;
				}
				break;
			case RETURN:
				{
				alt81 = 11;
				}
				break;
			case THROW:
				{
				alt81 = 12;
				}
				break;
			case BREAK:
				{
				alt81 = 13;
				}
				break;
			case CONTINUE:
				{
				alt81 = 14;
				}
				break;
			case LABELED_STATEMENT:
				{
				alt81 = 15;
				}
				break;
			case EXPR:
				{
				alt81 = 16;
				}
				break;
			case SEMI:
				{
				alt81 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:409:9: block
				{
				DebugLocation(409, 9);
				PushFollow(Follow._block_in_statement2233);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:410:9: ^( ASSERT expression ( expression )? )
				{
				DebugLocation(410, 9);
				DebugLocation(410, 11);
				Match(input,ASSERT,Follow._ASSERT_in_statement2244); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(410, 18);
				PushFollow(Follow._expression_in_statement2246);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(410, 29);
				// JavaTreeParser.g:410:29: ( expression )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==EXPR))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:410:29: expression
					{
					DebugLocation(410, 29);
					PushFollow(Follow._expression_in_statement2248);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:411:9: ^( IF parenthesizedExpression statement ( statement )? )
				{
				DebugLocation(411, 9);
				DebugLocation(411, 11);
				Match(input,IF,Follow._IF_in_statement2261); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(411, 14);
				PushFollow(Follow._parenthesizedExpression_in_statement2263);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(411, 38);
				PushFollow(Follow._statement_in_statement2265);
				statement();
				PopFollow();
				if (state.failed) return;
				DebugLocation(411, 48);
				// JavaTreeParser.g:411:48: ( statement )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==ASSERT||LA75_1==BLOCK_SCOPE||LA75_1==BREAK||LA75_1==CONTINUE||LA75_1==DO||LA75_1==EXPR||LA75_1==FOR||LA75_1==FOR_EACH||LA75_1==IF||LA75_1==LABELED_STATEMENT||LA75_1==RETURN||LA75_1==SEMI||LA75_1==SWITCH||LA75_1==SYNCHRONIZED||LA75_1==THROW||LA75_1==TRY||LA75_1==WHILE))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:411:48: statement
					{
					DebugLocation(411, 48);
					PushFollow(Follow._statement_in_statement2267);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(75); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaTreeParser.g:412:9: ^( FOR forInit forCondition forUpdater statement )
				{
				DebugLocation(412, 9);
				DebugLocation(412, 11);
				Match(input,FOR,Follow._FOR_in_statement2280); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(412, 15);
				PushFollow(Follow._forInit_in_statement2282);
				forInit();
				PopFollow();
				if (state.failed) return;
				DebugLocation(412, 23);
				PushFollow(Follow._forCondition_in_statement2284);
				forCondition();
				PopFollow();
				if (state.failed) return;
				DebugLocation(412, 36);
				PushFollow(Follow._forUpdater_in_statement2286);
				forUpdater();
				PopFollow();
				if (state.failed) return;
				DebugLocation(412, 47);
				PushFollow(Follow._statement_in_statement2288);
				statement();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaTreeParser.g:413:9: ^( FOR_EACH localModifierList type IDENT expression statement )
				{
				DebugLocation(413, 9);
				DebugLocation(413, 11);
				Match(input,FOR_EACH,Follow._FOR_EACH_in_statement2300); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(413, 20);
				PushFollow(Follow._localModifierList_in_statement2302);
				localModifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(413, 38);
				PushFollow(Follow._type_in_statement2304);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(413, 43);
				Match(input,IDENT,Follow._IDENT_in_statement2306); if (state.failed) return;
				DebugLocation(413, 49);
				PushFollow(Follow._expression_in_statement2308);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(413, 60);
				PushFollow(Follow._statement_in_statement2310);
				statement();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaTreeParser.g:414:9: ^( WHILE parenthesizedExpression statement )
				{
				DebugLocation(414, 9);
				DebugLocation(414, 11);
				Match(input,WHILE,Follow._WHILE_in_statement2323); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(414, 17);
				PushFollow(Follow._parenthesizedExpression_in_statement2325);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(414, 41);
				PushFollow(Follow._statement_in_statement2327);
				statement();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaTreeParser.g:415:9: ^( DO statement parenthesizedExpression )
				{
				DebugLocation(415, 9);
				DebugLocation(415, 11);
				Match(input,DO,Follow._DO_in_statement2339); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(415, 14);
				PushFollow(Follow._statement_in_statement2341);
				statement();
				PopFollow();
				if (state.failed) return;
				DebugLocation(415, 24);
				PushFollow(Follow._parenthesizedExpression_in_statement2343);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// JavaTreeParser.g:416:9: ^( TRY block ( catches )? ( block )? )
				{
				DebugLocation(416, 9);
				DebugLocation(416, 11);
				Match(input,TRY,Follow._TRY_in_statement2355); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(416, 15);
				PushFollow(Follow._block_in_statement2357);
				block();
				PopFollow();
				if (state.failed) return;
				DebugLocation(416, 21);
				// JavaTreeParser.g:416:21: ( catches )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==CATCH_CLAUSE_LIST))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:416:21: catches
					{
					DebugLocation(416, 21);
					PushFollow(Follow._catches_in_statement2359);
					catches();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(76); }

				DebugLocation(416, 30);
				// JavaTreeParser.g:416:30: ( block )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==BLOCK_SCOPE))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:416:30: block
					{
					DebugLocation(416, 30);
					PushFollow(Follow._block_in_statement2362);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(77); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// JavaTreeParser.g:417:9: ^( SWITCH parenthesizedExpression switchBlockLabels )
				{
				DebugLocation(417, 9);
				DebugLocation(417, 11);
				Match(input,SWITCH,Follow._SWITCH_in_statement2377); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(417, 18);
				PushFollow(Follow._parenthesizedExpression_in_statement2379);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(417, 42);
				PushFollow(Follow._switchBlockLabels_in_statement2381);
				switchBlockLabels();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// JavaTreeParser.g:418:9: ^( SYNCHRONIZED parenthesizedExpression block )
				{
				DebugLocation(418, 9);
				DebugLocation(418, 11);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement2393); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(418, 24);
				PushFollow(Follow._parenthesizedExpression_in_statement2395);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(418, 48);
				PushFollow(Follow._block_in_statement2397);
				block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// JavaTreeParser.g:419:9: ^( RETURN ( expression )? )
				{
				DebugLocation(419, 9);
				DebugLocation(419, 11);
				Match(input,RETURN,Follow._RETURN_in_statement2409); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(419, 18);
					// JavaTreeParser.g:419:18: ( expression )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, false);
					int LA78_1 = input.LA(1);

					if ((LA78_1==EXPR))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:419:18: expression
						{
						DebugLocation(419, 18);
						PushFollow(Follow._expression_in_statement2411);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(78); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// JavaTreeParser.g:420:9: ^( THROW expression )
				{
				DebugLocation(420, 9);
				DebugLocation(420, 11);
				Match(input,THROW,Follow._THROW_in_statement2424); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(420, 17);
				PushFollow(Follow._expression_in_statement2426);
				expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// JavaTreeParser.g:421:9: ^( BREAK ( IDENT )? )
				{
				DebugLocation(421, 9);
				DebugLocation(421, 11);
				Match(input,BREAK,Follow._BREAK_in_statement2438); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(421, 17);
					// JavaTreeParser.g:421:17: ( IDENT )?
					int alt79=2;
					try { DebugEnterSubRule(79);
					try { DebugEnterDecision(79, false);
					int LA79_1 = input.LA(1);

					if ((LA79_1==IDENT))
					{
						alt79 = 1;
					}
					} finally { DebugExitDecision(79); }
					switch (alt79)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:421:17: IDENT
						{
						DebugLocation(421, 17);
						Match(input,IDENT,Follow._IDENT_in_statement2440); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(79); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// JavaTreeParser.g:422:9: ^( CONTINUE ( IDENT )? )
				{
				DebugLocation(422, 9);
				DebugLocation(422, 11);
				Match(input,CONTINUE,Follow._CONTINUE_in_statement2453); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(422, 20);
					// JavaTreeParser.g:422:20: ( IDENT )?
					int alt80=2;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, false);
					int LA80_1 = input.LA(1);

					if ((LA80_1==IDENT))
					{
						alt80 = 1;
					}
					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:422:20: IDENT
						{
						DebugLocation(422, 20);
						Match(input,IDENT,Follow._IDENT_in_statement2455); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(80); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// JavaTreeParser.g:423:9: ^( LABELED_STATEMENT IDENT statement )
				{
				DebugLocation(423, 9);
				DebugLocation(423, 11);
				Match(input,LABELED_STATEMENT,Follow._LABELED_STATEMENT_in_statement2468); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(423, 29);
				Match(input,IDENT,Follow._IDENT_in_statement2470); if (state.failed) return;
				DebugLocation(423, 35);
				PushFollow(Follow._statement_in_statement2472);
				statement();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 16:
				DebugEnterAlt(16);
				// JavaTreeParser.g:424:9: expression
				{
				DebugLocation(424, 9);
				PushFollow(Follow._expression_in_statement2483);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// JavaTreeParser.g:425:9: SEMI
				{
				DebugLocation(425, 9);
				Match(input,SEMI,Follow._SEMI_in_statement2493); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 51);
			LeaveRule("statement", 51);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 51, statement_StartIndex); }

		}
		DebugLocation(426, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// JavaTreeParser.g:428:1: catches : ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
	[GrammarRule("catches")]
	public void catches()
	{
		EnterRule_catches();
		EnterRule("catches", 52);
		TraceIn("catches", 52);
		int catches_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(428, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return; }

			// JavaTreeParser.g:429:5: ( ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:429:9: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
			{
			DebugLocation(429, 9);
			DebugLocation(429, 11);
			Match(input,CATCH_CLAUSE_LIST,Follow._CATCH_CLAUSE_LIST_in_catches2522); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(429, 29);
			// JavaTreeParser.g:429:29: ( catchClause )+
			int cnt82=0;
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_1 = input.LA(1);

				if ((LA82_1==CATCH))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:429:29: catchClause
					{
					DebugLocation(429, 29);
					PushFollow(Follow._catchClause_in_catches2524);
					catchClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt82 >= 1)
						goto loop82;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee82 = new EarlyExitException( 82, input );
					DebugRecognitionException(eee82);
					throw eee82;
				}
				cnt82++;
			}
			loop82:
				;

			} finally { DebugExitSubRule(82); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catches", 52);
			LeaveRule("catches", 52);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 52, catches_StartIndex); }

		}
		DebugLocation(430, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// JavaTreeParser.g:432:1: catchClause : ^( CATCH formalParameterStandardDecl block ) ;
	[GrammarRule("catchClause")]
	public void catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 53);
		TraceIn("catchClause", 53);
		int catchClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(432, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return; }

			// JavaTreeParser.g:433:5: ( ^( CATCH formalParameterStandardDecl block ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:433:9: ^( CATCH formalParameterStandardDecl block )
			{
			DebugLocation(433, 9);
			DebugLocation(433, 11);
			Match(input,CATCH,Follow._CATCH_in_catchClause2550); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(433, 17);
			PushFollow(Follow._formalParameterStandardDecl_in_catchClause2552);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(433, 45);
			PushFollow(Follow._block_in_catchClause2554);
			block();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 53);
			LeaveRule("catchClause", 53);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 53, catchClause_StartIndex); }

		}
		DebugLocation(434, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_switchBlockLabels();
	partial void LeaveRule_switchBlockLabels();
	// $ANTLR start "switchBlockLabels"
	// JavaTreeParser.g:436:1: switchBlockLabels : ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabel )* ( switchDefaultLabel )? ( switchCaseLabel )* ) ;
	[GrammarRule("switchBlockLabels")]
	public void switchBlockLabels()
	{
		EnterRule_switchBlockLabels();
		EnterRule("switchBlockLabels", 54);
		TraceIn("switchBlockLabels", 54);
		int switchBlockLabels_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchBlockLabels");
		DebugLocation(436, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return; }

			// JavaTreeParser.g:437:5: ( ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabel )* ( switchDefaultLabel )? ( switchCaseLabel )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:437:9: ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabel )* ( switchDefaultLabel )? ( switchCaseLabel )* )
			{
			DebugLocation(437, 9);
			DebugLocation(437, 11);
			Match(input,SWITCH_BLOCK_LABEL_LIST,Follow._SWITCH_BLOCK_LABEL_LIST_in_switchBlockLabels2575); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(437, 35);
				// JavaTreeParser.g:437:35: ( switchCaseLabel )*
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_1 = input.LA(1);

					if ((LA83_1==CASE))
					{
						int LA83_2 = input.LA(2);

						if ((EvaluatePredicate(synpred126_JavaTreeParser_fragment)))
						{
							alt83 = 1;
						}


					}


					} finally { DebugExitDecision(83); }
					switch ( alt83 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:437:35: switchCaseLabel
						{
						DebugLocation(437, 35);
						PushFollow(Follow._switchCaseLabel_in_switchBlockLabels2577);
						switchCaseLabel();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop83;
					}
				}

				loop83:
					;

				} finally { DebugExitSubRule(83); }

				DebugLocation(437, 52);
				// JavaTreeParser.g:437:52: ( switchDefaultLabel )?
				int alt84=2;
				try { DebugEnterSubRule(84);
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if ((LA84_1==DEFAULT))
				{
					alt84 = 1;
				}
				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:437:52: switchDefaultLabel
					{
					DebugLocation(437, 52);
					PushFollow(Follow._switchDefaultLabel_in_switchBlockLabels2580);
					switchDefaultLabel();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(84); }

				DebugLocation(437, 72);
				// JavaTreeParser.g:437:72: ( switchCaseLabel )*
				try { DebugEnterSubRule(85);
				while (true)
				{
					int alt85=2;
					try { DebugEnterDecision(85, false);
					int LA85_1 = input.LA(1);

					if ((LA85_1==CASE))
					{
						alt85 = 1;
					}


					} finally { DebugExitDecision(85); }
					switch ( alt85 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:437:72: switchCaseLabel
						{
						DebugLocation(437, 72);
						PushFollow(Follow._switchCaseLabel_in_switchBlockLabels2583);
						switchCaseLabel();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop85;
					}
				}

				loop85:
					;

				} finally { DebugExitSubRule(85); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlockLabels", 54);
			LeaveRule("switchBlockLabels", 54);
			LeaveRule_switchBlockLabels();
			if (state.backtracking > 0) { Memoize(input, 54, switchBlockLabels_StartIndex); }

		}
		DebugLocation(438, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockLabels"); }
		return;

	}
	// $ANTLR end "switchBlockLabels"

	partial void EnterRule_switchCaseLabel();
	partial void LeaveRule_switchCaseLabel();
	// $ANTLR start "switchCaseLabel"
	// JavaTreeParser.g:440:1: switchCaseLabel : ^( CASE expression ( blockStatement )* ) ;
	[GrammarRule("switchCaseLabel")]
	public void switchCaseLabel()
	{
		EnterRule_switchCaseLabel();
		EnterRule("switchCaseLabel", 55);
		TraceIn("switchCaseLabel", 55);
		int switchCaseLabel_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchCaseLabel");
		DebugLocation(440, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return; }

			// JavaTreeParser.g:441:5: ( ^( CASE expression ( blockStatement )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:441:9: ^( CASE expression ( blockStatement )* )
			{
			DebugLocation(441, 9);
			DebugLocation(441, 11);
			Match(input,CASE,Follow._CASE_in_switchCaseLabel2613); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(441, 16);
			PushFollow(Follow._expression_in_switchCaseLabel2615);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(441, 27);
			// JavaTreeParser.g:441:27: ( blockStatement )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==ASSERT||LA86_1==AT||LA86_1==BLOCK_SCOPE||LA86_1==BREAK||LA86_1==CLASS||LA86_1==CONTINUE||LA86_1==DO||LA86_1==ENUM||LA86_1==EXPR||LA86_1==FOR||LA86_1==FOR_EACH||LA86_1==IF||LA86_1==INTERFACE||LA86_1==LABELED_STATEMENT||LA86_1==RETURN||LA86_1==SEMI||LA86_1==SWITCH||LA86_1==SYNCHRONIZED||LA86_1==THROW||LA86_1==TRY||LA86_1==VAR_DECLARATION||LA86_1==WHILE))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:441:27: blockStatement
					{
					DebugLocation(441, 27);
					PushFollow(Follow._blockStatement_in_switchCaseLabel2617);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchCaseLabel", 55);
			LeaveRule("switchCaseLabel", 55);
			LeaveRule_switchCaseLabel();
			if (state.backtracking > 0) { Memoize(input, 55, switchCaseLabel_StartIndex); }

		}
		DebugLocation(442, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabel"); }
		return;

	}
	// $ANTLR end "switchCaseLabel"

	partial void EnterRule_switchDefaultLabel();
	partial void LeaveRule_switchDefaultLabel();
	// $ANTLR start "switchDefaultLabel"
	// JavaTreeParser.g:444:1: switchDefaultLabel : ^( DEFAULT ( blockStatement )* ) ;
	[GrammarRule("switchDefaultLabel")]
	public void switchDefaultLabel()
	{
		EnterRule_switchDefaultLabel();
		EnterRule("switchDefaultLabel", 56);
		TraceIn("switchDefaultLabel", 56);
		int switchDefaultLabel_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchDefaultLabel");
		DebugLocation(444, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return; }

			// JavaTreeParser.g:445:5: ( ^( DEFAULT ( blockStatement )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:445:9: ^( DEFAULT ( blockStatement )* )
			{
			DebugLocation(445, 9);
			DebugLocation(445, 11);
			Match(input,DEFAULT,Follow._DEFAULT_in_switchDefaultLabel2643); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(445, 19);
				// JavaTreeParser.g:445:19: ( blockStatement )*
				try { DebugEnterSubRule(87);
				while (true)
				{
					int alt87=2;
					try { DebugEnterDecision(87, false);
					int LA87_1 = input.LA(1);

					if ((LA87_1==ASSERT||LA87_1==AT||LA87_1==BLOCK_SCOPE||LA87_1==BREAK||LA87_1==CLASS||LA87_1==CONTINUE||LA87_1==DO||LA87_1==ENUM||LA87_1==EXPR||LA87_1==FOR||LA87_1==FOR_EACH||LA87_1==IF||LA87_1==INTERFACE||LA87_1==LABELED_STATEMENT||LA87_1==RETURN||LA87_1==SEMI||LA87_1==SWITCH||LA87_1==SYNCHRONIZED||LA87_1==THROW||LA87_1==TRY||LA87_1==VAR_DECLARATION||LA87_1==WHILE))
					{
						alt87 = 1;
					}


					} finally { DebugExitDecision(87); }
					switch ( alt87 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:445:19: blockStatement
						{
						DebugLocation(445, 19);
						PushFollow(Follow._blockStatement_in_switchDefaultLabel2645);
						blockStatement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop87;
					}
				}

				loop87:
					;

				} finally { DebugExitSubRule(87); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchDefaultLabel", 56);
			LeaveRule("switchDefaultLabel", 56);
			LeaveRule_switchDefaultLabel();
			if (state.backtracking > 0) { Memoize(input, 56, switchDefaultLabel_StartIndex); }

		}
		DebugLocation(446, 4);
		} finally { DebugExitRule(GrammarFileName, "switchDefaultLabel"); }
		return;

	}
	// $ANTLR end "switchDefaultLabel"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// JavaTreeParser.g:448:1: forInit : ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? ) ;
	[GrammarRule("forInit")]
	public void forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 57);
		TraceIn("forInit", 57);
		int forInit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(448, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return; }

			// JavaTreeParser.g:449:5: ( ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:449:9: ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? )
			{
			DebugLocation(449, 9);
			DebugLocation(449, 11);
			Match(input,FOR_INIT,Follow._FOR_INIT_in_forInit2671); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(449, 20);
				// JavaTreeParser.g:449:20: ( localVariableDeclaration | ( expression )* )?
				int alt89=3;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				switch (input.LA(1))
				{
				case VAR_DECLARATION:
					{
					alt89 = 1;
					}
					break;
				case EXPR:
					{
					alt89 = 2;
					}
					break;
				case UP:
					{
					int LA89_2 = input.LA(2);

					if ((EvaluatePredicate(synpred133_JavaTreeParser_fragment)))
					{
						alt89 = 2;
					}
					}
					break;
				}

				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:449:21: localVariableDeclaration
					{
					DebugLocation(449, 21);
					PushFollow(Follow._localVariableDeclaration_in_forInit2674);
					localVariableDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// JavaTreeParser.g:449:48: ( expression )*
					{
					DebugLocation(449, 48);
					// JavaTreeParser.g:449:48: ( expression )*
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_1 = input.LA(1);

						if ((LA88_1==EXPR))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch ( alt88 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaTreeParser.g:449:48: expression
							{
							DebugLocation(449, 48);
							PushFollow(Follow._expression_in_forInit2678);
							expression();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop88;
						}
					}

					loop88:
						;

					} finally { DebugExitSubRule(88); }


					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInit", 57);
			LeaveRule("forInit", 57);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 57, forInit_StartIndex); }

		}
		DebugLocation(450, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// JavaTreeParser.g:452:1: forCondition : ^( FOR_CONDITION ( expression )? ) ;
	[GrammarRule("forCondition")]
	public void forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 58);
		TraceIn("forCondition", 58);
		int forCondition_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(452, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return; }

			// JavaTreeParser.g:453:5: ( ^( FOR_CONDITION ( expression )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:453:9: ^( FOR_CONDITION ( expression )? )
			{
			DebugLocation(453, 9);
			DebugLocation(453, 11);
			Match(input,FOR_CONDITION,Follow._FOR_CONDITION_in_forCondition2706); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(453, 25);
				// JavaTreeParser.g:453:25: ( expression )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==EXPR))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:453:25: expression
					{
					DebugLocation(453, 25);
					PushFollow(Follow._expression_in_forCondition2708);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forCondition", 58);
			LeaveRule("forCondition", 58);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 58, forCondition_StartIndex); }

		}
		DebugLocation(454, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdater();
	partial void LeaveRule_forUpdater();
	// $ANTLR start "forUpdater"
	// JavaTreeParser.g:456:1: forUpdater : ^( FOR_UPDATE ( expression )* ) ;
	[GrammarRule("forUpdater")]
	public void forUpdater()
	{
		EnterRule_forUpdater();
		EnterRule("forUpdater", 59);
		TraceIn("forUpdater", 59);
		int forUpdater_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forUpdater");
		DebugLocation(456, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return; }

			// JavaTreeParser.g:457:5: ( ^( FOR_UPDATE ( expression )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:457:9: ^( FOR_UPDATE ( expression )* )
			{
			DebugLocation(457, 9);
			DebugLocation(457, 11);
			Match(input,FOR_UPDATE,Follow._FOR_UPDATE_in_forUpdater2734); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(457, 22);
				// JavaTreeParser.g:457:22: ( expression )*
				try { DebugEnterSubRule(91);
				while (true)
				{
					int alt91=2;
					try { DebugEnterDecision(91, false);
					int LA91_1 = input.LA(1);

					if ((LA91_1==EXPR))
					{
						alt91 = 1;
					}


					} finally { DebugExitDecision(91); }
					switch ( alt91 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:457:22: expression
						{
						DebugLocation(457, 22);
						PushFollow(Follow._expression_in_forUpdater2736);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop91;
					}
				}

				loop91:
					;

				} finally { DebugExitSubRule(91); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forUpdater", 59);
			LeaveRule("forUpdater", 59);
			LeaveRule_forUpdater();
			if (state.backtracking > 0) { Memoize(input, 59, forUpdater_StartIndex); }

		}
		DebugLocation(458, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdater"); }
		return;

	}
	// $ANTLR end "forUpdater"

	partial void EnterRule_parenthesizedExpression();
	partial void LeaveRule_parenthesizedExpression();
	// $ANTLR start "parenthesizedExpression"
	// JavaTreeParser.g:462:1: parenthesizedExpression : ^( PARENTESIZED_EXPR expression ) ;
	[GrammarRule("parenthesizedExpression")]
	public void parenthesizedExpression()
	{
		EnterRule_parenthesizedExpression();
		EnterRule("parenthesizedExpression", 60);
		TraceIn("parenthesizedExpression", 60);
		int parenthesizedExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "parenthesizedExpression");
		DebugLocation(462, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return; }

			// JavaTreeParser.g:463:5: ( ^( PARENTESIZED_EXPR expression ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:463:9: ^( PARENTESIZED_EXPR expression )
			{
			DebugLocation(463, 9);
			DebugLocation(463, 11);
			Match(input,PARENTESIZED_EXPR,Follow._PARENTESIZED_EXPR_in_parenthesizedExpression2764); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(463, 29);
			PushFollow(Follow._expression_in_parenthesizedExpression2766);
			expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parenthesizedExpression", 60);
			LeaveRule("parenthesizedExpression", 60);
			LeaveRule_parenthesizedExpression();
			if (state.backtracking > 0) { Memoize(input, 60, parenthesizedExpression_StartIndex); }

		}
		DebugLocation(464, 4);
		} finally { DebugExitRule(GrammarFileName, "parenthesizedExpression"); }
		return;

	}
	// $ANTLR end "parenthesizedExpression"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// JavaTreeParser.g:466:1: expression : ^( EXPR expr ) ;
	[GrammarRule("expression")]
	public void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 61);
		TraceIn("expression", 61);
		int expression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(466, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return; }

			// JavaTreeParser.g:467:5: ( ^( EXPR expr ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:467:9: ^( EXPR expr )
			{
			DebugLocation(467, 9);
			DebugLocation(467, 11);
			Match(input,EXPR,Follow._EXPR_in_expression2791); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(467, 16);
			PushFollow(Follow._expr_in_expression2793);
			expr();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 61);
			LeaveRule("expression", 61);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 61, expression_StartIndex); }

		}
		DebugLocation(468, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// JavaTreeParser.g:470:1: expr : ( ^( ASSIGN expr expr ) | ^( PLUS_ASSIGN expr expr ) | ^( MINUS_ASSIGN expr expr ) | ^( STAR_ASSIGN expr expr ) | ^( DIV_ASSIGN expr expr ) | ^( AND_ASSIGN expr expr ) | ^( OR_ASSIGN expr expr ) | ^( XOR_ASSIGN expr expr ) | ^( MOD_ASSIGN expr expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_LEFT_ASSIGN expr expr ) | ^( QUESTION expr expr expr ) | ^( LOGICAL_OR expr expr ) | ^( LOGICAL_AND expr expr ) | ^( OR expr expr ) | ^( XOR expr expr ) | ^( AND expr expr ) | ^( EQUAL expr expr ) | ^( NOT_EQUAL expr expr ) | ^( INSTANCEOF expr type ) | ^( LESS_OR_EQUAL expr expr ) | ^( GREATER_OR_EQUAL expr expr ) | ^( BIT_SHIFT_RIGHT expr expr ) | ^( SHIFT_RIGHT expr expr ) | ^( GREATER_THAN expr expr ) | ^( SHIFT_LEFT expr expr ) | ^( LESS_THAN expr expr ) | ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( MOD expr expr ) | ^( UNARY_PLUS expr ) | ^( UNARY_MINUS expr ) | ^( PRE_INC expr ) | ^( PRE_DEC expr ) | ^( POST_INC expr ) | ^( POST_DEC expr ) | ^( NOT expr ) | ^( LOGICAL_NOT expr ) | ^( CAST_EXPR type expr ) | primaryExpression );
	[GrammarRule("expr")]
	public void expr()
	{
		EnterRule_expr();
		EnterRule("expr", 62);
		TraceIn("expr", 62);
		int expr_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(470, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return; }

			// JavaTreeParser.g:471:5: ( ^( ASSIGN expr expr ) | ^( PLUS_ASSIGN expr expr ) | ^( MINUS_ASSIGN expr expr ) | ^( STAR_ASSIGN expr expr ) | ^( DIV_ASSIGN expr expr ) | ^( AND_ASSIGN expr expr ) | ^( OR_ASSIGN expr expr ) | ^( XOR_ASSIGN expr expr ) | ^( MOD_ASSIGN expr expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_LEFT_ASSIGN expr expr ) | ^( QUESTION expr expr expr ) | ^( LOGICAL_OR expr expr ) | ^( LOGICAL_AND expr expr ) | ^( OR expr expr ) | ^( XOR expr expr ) | ^( AND expr expr ) | ^( EQUAL expr expr ) | ^( NOT_EQUAL expr expr ) | ^( INSTANCEOF expr type ) | ^( LESS_OR_EQUAL expr expr ) | ^( GREATER_OR_EQUAL expr expr ) | ^( BIT_SHIFT_RIGHT expr expr ) | ^( SHIFT_RIGHT expr expr ) | ^( GREATER_THAN expr expr ) | ^( SHIFT_LEFT expr expr ) | ^( LESS_THAN expr expr ) | ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( MOD expr expr ) | ^( UNARY_PLUS expr ) | ^( UNARY_MINUS expr ) | ^( PRE_INC expr ) | ^( PRE_DEC expr ) | ^( POST_INC expr ) | ^( POST_DEC expr ) | ^( NOT expr ) | ^( LOGICAL_NOT expr ) | ^( CAST_EXPR type expr ) | primaryExpression )
			int alt92=43;
			try { DebugEnterDecision(92, false);
			switch (input.LA(1))
			{
			case ASSIGN:
				{
				alt92 = 1;
				}
				break;
			case PLUS_ASSIGN:
				{
				alt92 = 2;
				}
				break;
			case MINUS_ASSIGN:
				{
				alt92 = 3;
				}
				break;
			case STAR_ASSIGN:
				{
				alt92 = 4;
				}
				break;
			case DIV_ASSIGN:
				{
				alt92 = 5;
				}
				break;
			case AND_ASSIGN:
				{
				alt92 = 6;
				}
				break;
			case OR_ASSIGN:
				{
				alt92 = 7;
				}
				break;
			case XOR_ASSIGN:
				{
				alt92 = 8;
				}
				break;
			case MOD_ASSIGN:
				{
				alt92 = 9;
				}
				break;
			case BIT_SHIFT_RIGHT_ASSIGN:
				{
				alt92 = 10;
				}
				break;
			case SHIFT_RIGHT_ASSIGN:
				{
				alt92 = 11;
				}
				break;
			case SHIFT_LEFT_ASSIGN:
				{
				alt92 = 12;
				}
				break;
			case QUESTION:
				{
				alt92 = 13;
				}
				break;
			case LOGICAL_OR:
				{
				alt92 = 14;
				}
				break;
			case LOGICAL_AND:
				{
				alt92 = 15;
				}
				break;
			case OR:
				{
				alt92 = 16;
				}
				break;
			case XOR:
				{
				alt92 = 17;
				}
				break;
			case AND:
				{
				alt92 = 18;
				}
				break;
			case EQUAL:
				{
				alt92 = 19;
				}
				break;
			case NOT_EQUAL:
				{
				alt92 = 20;
				}
				break;
			case INSTANCEOF:
				{
				alt92 = 21;
				}
				break;
			case LESS_OR_EQUAL:
				{
				alt92 = 22;
				}
				break;
			case GREATER_OR_EQUAL:
				{
				alt92 = 23;
				}
				break;
			case BIT_SHIFT_RIGHT:
				{
				alt92 = 24;
				}
				break;
			case SHIFT_RIGHT:
				{
				alt92 = 25;
				}
				break;
			case GREATER_THAN:
				{
				alt92 = 26;
				}
				break;
			case SHIFT_LEFT:
				{
				alt92 = 27;
				}
				break;
			case LESS_THAN:
				{
				alt92 = 28;
				}
				break;
			case PLUS:
				{
				alt92 = 29;
				}
				break;
			case MINUS:
				{
				alt92 = 30;
				}
				break;
			case STAR:
				{
				alt92 = 31;
				}
				break;
			case DIV:
				{
				alt92 = 32;
				}
				break;
			case MOD:
				{
				alt92 = 33;
				}
				break;
			case UNARY_PLUS:
				{
				alt92 = 34;
				}
				break;
			case UNARY_MINUS:
				{
				alt92 = 35;
				}
				break;
			case PRE_INC:
				{
				alt92 = 36;
				}
				break;
			case PRE_DEC:
				{
				alt92 = 37;
				}
				break;
			case POST_INC:
				{
				alt92 = 38;
				}
				break;
			case POST_DEC:
				{
				alt92 = 39;
				}
				break;
			case NOT:
				{
				alt92 = 40;
				}
				break;
			case LOGICAL_NOT:
				{
				alt92 = 41;
				}
				break;
			case CAST_EXPR:
				{
				alt92 = 42;
				}
				break;
			case ARRAY_DECLARATOR:
			case ARRAY_ELEMENT_ACCESS:
			case CHARACTER_LITERAL:
			case CLASS_CONSTRUCTOR_CALL:
			case DECIMAL_LITERAL:
			case DOT:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case METHOD_CALL:
			case NULL:
			case OCTAL_LITERAL:
			case PARENTESIZED_EXPR:
			case STATIC_ARRAY_CREATOR:
			case STRING_LITERAL:
			case SUPER:
			case SUPER_CONSTRUCTOR_CALL:
			case THIS:
			case THIS_CONSTRUCTOR_CALL:
			case TRUE:
				{
				alt92 = 43;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:471:9: ^( ASSIGN expr expr )
				{
				DebugLocation(471, 9);
				DebugLocation(471, 11);
				Match(input,ASSIGN,Follow._ASSIGN_in_expr2814); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(471, 18);
				PushFollow(Follow._expr_in_expr2816);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(471, 23);
				PushFollow(Follow._expr_in_expr2818);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:472:9: ^( PLUS_ASSIGN expr expr )
				{
				DebugLocation(472, 9);
				DebugLocation(472, 11);
				Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_expr2830); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(472, 23);
				PushFollow(Follow._expr_in_expr2832);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(472, 28);
				PushFollow(Follow._expr_in_expr2834);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:473:9: ^( MINUS_ASSIGN expr expr )
				{
				DebugLocation(473, 9);
				DebugLocation(473, 11);
				Match(input,MINUS_ASSIGN,Follow._MINUS_ASSIGN_in_expr2846); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(473, 24);
				PushFollow(Follow._expr_in_expr2848);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(473, 29);
				PushFollow(Follow._expr_in_expr2850);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaTreeParser.g:474:9: ^( STAR_ASSIGN expr expr )
				{
				DebugLocation(474, 9);
				DebugLocation(474, 11);
				Match(input,STAR_ASSIGN,Follow._STAR_ASSIGN_in_expr2862); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(474, 23);
				PushFollow(Follow._expr_in_expr2864);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(474, 28);
				PushFollow(Follow._expr_in_expr2866);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaTreeParser.g:475:9: ^( DIV_ASSIGN expr expr )
				{
				DebugLocation(475, 9);
				DebugLocation(475, 11);
				Match(input,DIV_ASSIGN,Follow._DIV_ASSIGN_in_expr2878); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(475, 22);
				PushFollow(Follow._expr_in_expr2880);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(475, 27);
				PushFollow(Follow._expr_in_expr2882);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaTreeParser.g:476:9: ^( AND_ASSIGN expr expr )
				{
				DebugLocation(476, 9);
				DebugLocation(476, 11);
				Match(input,AND_ASSIGN,Follow._AND_ASSIGN_in_expr2894); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(476, 22);
				PushFollow(Follow._expr_in_expr2896);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(476, 27);
				PushFollow(Follow._expr_in_expr2898);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaTreeParser.g:477:9: ^( OR_ASSIGN expr expr )
				{
				DebugLocation(477, 9);
				DebugLocation(477, 11);
				Match(input,OR_ASSIGN,Follow._OR_ASSIGN_in_expr2910); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(477, 21);
				PushFollow(Follow._expr_in_expr2912);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(477, 26);
				PushFollow(Follow._expr_in_expr2914);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// JavaTreeParser.g:478:9: ^( XOR_ASSIGN expr expr )
				{
				DebugLocation(478, 9);
				DebugLocation(478, 11);
				Match(input,XOR_ASSIGN,Follow._XOR_ASSIGN_in_expr2926); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(478, 22);
				PushFollow(Follow._expr_in_expr2928);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(478, 27);
				PushFollow(Follow._expr_in_expr2930);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// JavaTreeParser.g:479:9: ^( MOD_ASSIGN expr expr )
				{
				DebugLocation(479, 9);
				DebugLocation(479, 11);
				Match(input,MOD_ASSIGN,Follow._MOD_ASSIGN_in_expr2942); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(479, 22);
				PushFollow(Follow._expr_in_expr2944);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(479, 27);
				PushFollow(Follow._expr_in_expr2946);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// JavaTreeParser.g:480:9: ^( BIT_SHIFT_RIGHT_ASSIGN expr expr )
				{
				DebugLocation(480, 9);
				DebugLocation(480, 11);
				Match(input,BIT_SHIFT_RIGHT_ASSIGN,Follow._BIT_SHIFT_RIGHT_ASSIGN_in_expr2958); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(480, 34);
				PushFollow(Follow._expr_in_expr2960);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(480, 39);
				PushFollow(Follow._expr_in_expr2962);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// JavaTreeParser.g:481:9: ^( SHIFT_RIGHT_ASSIGN expr expr )
				{
				DebugLocation(481, 9);
				DebugLocation(481, 11);
				Match(input,SHIFT_RIGHT_ASSIGN,Follow._SHIFT_RIGHT_ASSIGN_in_expr2974); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(481, 30);
				PushFollow(Follow._expr_in_expr2976);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(481, 35);
				PushFollow(Follow._expr_in_expr2978);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// JavaTreeParser.g:482:9: ^( SHIFT_LEFT_ASSIGN expr expr )
				{
				DebugLocation(482, 9);
				DebugLocation(482, 11);
				Match(input,SHIFT_LEFT_ASSIGN,Follow._SHIFT_LEFT_ASSIGN_in_expr2990); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(482, 29);
				PushFollow(Follow._expr_in_expr2992);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(482, 34);
				PushFollow(Follow._expr_in_expr2994);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// JavaTreeParser.g:483:9: ^( QUESTION expr expr expr )
				{
				DebugLocation(483, 9);
				DebugLocation(483, 11);
				Match(input,QUESTION,Follow._QUESTION_in_expr3006); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(483, 20);
				PushFollow(Follow._expr_in_expr3008);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(483, 25);
				PushFollow(Follow._expr_in_expr3010);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(483, 30);
				PushFollow(Follow._expr_in_expr3012);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// JavaTreeParser.g:484:9: ^( LOGICAL_OR expr expr )
				{
				DebugLocation(484, 9);
				DebugLocation(484, 11);
				Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_expr3024); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(484, 22);
				PushFollow(Follow._expr_in_expr3026);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(484, 27);
				PushFollow(Follow._expr_in_expr3028);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// JavaTreeParser.g:485:9: ^( LOGICAL_AND expr expr )
				{
				DebugLocation(485, 9);
				DebugLocation(485, 11);
				Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_expr3040); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(485, 23);
				PushFollow(Follow._expr_in_expr3042);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(485, 28);
				PushFollow(Follow._expr_in_expr3044);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 16:
				DebugEnterAlt(16);
				// JavaTreeParser.g:486:9: ^( OR expr expr )
				{
				DebugLocation(486, 9);
				DebugLocation(486, 11);
				Match(input,OR,Follow._OR_in_expr3056); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(486, 14);
				PushFollow(Follow._expr_in_expr3058);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(486, 19);
				PushFollow(Follow._expr_in_expr3060);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 17:
				DebugEnterAlt(17);
				// JavaTreeParser.g:487:9: ^( XOR expr expr )
				{
				DebugLocation(487, 9);
				DebugLocation(487, 11);
				Match(input,XOR,Follow._XOR_in_expr3072); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(487, 15);
				PushFollow(Follow._expr_in_expr3074);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(487, 20);
				PushFollow(Follow._expr_in_expr3076);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 18:
				DebugEnterAlt(18);
				// JavaTreeParser.g:488:9: ^( AND expr expr )
				{
				DebugLocation(488, 9);
				DebugLocation(488, 11);
				Match(input,AND,Follow._AND_in_expr3088); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(488, 15);
				PushFollow(Follow._expr_in_expr3090);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(488, 20);
				PushFollow(Follow._expr_in_expr3092);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 19:
				DebugEnterAlt(19);
				// JavaTreeParser.g:489:9: ^( EQUAL expr expr )
				{
				DebugLocation(489, 9);
				DebugLocation(489, 11);
				Match(input,EQUAL,Follow._EQUAL_in_expr3104); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(489, 17);
				PushFollow(Follow._expr_in_expr3106);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(489, 22);
				PushFollow(Follow._expr_in_expr3108);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 20:
				DebugEnterAlt(20);
				// JavaTreeParser.g:490:9: ^( NOT_EQUAL expr expr )
				{
				DebugLocation(490, 9);
				DebugLocation(490, 11);
				Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_expr3120); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(490, 21);
				PushFollow(Follow._expr_in_expr3122);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(490, 26);
				PushFollow(Follow._expr_in_expr3124);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 21:
				DebugEnterAlt(21);
				// JavaTreeParser.g:491:9: ^( INSTANCEOF expr type )
				{
				DebugLocation(491, 9);
				DebugLocation(491, 11);
				Match(input,INSTANCEOF,Follow._INSTANCEOF_in_expr3136); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(491, 22);
				PushFollow(Follow._expr_in_expr3138);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(491, 27);
				PushFollow(Follow._type_in_expr3140);
				type();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 22:
				DebugEnterAlt(22);
				// JavaTreeParser.g:492:9: ^( LESS_OR_EQUAL expr expr )
				{
				DebugLocation(492, 9);
				DebugLocation(492, 11);
				Match(input,LESS_OR_EQUAL,Follow._LESS_OR_EQUAL_in_expr3152); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(492, 25);
				PushFollow(Follow._expr_in_expr3154);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(492, 30);
				PushFollow(Follow._expr_in_expr3156);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 23:
				DebugEnterAlt(23);
				// JavaTreeParser.g:493:9: ^( GREATER_OR_EQUAL expr expr )
				{
				DebugLocation(493, 9);
				DebugLocation(493, 11);
				Match(input,GREATER_OR_EQUAL,Follow._GREATER_OR_EQUAL_in_expr3168); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(493, 28);
				PushFollow(Follow._expr_in_expr3170);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(493, 33);
				PushFollow(Follow._expr_in_expr3172);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 24:
				DebugEnterAlt(24);
				// JavaTreeParser.g:494:9: ^( BIT_SHIFT_RIGHT expr expr )
				{
				DebugLocation(494, 9);
				DebugLocation(494, 11);
				Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_expr3184); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(494, 27);
				PushFollow(Follow._expr_in_expr3186);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(494, 32);
				PushFollow(Follow._expr_in_expr3188);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 25:
				DebugEnterAlt(25);
				// JavaTreeParser.g:495:9: ^( SHIFT_RIGHT expr expr )
				{
				DebugLocation(495, 9);
				DebugLocation(495, 11);
				Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_expr3200); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(495, 23);
				PushFollow(Follow._expr_in_expr3202);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(495, 28);
				PushFollow(Follow._expr_in_expr3204);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 26:
				DebugEnterAlt(26);
				// JavaTreeParser.g:496:9: ^( GREATER_THAN expr expr )
				{
				DebugLocation(496, 9);
				DebugLocation(496, 11);
				Match(input,GREATER_THAN,Follow._GREATER_THAN_in_expr3216); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(496, 24);
				PushFollow(Follow._expr_in_expr3218);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(496, 29);
				PushFollow(Follow._expr_in_expr3220);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 27:
				DebugEnterAlt(27);
				// JavaTreeParser.g:497:9: ^( SHIFT_LEFT expr expr )
				{
				DebugLocation(497, 9);
				DebugLocation(497, 11);
				Match(input,SHIFT_LEFT,Follow._SHIFT_LEFT_in_expr3232); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(497, 22);
				PushFollow(Follow._expr_in_expr3234);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(497, 27);
				PushFollow(Follow._expr_in_expr3236);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 28:
				DebugEnterAlt(28);
				// JavaTreeParser.g:498:9: ^( LESS_THAN expr expr )
				{
				DebugLocation(498, 9);
				DebugLocation(498, 11);
				Match(input,LESS_THAN,Follow._LESS_THAN_in_expr3248); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(498, 21);
				PushFollow(Follow._expr_in_expr3250);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(498, 26);
				PushFollow(Follow._expr_in_expr3252);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 29:
				DebugEnterAlt(29);
				// JavaTreeParser.g:499:9: ^( PLUS expr expr )
				{
				DebugLocation(499, 9);
				DebugLocation(499, 11);
				Match(input,PLUS,Follow._PLUS_in_expr3264); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(499, 16);
				PushFollow(Follow._expr_in_expr3266);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(499, 21);
				PushFollow(Follow._expr_in_expr3268);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 30:
				DebugEnterAlt(30);
				// JavaTreeParser.g:500:9: ^( MINUS expr expr )
				{
				DebugLocation(500, 9);
				DebugLocation(500, 11);
				Match(input,MINUS,Follow._MINUS_in_expr3280); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(500, 17);
				PushFollow(Follow._expr_in_expr3282);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(500, 22);
				PushFollow(Follow._expr_in_expr3284);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 31:
				DebugEnterAlt(31);
				// JavaTreeParser.g:501:9: ^( STAR expr expr )
				{
				DebugLocation(501, 9);
				DebugLocation(501, 11);
				Match(input,STAR,Follow._STAR_in_expr3296); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(501, 16);
				PushFollow(Follow._expr_in_expr3298);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(501, 21);
				PushFollow(Follow._expr_in_expr3300);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 32:
				DebugEnterAlt(32);
				// JavaTreeParser.g:502:9: ^( DIV expr expr )
				{
				DebugLocation(502, 9);
				DebugLocation(502, 11);
				Match(input,DIV,Follow._DIV_in_expr3312); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(502, 15);
				PushFollow(Follow._expr_in_expr3314);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(502, 20);
				PushFollow(Follow._expr_in_expr3316);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 33:
				DebugEnterAlt(33);
				// JavaTreeParser.g:503:9: ^( MOD expr expr )
				{
				DebugLocation(503, 9);
				DebugLocation(503, 11);
				Match(input,MOD,Follow._MOD_in_expr3328); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(503, 15);
				PushFollow(Follow._expr_in_expr3330);
				expr();
				PopFollow();
				if (state.failed) return;
				DebugLocation(503, 20);
				PushFollow(Follow._expr_in_expr3332);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 34:
				DebugEnterAlt(34);
				// JavaTreeParser.g:504:9: ^( UNARY_PLUS expr )
				{
				DebugLocation(504, 9);
				DebugLocation(504, 11);
				Match(input,UNARY_PLUS,Follow._UNARY_PLUS_in_expr3344); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(504, 22);
				PushFollow(Follow._expr_in_expr3346);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 35:
				DebugEnterAlt(35);
				// JavaTreeParser.g:505:9: ^( UNARY_MINUS expr )
				{
				DebugLocation(505, 9);
				DebugLocation(505, 11);
				Match(input,UNARY_MINUS,Follow._UNARY_MINUS_in_expr3358); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(505, 23);
				PushFollow(Follow._expr_in_expr3360);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 36:
				DebugEnterAlt(36);
				// JavaTreeParser.g:506:9: ^( PRE_INC expr )
				{
				DebugLocation(506, 9);
				DebugLocation(506, 11);
				Match(input,PRE_INC,Follow._PRE_INC_in_expr3372); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(506, 19);
				PushFollow(Follow._expr_in_expr3374);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 37:
				DebugEnterAlt(37);
				// JavaTreeParser.g:507:9: ^( PRE_DEC expr )
				{
				DebugLocation(507, 9);
				DebugLocation(507, 11);
				Match(input,PRE_DEC,Follow._PRE_DEC_in_expr3386); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(507, 19);
				PushFollow(Follow._expr_in_expr3388);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 38:
				DebugEnterAlt(38);
				// JavaTreeParser.g:508:9: ^( POST_INC expr )
				{
				DebugLocation(508, 9);
				DebugLocation(508, 11);
				Match(input,POST_INC,Follow._POST_INC_in_expr3400); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(508, 20);
				PushFollow(Follow._expr_in_expr3402);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 39:
				DebugEnterAlt(39);
				// JavaTreeParser.g:509:9: ^( POST_DEC expr )
				{
				DebugLocation(509, 9);
				DebugLocation(509, 11);
				Match(input,POST_DEC,Follow._POST_DEC_in_expr3414); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(509, 20);
				PushFollow(Follow._expr_in_expr3416);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 40:
				DebugEnterAlt(40);
				// JavaTreeParser.g:510:9: ^( NOT expr )
				{
				DebugLocation(510, 9);
				DebugLocation(510, 11);
				Match(input,NOT,Follow._NOT_in_expr3428); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(510, 15);
				PushFollow(Follow._expr_in_expr3430);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 41:
				DebugEnterAlt(41);
				// JavaTreeParser.g:511:9: ^( LOGICAL_NOT expr )
				{
				DebugLocation(511, 9);
				DebugLocation(511, 11);
				Match(input,LOGICAL_NOT,Follow._LOGICAL_NOT_in_expr3442); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(511, 23);
				PushFollow(Follow._expr_in_expr3444);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 42:
				DebugEnterAlt(42);
				// JavaTreeParser.g:512:9: ^( CAST_EXPR type expr )
				{
				DebugLocation(512, 9);
				DebugLocation(512, 11);
				Match(input,CAST_EXPR,Follow._CAST_EXPR_in_expr3456); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(512, 21);
				PushFollow(Follow._type_in_expr3458);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(512, 26);
				PushFollow(Follow._expr_in_expr3460);
				expr();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 43:
				DebugEnterAlt(43);
				// JavaTreeParser.g:513:9: primaryExpression
				{
				DebugLocation(513, 9);
				PushFollow(Follow._primaryExpression_in_expr3471);
				primaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 62);
			LeaveRule("expr", 62);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 62, expr_StartIndex); }

		}
		DebugLocation(514, 4);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return;

	}
	// $ANTLR end "expr"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// JavaTreeParser.g:516:1: primaryExpression : ( ^( DOT ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) ) | parenthesizedExpression | IDENT | ^( METHOD_CALL primaryExpression ( genericTypeArgumentList )? arguments ) | explicitConstructorCall | ^( ARRAY_ELEMENT_ACCESS primaryExpression expression ) | literal | newExpression | THIS | arrayTypeDeclarator | SUPER );
	[GrammarRule("primaryExpression")]
	public void primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 63);
		TraceIn("primaryExpression", 63);
		int primaryExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(516, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return; }

			// JavaTreeParser.g:517:5: ( ^( DOT ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) ) | parenthesizedExpression | IDENT | ^( METHOD_CALL primaryExpression ( genericTypeArgumentList )? arguments ) | explicitConstructorCall | ^( ARRAY_ELEMENT_ACCESS primaryExpression expression ) | literal | newExpression | THIS | arrayTypeDeclarator | SUPER )
			int alt96=11;
			try { DebugEnterDecision(96, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt96 = 1;
				}
				break;
			case PARENTESIZED_EXPR:
				{
				alt96 = 2;
				}
				break;
			case IDENT:
				{
				alt96 = 3;
				}
				break;
			case METHOD_CALL:
				{
				alt96 = 4;
				}
				break;
			case SUPER_CONSTRUCTOR_CALL:
			case THIS_CONSTRUCTOR_CALL:
				{
				alt96 = 5;
				}
				break;
			case ARRAY_ELEMENT_ACCESS:
				{
				alt96 = 6;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				alt96 = 7;
				}
				break;
			case CLASS_CONSTRUCTOR_CALL:
			case STATIC_ARRAY_CREATOR:
				{
				alt96 = 8;
				}
				break;
			case THIS:
				{
				alt96 = 9;
				}
				break;
			case ARRAY_DECLARATOR:
				{
				alt96 = 10;
				}
				break;
			case SUPER:
				{
				alt96 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:517:9: ^( DOT ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) )
				{
				DebugLocation(517, 9);
				DebugLocation(517, 13);
				Match(input,DOT,Follow._DOT_in_primaryExpression3497); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(518, 13);
				// JavaTreeParser.g:518:13: ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS )
				int alt94=3;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				switch (input.LA(1))
				{
				case ARRAY_DECLARATOR:
				case ARRAY_ELEMENT_ACCESS:
				case CHARACTER_LITERAL:
				case CLASS_CONSTRUCTOR_CALL:
				case DECIMAL_LITERAL:
				case DOT:
				case FALSE:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case IDENT:
				case METHOD_CALL:
				case NULL:
				case OCTAL_LITERAL:
				case PARENTESIZED_EXPR:
				case STATIC_ARRAY_CREATOR:
				case STRING_LITERAL:
				case SUPER:
				case SUPER_CONSTRUCTOR_CALL:
				case THIS:
				case THIS_CONSTRUCTOR_CALL:
				case TRUE:
					{
					alt94 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					alt94 = 2;
					}
					break;
				case VOID:
					{
					alt94 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 94, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:518:17: primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS )
					{
					DebugLocation(518, 17);
					PushFollow(Follow._primaryExpression_in_primaryExpression3515);
					primaryExpression();
					PopFollow();
					if (state.failed) return;
					DebugLocation(519, 17);
					// JavaTreeParser.g:519:17: ( IDENT | THIS | SUPER | innerNewExpression | CLASS )
					int alt93=5;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					switch (input.LA(1))
					{
					case IDENT:
						{
						alt93 = 1;
						}
						break;
					case THIS:
						{
						alt93 = 2;
						}
						break;
					case SUPER:
						{
						alt93 = 3;
						}
						break;
					case CLASS_CONSTRUCTOR_CALL:
						{
						alt93 = 4;
						}
						break;
					case CLASS:
						{
						alt93 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:519:21: IDENT
						{
						DebugLocation(519, 21);
						Match(input,IDENT,Follow._IDENT_in_primaryExpression3537); if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// JavaTreeParser.g:520:21: THIS
						{
						DebugLocation(520, 21);
						Match(input,THIS,Follow._THIS_in_primaryExpression3559); if (state.failed) return;

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// JavaTreeParser.g:521:21: SUPER
						{
						DebugLocation(521, 21);
						Match(input,SUPER,Follow._SUPER_in_primaryExpression3581); if (state.failed) return;

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// JavaTreeParser.g:522:21: innerNewExpression
						{
						DebugLocation(522, 21);
						PushFollow(Follow._innerNewExpression_in_primaryExpression3603);
						innerNewExpression();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// JavaTreeParser.g:523:21: CLASS
						{
						DebugLocation(523, 21);
						Match(input,CLASS,Follow._CLASS_in_primaryExpression3625); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(93); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// JavaTreeParser.g:525:17: primitiveType CLASS
					{
					DebugLocation(525, 17);
					PushFollow(Follow._primitiveType_in_primaryExpression3661);
					primitiveType();
					PopFollow();
					if (state.failed) return;
					DebugLocation(525, 31);
					Match(input,CLASS,Follow._CLASS_in_primaryExpression3663); if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// JavaTreeParser.g:526:17: VOID CLASS
					{
					DebugLocation(526, 17);
					Match(input,VOID,Follow._VOID_in_primaryExpression3681); if (state.failed) return;
					DebugLocation(526, 22);
					Match(input,CLASS,Follow._CLASS_in_primaryExpression3683); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(94); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:529:9: parenthesizedExpression
				{
				DebugLocation(529, 9);
				PushFollow(Follow._parenthesizedExpression_in_primaryExpression3717);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:530:9: IDENT
				{
				DebugLocation(530, 9);
				Match(input,IDENT,Follow._IDENT_in_primaryExpression3727); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaTreeParser.g:531:9: ^( METHOD_CALL primaryExpression ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(531, 9);
				DebugLocation(531, 11);
				Match(input,METHOD_CALL,Follow._METHOD_CALL_in_primaryExpression3738); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(531, 23);
				PushFollow(Follow._primaryExpression_in_primaryExpression3740);
				primaryExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(531, 41);
				// JavaTreeParser.g:531:41: ( genericTypeArgumentList )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==GENERIC_TYPE_ARG_LIST))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:531:41: genericTypeArgumentList
					{
					DebugLocation(531, 41);
					PushFollow(Follow._genericTypeArgumentList_in_primaryExpression3742);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(531, 66);
				PushFollow(Follow._arguments_in_primaryExpression3745);
				arguments();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaTreeParser.g:532:9: explicitConstructorCall
				{
				DebugLocation(532, 9);
				PushFollow(Follow._explicitConstructorCall_in_primaryExpression3756);
				explicitConstructorCall();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaTreeParser.g:533:9: ^( ARRAY_ELEMENT_ACCESS primaryExpression expression )
				{
				DebugLocation(533, 9);
				DebugLocation(533, 11);
				Match(input,ARRAY_ELEMENT_ACCESS,Follow._ARRAY_ELEMENT_ACCESS_in_primaryExpression3767); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(533, 32);
				PushFollow(Follow._primaryExpression_in_primaryExpression3769);
				primaryExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(533, 50);
				PushFollow(Follow._expression_in_primaryExpression3771);
				expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaTreeParser.g:534:9: literal
				{
				DebugLocation(534, 9);
				PushFollow(Follow._literal_in_primaryExpression3782);
				literal();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// JavaTreeParser.g:535:9: newExpression
				{
				DebugLocation(535, 9);
				PushFollow(Follow._newExpression_in_primaryExpression3792);
				newExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// JavaTreeParser.g:536:9: THIS
				{
				DebugLocation(536, 9);
				Match(input,THIS,Follow._THIS_in_primaryExpression3802); if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// JavaTreeParser.g:537:9: arrayTypeDeclarator
				{
				DebugLocation(537, 9);
				PushFollow(Follow._arrayTypeDeclarator_in_primaryExpression3812);
				arrayTypeDeclarator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// JavaTreeParser.g:538:9: SUPER
				{
				DebugLocation(538, 9);
				Match(input,SUPER,Follow._SUPER_in_primaryExpression3822); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 63);
			LeaveRule("primaryExpression", 63);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 63, primaryExpression_StartIndex); }

		}
		DebugLocation(539, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_explicitConstructorCall();
	partial void LeaveRule_explicitConstructorCall();
	// $ANTLR start "explicitConstructorCall"
	// JavaTreeParser.g:541:1: explicitConstructorCall : ( ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments ) );
	[GrammarRule("explicitConstructorCall")]
	public void explicitConstructorCall()
	{
		EnterRule_explicitConstructorCall();
		EnterRule("explicitConstructorCall", 64);
		TraceIn("explicitConstructorCall", 64);
		int explicitConstructorCall_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "explicitConstructorCall");
		DebugLocation(541, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return; }

			// JavaTreeParser.g:542:5: ( ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments ) )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_1 = input.LA(1);

			if ((LA100_1==THIS_CONSTRUCTOR_CALL))
			{
				alt100 = 1;
			}
			else if ((LA100_1==SUPER_CONSTRUCTOR_CALL))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:542:9: ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(542, 9);
				DebugLocation(542, 11);
				Match(input,THIS_CONSTRUCTOR_CALL,Follow._THIS_CONSTRUCTOR_CALL_in_explicitConstructorCall3846); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(542, 33);
				// JavaTreeParser.g:542:33: ( genericTypeArgumentList )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_1 = input.LA(1);

				if ((LA97_1==GENERIC_TYPE_ARG_LIST))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:542:33: genericTypeArgumentList
					{
					DebugLocation(542, 33);
					PushFollow(Follow._genericTypeArgumentList_in_explicitConstructorCall3848);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(542, 58);
				PushFollow(Follow._arguments_in_explicitConstructorCall3851);
				arguments();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:543:9: ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(543, 9);
				DebugLocation(543, 11);
				Match(input,SUPER_CONSTRUCTOR_CALL,Follow._SUPER_CONSTRUCTOR_CALL_in_explicitConstructorCall3863); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(543, 34);
				// JavaTreeParser.g:543:34: ( primaryExpression )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==ARRAY_DECLARATOR||LA98_1==ARRAY_ELEMENT_ACCESS||LA98_1==CHARACTER_LITERAL||LA98_1==CLASS_CONSTRUCTOR_CALL||LA98_1==DECIMAL_LITERAL||LA98_1==DOT||LA98_1==FALSE||LA98_1==FLOATING_POINT_LITERAL||LA98_1==HEX_LITERAL||LA98_1==IDENT||LA98_1==METHOD_CALL||LA98_1==NULL||LA98_1==OCTAL_LITERAL||LA98_1==PARENTESIZED_EXPR||LA98_1==STATIC_ARRAY_CREATOR||(LA98_1>=STRING_LITERAL && LA98_1<=SUPER_CONSTRUCTOR_CALL)||(LA98_1>=THIS && LA98_1<=THIS_CONSTRUCTOR_CALL)||LA98_1==TRUE))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:543:34: primaryExpression
					{
					DebugLocation(543, 34);
					PushFollow(Follow._primaryExpression_in_explicitConstructorCall3865);
					primaryExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(543, 53);
				// JavaTreeParser.g:543:53: ( genericTypeArgumentList )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, false);
				int LA99_1 = input.LA(1);

				if ((LA99_1==GENERIC_TYPE_ARG_LIST))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:543:53: genericTypeArgumentList
					{
					DebugLocation(543, 53);
					PushFollow(Follow._genericTypeArgumentList_in_explicitConstructorCall3868);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(543, 78);
				PushFollow(Follow._arguments_in_explicitConstructorCall3871);
				arguments();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explicitConstructorCall", 64);
			LeaveRule("explicitConstructorCall", 64);
			LeaveRule_explicitConstructorCall();
			if (state.backtracking > 0) { Memoize(input, 64, explicitConstructorCall_StartIndex); }

		}
		DebugLocation(544, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorCall"); }
		return;

	}
	// $ANTLR end "explicitConstructorCall"

	partial void EnterRule_arrayTypeDeclarator();
	partial void LeaveRule_arrayTypeDeclarator();
	// $ANTLR start "arrayTypeDeclarator"
	// JavaTreeParser.g:546:1: arrayTypeDeclarator : ^( ARRAY_DECLARATOR ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) ;
	[GrammarRule("arrayTypeDeclarator")]
	public void arrayTypeDeclarator()
	{
		EnterRule_arrayTypeDeclarator();
		EnterRule("arrayTypeDeclarator", 65);
		TraceIn("arrayTypeDeclarator", 65);
		int arrayTypeDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayTypeDeclarator");
		DebugLocation(546, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return; }

			// JavaTreeParser.g:547:5: ( ^( ARRAY_DECLARATOR ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:547:9: ^( ARRAY_DECLARATOR ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) )
			{
			DebugLocation(547, 9);
			DebugLocation(547, 11);
			Match(input,ARRAY_DECLARATOR,Follow._ARRAY_DECLARATOR_in_arrayTypeDeclarator3892); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(547, 28);
			// JavaTreeParser.g:547:28: ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType )
			int alt101=3;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			switch (input.LA(1))
			{
			case ARRAY_DECLARATOR:
				{
				alt101 = 1;
				}
				break;
			case DOT:
			case IDENT:
				{
				alt101 = 2;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt101 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:547:29: arrayTypeDeclarator
				{
				DebugLocation(547, 29);
				PushFollow(Follow._arrayTypeDeclarator_in_arrayTypeDeclarator3895);
				arrayTypeDeclarator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:547:51: qualifiedIdentifier
				{
				DebugLocation(547, 51);
				PushFollow(Follow._qualifiedIdentifier_in_arrayTypeDeclarator3899);
				qualifiedIdentifier();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaTreeParser.g:547:73: primitiveType
				{
				DebugLocation(547, 73);
				PushFollow(Follow._primitiveType_in_arrayTypeDeclarator3903);
				primitiveType();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(101); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayTypeDeclarator", 65);
			LeaveRule("arrayTypeDeclarator", 65);
			LeaveRule_arrayTypeDeclarator();
			if (state.backtracking > 0) { Memoize(input, 65, arrayTypeDeclarator_StartIndex); }

		}
		DebugLocation(548, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayTypeDeclarator"); }
		return;

	}
	// $ANTLR end "arrayTypeDeclarator"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// JavaTreeParser.g:550:1: newExpression : ( ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) ) | ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) );
	[GrammarRule("newExpression")]
	public void newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 66);
		TraceIn("newExpression", 66);
		int newExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(550, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return; }

			// JavaTreeParser.g:551:5: ( ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) ) | ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) )
			int alt106=2;
			try { DebugEnterDecision(106, false);
			int LA106_1 = input.LA(1);

			if ((LA106_1==STATIC_ARRAY_CREATOR))
			{
				alt106 = 1;
			}
			else if ((LA106_1==CLASS_CONSTRUCTOR_CALL))
			{
				alt106 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 106, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:551:9: ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) )
				{
				DebugLocation(551, 9);
				DebugLocation(551, 13);
				Match(input,STATIC_ARRAY_CREATOR,Follow._STATIC_ARRAY_CREATOR_in_newExpression3927); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(552, 13);
				// JavaTreeParser.g:552:13: ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction )
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==BOOLEAN||LA103_1==BYTE||LA103_1==CHAR||LA103_1==DOUBLE||LA103_1==FLOAT||LA103_1==INT||LA103_1==LONG||LA103_1==SHORT))
				{
					alt103 = 1;
				}
				else if ((LA103_1==GENERIC_TYPE_ARG_LIST||LA103_1==QUALIFIED_TYPE_IDENT))
				{
					alt103 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:552:17: primitiveType newArrayConstruction
					{
					DebugLocation(552, 17);
					PushFollow(Follow._primitiveType_in_newExpression3945);
					primitiveType();
					PopFollow();
					if (state.failed) return;
					DebugLocation(552, 31);
					PushFollow(Follow._newArrayConstruction_in_newExpression3947);
					newArrayConstruction();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// JavaTreeParser.g:553:17: ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction
					{
					DebugLocation(553, 17);
					// JavaTreeParser.g:553:17: ( genericTypeArgumentList )?
					int alt102=2;
					try { DebugEnterSubRule(102);
					try { DebugEnterDecision(102, false);
					int LA102_1 = input.LA(1);

					if ((LA102_1==GENERIC_TYPE_ARG_LIST))
					{
						alt102 = 1;
					}
					} finally { DebugExitDecision(102); }
					switch (alt102)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:553:17: genericTypeArgumentList
						{
						DebugLocation(553, 17);
						PushFollow(Follow._genericTypeArgumentList_in_newExpression3965);
						genericTypeArgumentList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(102); }

					DebugLocation(553, 42);
					PushFollow(Follow._qualifiedTypeIdent_in_newExpression3968);
					qualifiedTypeIdent();
					PopFollow();
					if (state.failed) return;
					DebugLocation(553, 61);
					PushFollow(Follow._newArrayConstruction_in_newExpression3970);
					newArrayConstruction();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(103); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:556:9: ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? )
				{
				DebugLocation(556, 9);
				DebugLocation(556, 11);
				Match(input,CLASS_CONSTRUCTOR_CALL,Follow._CLASS_CONSTRUCTOR_CALL_in_newExpression4005); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(556, 34);
				// JavaTreeParser.g:556:34: ( genericTypeArgumentList )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_1 = input.LA(1);

				if ((LA104_1==GENERIC_TYPE_ARG_LIST))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:556:34: genericTypeArgumentList
					{
					DebugLocation(556, 34);
					PushFollow(Follow._genericTypeArgumentList_in_newExpression4007);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(556, 59);
				PushFollow(Follow._qualifiedTypeIdent_in_newExpression4010);
				qualifiedTypeIdent();
				PopFollow();
				if (state.failed) return;
				DebugLocation(556, 78);
				PushFollow(Follow._arguments_in_newExpression4012);
				arguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(556, 88);
				// JavaTreeParser.g:556:88: ( classTopLevelScope )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==CLASS_TOP_LEVEL_SCOPE))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:556:88: classTopLevelScope
					{
					DebugLocation(556, 88);
					PushFollow(Follow._classTopLevelScope_in_newExpression4014);
					classTopLevelScope();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(105); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newExpression", 66);
			LeaveRule("newExpression", 66);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 66, newExpression_StartIndex); }

		}
		DebugLocation(557, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_innerNewExpression();
	partial void LeaveRule_innerNewExpression();
	// $ANTLR start "innerNewExpression"
	// JavaTreeParser.g:559:1: innerNewExpression : ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? ) ;
	[GrammarRule("innerNewExpression")]
	public void innerNewExpression()
	{
		EnterRule_innerNewExpression();
		EnterRule("innerNewExpression", 67);
		TraceIn("innerNewExpression", 67);
		int innerNewExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "innerNewExpression");
		DebugLocation(559, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return; }

			// JavaTreeParser.g:560:5: ( ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:560:9: ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? )
			{
			DebugLocation(560, 9);
			DebugLocation(560, 11);
			Match(input,CLASS_CONSTRUCTOR_CALL,Follow._CLASS_CONSTRUCTOR_CALL_in_innerNewExpression4037); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(560, 34);
			// JavaTreeParser.g:560:34: ( genericTypeArgumentList )?
			int alt107=2;
			try { DebugEnterSubRule(107);
			try { DebugEnterDecision(107, false);
			int LA107_1 = input.LA(1);

			if ((LA107_1==GENERIC_TYPE_ARG_LIST))
			{
				alt107 = 1;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:560:34: genericTypeArgumentList
				{
				DebugLocation(560, 34);
				PushFollow(Follow._genericTypeArgumentList_in_innerNewExpression4039);
				genericTypeArgumentList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(107); }

			DebugLocation(560, 59);
			Match(input,IDENT,Follow._IDENT_in_innerNewExpression4042); if (state.failed) return;
			DebugLocation(560, 65);
			PushFollow(Follow._arguments_in_innerNewExpression4044);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(560, 75);
			// JavaTreeParser.g:560:75: ( classTopLevelScope )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_1 = input.LA(1);

			if ((LA108_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:560:75: classTopLevelScope
				{
				DebugLocation(560, 75);
				PushFollow(Follow._classTopLevelScope_in_innerNewExpression4046);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(108); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("innerNewExpression", 67);
			LeaveRule("innerNewExpression", 67);
			LeaveRule_innerNewExpression();
			if (state.backtracking > 0) { Memoize(input, 67, innerNewExpression_StartIndex); }

		}
		DebugLocation(561, 4);
		} finally { DebugExitRule(GrammarFileName, "innerNewExpression"); }
		return;

	}
	// $ANTLR end "innerNewExpression"

	partial void EnterRule_newArrayConstruction();
	partial void LeaveRule_newArrayConstruction();
	// $ANTLR start "newArrayConstruction"
	// JavaTreeParser.g:563:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | ( expression )+ ( arrayDeclaratorList )? );
	[GrammarRule("newArrayConstruction")]
	public void newArrayConstruction()
	{
		EnterRule_newArrayConstruction();
		EnterRule("newArrayConstruction", 68);
		TraceIn("newArrayConstruction", 68);
		int newArrayConstruction_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "newArrayConstruction");
		DebugLocation(563, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return; }

			// JavaTreeParser.g:564:5: ( arrayDeclaratorList arrayInitializer | ( expression )+ ( arrayDeclaratorList )? )
			int alt111=2;
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==ARRAY_DECLARATOR_LIST))
			{
				alt111 = 1;
			}
			else if ((LA111_1==EXPR))
			{
				alt111 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 111, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaTreeParser.g:564:9: arrayDeclaratorList arrayInitializer
				{
				DebugLocation(564, 9);
				PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction4071);
				arrayDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(564, 29);
				PushFollow(Follow._arrayInitializer_in_newArrayConstruction4073);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaTreeParser.g:565:9: ( expression )+ ( arrayDeclaratorList )?
				{
				DebugLocation(565, 9);
				// JavaTreeParser.g:565:9: ( expression )+
				int cnt109=0;
				try { DebugEnterSubRule(109);
				while (true)
				{
					int alt109=2;
					try { DebugEnterDecision(109, false);
					int LA109_1 = input.LA(1);

					if ((LA109_1==EXPR))
					{
						alt109 = 1;
					}


					} finally { DebugExitDecision(109); }
					switch (alt109)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:565:9: expression
						{
						DebugLocation(565, 9);
						PushFollow(Follow._expression_in_newArrayConstruction4083);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						if (cnt109 >= 1)
							goto loop109;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee109 = new EarlyExitException( 109, input );
						DebugRecognitionException(eee109);
						throw eee109;
					}
					cnt109++;
				}
				loop109:
					;

				} finally { DebugExitSubRule(109); }

				DebugLocation(565, 21);
				// JavaTreeParser.g:565:21: ( arrayDeclaratorList )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==ARRAY_DECLARATOR_LIST))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:565:21: arrayDeclaratorList
					{
					DebugLocation(565, 21);
					PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction4086);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(110); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newArrayConstruction", 68);
			LeaveRule("newArrayConstruction", 68);
			LeaveRule_newArrayConstruction();
			if (state.backtracking > 0) { Memoize(input, 68, newArrayConstruction_StartIndex); }

		}
		DebugLocation(566, 4);
		} finally { DebugExitRule(GrammarFileName, "newArrayConstruction"); }
		return;

	}
	// $ANTLR end "newArrayConstruction"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// JavaTreeParser.g:568:1: arguments : ^( ARGUMENT_LIST ( expression )* ) ;
	[GrammarRule("arguments")]
	public void arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 69);
		TraceIn("arguments", 69);
		int arguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(568, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return; }

			// JavaTreeParser.g:569:5: ( ^( ARGUMENT_LIST ( expression )* ) )
			DebugEnterAlt(1);
			// JavaTreeParser.g:569:9: ^( ARGUMENT_LIST ( expression )* )
			{
			DebugLocation(569, 9);
			DebugLocation(569, 11);
			Match(input,ARGUMENT_LIST,Follow._ARGUMENT_LIST_in_arguments4107); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(569, 25);
				// JavaTreeParser.g:569:25: ( expression )*
				try { DebugEnterSubRule(112);
				while (true)
				{
					int alt112=2;
					try { DebugEnterDecision(112, false);
					int LA112_1 = input.LA(1);

					if ((LA112_1==EXPR))
					{
						alt112 = 1;
					}


					} finally { DebugExitDecision(112); }
					switch ( alt112 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaTreeParser.g:569:25: expression
						{
						DebugLocation(569, 25);
						PushFollow(Follow._expression_in_arguments4109);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop112;
					}
				}

				loop112:
					;

				} finally { DebugExitSubRule(112); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 69);
			LeaveRule("arguments", 69);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 69, arguments_StartIndex); }

		}
		DebugLocation(570, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// JavaTreeParser.g:572:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	public void literal()
	{
		EnterRule_literal();
		EnterRule("literal", 70);
		TraceIn("literal", 70);
		int literal_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(572, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return; }

			// JavaTreeParser.g:573:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// JavaTreeParser.g:
			{
			DebugLocation(573, 5);
			if (input.LA(1)==CHARACTER_LITERAL||input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATING_POINT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==NULL||input.LA(1)==OCTAL_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 70);
			LeaveRule("literal", 70);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 70, literal_StartIndex); }

		}
		DebugLocation(582, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return;

	}
	// $ANTLR end "literal"

	partial void EnterRule_synpred126_JavaTreeParser_fragment();
	partial void LeaveRule_synpred126_JavaTreeParser_fragment();

	// $ANTLR start synpred126_JavaTreeParser
	public void synpred126_JavaTreeParser_fragment()
	{
		EnterRule_synpred126_JavaTreeParser_fragment();
		EnterRule("synpred126_JavaTreeParser_fragment", 196);
		TraceIn("synpred126_JavaTreeParser_fragment", 196);
		try
		{
			// JavaTreeParser.g:437:35: ( switchCaseLabel )
			DebugEnterAlt(1);
			// JavaTreeParser.g:437:35: switchCaseLabel
			{
			DebugLocation(437, 35);
			PushFollow(Follow._switchCaseLabel_in_synpred126_JavaTreeParser2577);
			switchCaseLabel();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred126_JavaTreeParser_fragment", 196);
			LeaveRule("synpred126_JavaTreeParser_fragment", 196);
			LeaveRule_synpred126_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred126_JavaTreeParser

	partial void EnterRule_synpred133_JavaTreeParser_fragment();
	partial void LeaveRule_synpred133_JavaTreeParser_fragment();

	// $ANTLR start synpred133_JavaTreeParser
	public void synpred133_JavaTreeParser_fragment()
	{
		EnterRule_synpred133_JavaTreeParser_fragment();
		EnterRule("synpred133_JavaTreeParser_fragment", 203);
		TraceIn("synpred133_JavaTreeParser_fragment", 203);
		try
		{
			// JavaTreeParser.g:449:48: ( ( expression )* )
			DebugEnterAlt(1);
			// JavaTreeParser.g:449:48: ( expression )*
			{
			DebugLocation(449, 48);
			// JavaTreeParser.g:449:48: ( expression )*
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_1 = input.LA(1);

				if ((LA143_1==EXPR))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch ( alt143 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaTreeParser.g:449:48: expression
					{
					DebugLocation(449, 48);
					PushFollow(Follow._expression_in_synpred133_JavaTreeParser2678);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop143;
				}
			}

			loop143:
				;

			} finally { DebugExitSubRule(143); }


			}

		}
		finally
		{
			TraceOut("synpred133_JavaTreeParser_fragment", 203);
			LeaveRule("synpred133_JavaTreeParser_fragment", 203);
			LeaveRule_synpred133_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred133_JavaTreeParser
	#endregion Rules

	#region Synpreds
	public bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	public static class Follow
	{
		public static readonly BitSet _JAVA_SOURCE_in_javaSource92 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationList_in_javaSource94 = new BitSet(new ulong[]{0x400001000400008UL,0x1080000000UL,0x40UL});
		public static readonly BitSet _packageDeclaration_in_javaSource96 = new BitSet(new ulong[]{0x400001000400008UL,0x1080000000UL});
		public static readonly BitSet _importDeclaration_in_javaSource99 = new BitSet(new ulong[]{0x400001000400008UL,0x1080000000UL});
		public static readonly BitSet _typeDeclaration_in_javaSource102 = new BitSet(new ulong[]{0x400001000400008UL,0x1000000000UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration124 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_packageDeclaration126 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IMPORT_in_importDeclaration153 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STATIC_in_importDeclaration155 = new BitSet(new ulong[]{0x20000000000000UL,0x8000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_importDeclaration158 = new BitSet(new ulong[]{0x40000000000008UL});
		public static readonly BitSet _DOTSTAR_in_importDeclaration160 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_in_typeDeclaration186 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration188 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration190 = new BitSet(new ulong[]{0x10000000000UL,0x40080004UL});
		public static readonly BitSet _genericTypeParameterList_in_typeDeclaration192 = new BitSet(new ulong[]{0x10000000000UL,0x40000004UL});
		public static readonly BitSet _extendsClause_in_typeDeclaration195 = new BitSet(new ulong[]{0x10000000000UL,0x40000000UL});
		public static readonly BitSet _implementsClause_in_typeDeclaration198 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _classTopLevelScope_in_typeDeclaration201 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INTERFACE_in_typeDeclaration213 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration215 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration217 = new BitSet(new ulong[]{0x0UL,0x2000080004UL});
		public static readonly BitSet _genericTypeParameterList_in_typeDeclaration219 = new BitSet(new ulong[]{0x0UL,0x2000000004UL});
		public static readonly BitSet _extendsClause_in_typeDeclaration222 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _interfaceTopLevelScope_in_typeDeclaration225 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ENUM_in_typeDeclaration237 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration239 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration241 = new BitSet(new ulong[]{0x800000000000000UL,0x40000000UL});
		public static readonly BitSet _implementsClause_in_typeDeclaration243 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _enumTopLevelScope_in_typeDeclaration246 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AT_in_typeDeclaration258 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration260 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration262 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _annotationTopLevelScope_in_typeDeclaration264 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_CLAUSE_in_extendsClause301 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_extendsClause303 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _IMPLEMENTS_CLAUSE_in_implementsClause332 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_implementsClause334 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _GENERIC_TYPE_PARAM_LIST_in_genericTypeParameterList364 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList366 = new BitSet(new ulong[]{0x8UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_genericTypeParameter388 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _bound_in_genericTypeParameter390 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_BOUND_LIST_in_bound420 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_bound422 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _ENUM_TOP_LEVEL_SCOPE_in_enumTopLevelScope444 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _enumConstant_in_enumTopLevelScope446 = new BitSet(new ulong[]{0x10000000008UL,0x8000000UL});
		public static readonly BitSet _classTopLevelScope_in_enumTopLevelScope449 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_enumConstant475 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationList_in_enumConstant477 = new BitSet(new ulong[]{0x10000008008UL});
		public static readonly BitSet _arguments_in_enumConstant479 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_enumConstant482 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_TOP_LEVEL_SCOPE_in_classTopLevelScope513 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _classScopeDeclarations_in_classTopLevelScope515 = new BitSet(new ulong[]{0x40010D000400008UL,0x1000020000UL,0x220000000000000UL});
		public static readonly BitSet _CLASS_INSTANCE_INITIALIZER_in_classScopeDeclarations541 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_classScopeDeclarations543 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_STATIC_INITIALIZER_in_classScopeDeclarations555 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_classScopeDeclarations557 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FUNCTION_METHOD_DECL_in_classScopeDeclarations569 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations571 = new BitSet(new ulong[]{0x0UL,0x80000UL,0x2000000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations573 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations576 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations578 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations580 = new BitSet(new ulong[]{0x4020008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_classScopeDeclarations582 = new BitSet(new ulong[]{0x4000008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations585 = new BitSet(new ulong[]{0x4000008UL});
		public static readonly BitSet _block_in_classScopeDeclarations588 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_METHOD_DECL_in_classScopeDeclarations601 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations603 = new BitSet(new ulong[]{0x0UL,0x8080000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations605 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations608 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations610 = new BitSet(new ulong[]{0x4000008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations612 = new BitSet(new ulong[]{0x4000008UL});
		public static readonly BitSet _block_in_classScopeDeclarations615 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_classScopeDeclarations628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations630 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations632 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_classScopeDeclarations634 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONSTRUCTOR_DECL_in_classScopeDeclarations646 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations648 = new BitSet(new ulong[]{0x0UL,0x80400UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations650 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations653 = new BitSet(new ulong[]{0x4000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations655 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations658 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_classScopeDeclarations669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_TOP_LEVEL_SCOPE_in_interfaceTopLevelScope693 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _interfaceScopeDeclarations_in_interfaceTopLevelScope695 = new BitSet(new ulong[]{0x400001000400008UL,0x1000020000UL,0x220000000000000UL});
		public static readonly BitSet _FUNCTION_METHOD_DECL_in_interfaceScopeDeclarations721 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations723 = new BitSet(new ulong[]{0x0UL,0x80000UL,0x2000000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations725 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations728 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations730 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations732 = new BitSet(new ulong[]{0x20008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_interfaceScopeDeclarations734 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations737 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_METHOD_DECL_in_interfaceScopeDeclarations750 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations752 = new BitSet(new ulong[]{0x0UL,0x8080000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations754 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations757 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations759 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations761 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_interfaceScopeDeclarations852 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations854 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations856 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_interfaceScopeDeclarations858 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_interfaceScopeDeclarations869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_DECLARATOR_LIST_in_variableDeclaratorList889 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarator_in_variableDeclaratorList891 = new BitSet(new ulong[]{0x8UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _VAR_DECLARATOR_in_variableDeclarator913 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclaratorId_in_variableDeclarator915 = new BitSet(new ulong[]{0x8000000000080008UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator917 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_variableDeclaratorId943 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arrayDeclaratorList_in_variableDeclaratorId945 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayDeclarator995 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _RBRACK_in_arrayDeclarator997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARRAY_DECLARATOR_LIST_in_arrayDeclaratorList1017 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARRAY_DECLARATOR_in_arrayDeclaratorList1019 = new BitSet(new ulong[]{0x10008UL});
		public static readonly BitSet _ARRAY_INITIALIZER_in_arrayInitializer1047 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer1049 = new BitSet(new ulong[]{0x8000000000080008UL});
		public static readonly BitSet _THROWS_CLAUSE_in_throwsClause1071 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_throwsClause1073 = new BitSet(new ulong[]{0x20000000000008UL,0x8000000UL});
		public static readonly BitSet _MODIFIER_LIST_in_modifierList1095 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifier_in_modifierList1097 = new BitSet(new ulong[]{0x400018UL,0x1000000000000010UL,0x40041050001C000UL});
		public static readonly BitSet _PUBLIC_in_modifier1118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_modifier1128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_modifier1138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier1148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSTRACT_in_modifier1158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIVE_in_modifier1168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifier1178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSIENT_in_modifier1188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOLATILE_in_modifier1198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRICTFP_in_modifier1208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_modifier1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCAL_MODIFIER_LIST_in_localModifierList1238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifier_in_localModifierList1240 = new BitSet(new ulong[]{0x400008UL,0x10UL});
		public static readonly BitSet _FINAL_in_localModifier1261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_localModifier1271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_type1291 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveType_in_type1294 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _qualifiedTypeIdent_in_type1298 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _arrayDeclaratorList_in_type1301 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUALIFIED_TYPE_IDENT_in_qualifiedTypeIdent1323 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent1325 = new BitSet(new ulong[]{0x8UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_typeIdent1348 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_typeIdent1350 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GENERIC_TYPE_ARG_LIST_in_genericTypeArgumentList1461 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList1463 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000040000UL});
		public static readonly BitSet _type_in_genericTypeArgument1488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgument1499 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericWildcardBoundType_in_genericTypeArgument1501 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_in_genericWildcardBoundType1641 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_genericWildcardBoundType1643 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_in_genericWildcardBoundType1655 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_genericWildcardBoundType1657 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_LIST_in_formalParameterList1678 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList1680 = new BitSet(new ulong[]{0x8UL,0x1800UL});
		public static readonly BitSet _formalParameterVarargDecl_in_formalParameterList1683 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_STD_DECL_in_formalParameterStandardDecl1710 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_formalParameterStandardDecl1712 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_formalParameterStandardDecl1714 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterStandardDecl1716 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_VARARG_DECL_in_formalParameterVarargDecl1741 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_formalParameterVarargDecl1743 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_formalParameterVarargDecl1745 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterVarargDecl1747 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_qualifiedIdentifier1782 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentifier1784 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier1786 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_LIST_in_annotationList1813 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotation_in_annotationList1815 = new BitSet(new ulong[]{0x400008UL});
		public static readonly BitSet _AT_in_annotation1837 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_annotation1839 = new BitSet(new ulong[]{0x108UL});
		public static readonly BitSet _annotationInit_in_annotation1841 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_BLOCK_in_annotationInit1867 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationInitializers_in_annotationInit1869 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_KEY_LIST_in_annotationInitializers1891 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers1893 = new BitSet(new ulong[]{0x8UL,0x8000000UL});
		public static readonly BitSet _ANNOTATION_INIT_DEFAULT_KEY_in_annotationInitializers1906 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializers1908 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_annotationInitializer1933 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializer1935 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_ARRAY_ELEMENT_in_annotationElementValue1960 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValue1962 = new BitSet(new ulong[]{0x8000000000400088UL});
		public static readonly BitSet _annotation_in_annotationElementValue1974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_annotationElementValue1984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANNOTATION_TOP_LEVEL_SCOPE_in_annotationTopLevelScope2008 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationScopeDeclarations_in_annotationTopLevelScope2010 = new BitSet(new ulong[]{0x400001000401008UL,0x1000000000UL,0x20000000000000UL});
		public static readonly BitSet _ANNOTATION_METHOD_DECL_in_annotationScopeDeclarations2036 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations2038 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations2040 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_annotationScopeDeclarations2042 = new BitSet(new ulong[]{0x2000000000008UL});
		public static readonly BitSet _annotationDefaultValue_in_annotationScopeDeclarations2044 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_annotationScopeDeclarations2057 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations2059 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations2061 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_annotationScopeDeclarations2063 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_annotationScopeDeclarations2074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_annotationDefaultValue2098 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationDefaultValue2100 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BLOCK_SCOPE_in_block2123 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _blockStatement_in_block2125 = new BitSet(new ulong[]{0x8410201014500008UL,0x41010004200UL,0x821094000A00000UL});
		public static readonly BitSet _localVariableDeclaration_in_blockStatement2150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_blockStatement2160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement2170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_DECLARATION_in_localVariableDeclaration2194 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_localVariableDeclaration2196 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_localVariableDeclaration2198 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_localVariableDeclaration2200 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _block_in_statement2233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement2244 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_statement2246 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _expression_in_statement2248 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IF_in_statement2261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2263 = new BitSet(new ulong[]{0x8010200014100000UL,0x40010004200UL,0x801094000A00000UL});
		public static readonly BitSet _statement_in_statement2265 = new BitSet(new ulong[]{0x8010200014100008UL,0x40010004200UL,0x801094000A00000UL});
		public static readonly BitSet _statement_in_statement2267 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_in_statement2280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _forInit_in_statement2282 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _forCondition_in_statement2284 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _forUpdater_in_statement2286 = new BitSet(new ulong[]{0x8010200014100000UL,0x40010004200UL,0x801094000A00000UL});
		public static readonly BitSet _statement_in_statement2288 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_EACH_in_statement2300 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_statement2302 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_statement2304 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_statement2306 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _expression_in_statement2308 = new BitSet(new ulong[]{0x8010200014100000UL,0x40010004200UL,0x801094000A00000UL});
		public static readonly BitSet _statement_in_statement2310 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _WHILE_in_statement2323 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2325 = new BitSet(new ulong[]{0x8010200014100000UL,0x40010004200UL,0x801094000A00000UL});
		public static readonly BitSet _statement_in_statement2327 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DO_in_statement2339 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_statement2341 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2343 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TRY_in_statement2355 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_statement2357 = new BitSet(new ulong[]{0x204000008UL});
		public static readonly BitSet _catches_in_statement2359 = new BitSet(new ulong[]{0x4000008UL});
		public static readonly BitSet _block_in_statement2362 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SWITCH_in_statement2377 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2379 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _switchBlockLabels_in_statement2381 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement2393 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2395 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _block_in_statement2397 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RETURN_in_statement2409 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_statement2411 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THROW_in_statement2424 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_statement2426 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BREAK_in_statement2438 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement2440 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONTINUE_in_statement2453 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement2455 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LABELED_STATEMENT_in_statement2468 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement2470 = new BitSet(new ulong[]{0x8010200014100000UL,0x40010004200UL,0x801094000A00000UL});
		public static readonly BitSet _statement_in_statement2472 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expression_in_statement2483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement2493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_CLAUSE_LIST_in_catches2522 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _catchClause_in_catches2524 = new BitSet(new ulong[]{0x100000008UL});
		public static readonly BitSet _CATCH_in_catchClause2550 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _formalParameterStandardDecl_in_catchClause2552 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _block_in_catchClause2554 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SWITCH_BLOCK_LABEL_LIST_in_switchBlockLabels2575 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _switchCaseLabel_in_switchBlockLabels2577 = new BitSet(new ulong[]{0x2000040000008UL});
		public static readonly BitSet _switchDefaultLabel_in_switchBlockLabels2580 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _switchCaseLabel_in_switchBlockLabels2583 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _CASE_in_switchCaseLabel2613 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_switchCaseLabel2615 = new BitSet(new ulong[]{0x8410201014500008UL,0x41010004200UL,0x821094000A00000UL});
		public static readonly BitSet _blockStatement_in_switchCaseLabel2617 = new BitSet(new ulong[]{0x8410201014500008UL,0x41010004200UL,0x821094000A00000UL});
		public static readonly BitSet _DEFAULT_in_switchDefaultLabel2643 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _blockStatement_in_switchDefaultLabel2645 = new BitSet(new ulong[]{0x8410201014500008UL,0x41010004200UL,0x821094000A00000UL});
		public static readonly BitSet _FOR_INIT_in_forInit2671 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit2674 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expression_in_forInit2678 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _FOR_CONDITION_in_forCondition2706 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_forCondition2708 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_UPDATE_in_forUpdater2734 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_forUpdater2736 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _PARENTESIZED_EXPR_in_parenthesizedExpression2764 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_parenthesizedExpression2766 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXPR_in_expression2791 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expression2793 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASSIGN_in_expr2814 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2816 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2818 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_ASSIGN_in_expr2830 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2832 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2834 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_ASSIGN_in_expr2846 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2848 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2850 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_ASSIGN_in_expr2862 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2864 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2866 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_ASSIGN_in_expr2878 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2880 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2882 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_ASSIGN_in_expr2894 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2896 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2898 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_ASSIGN_in_expr2910 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2912 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2914 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _XOR_ASSIGN_in_expr2926 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2928 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2930 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MOD_ASSIGN_in_expr2942 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2944 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2946 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_ASSIGN_in_expr2958 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2960 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2962 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_RIGHT_ASSIGN_in_expr2974 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2976 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2978 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_LEFT_ASSIGN_in_expr2990 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2992 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr2994 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUESTION_in_expr3006 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3008 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3010 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3012 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_OR_in_expr3024 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3026 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3028 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_AND_in_expr3040 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3042 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3044 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_expr3056 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3058 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3060 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _XOR_in_expr3072 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3074 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3076 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_expr3088 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3090 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3092 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EQUAL_in_expr3104 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3106 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3108 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_EQUAL_in_expr3120 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3122 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3124 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INSTANCEOF_in_expr3136 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3138 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_expr3140 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LESS_OR_EQUAL_in_expr3152 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3154 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3156 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GREATER_OR_EQUAL_in_expr3168 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3170 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3172 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_expr3184 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3186 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3188 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_RIGHT_in_expr3200 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3202 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3204 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GREATER_THAN_in_expr3216 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3218 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3220 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_LEFT_in_expr3232 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3234 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3236 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LESS_THAN_in_expr3248 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3250 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3252 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_in_expr3264 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3266 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3268 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_in_expr3280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3282 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3284 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_in_expr3296 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3298 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3300 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_in_expr3312 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3314 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3316 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MOD_in_expr3328 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3330 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3332 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_PLUS_in_expr3344 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3346 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_MINUS_in_expr3358 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3360 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_INC_in_expr3372 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3374 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_DEC_in_expr3386 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3388 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_INC_in_expr3400 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3402 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_DEC_in_expr3414 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3416 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_in_expr3428 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3430 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_NOT_in_expr3442 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3444 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CAST_EXPR_in_expr3456 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_expr3458 = new BitSet(new ulong[]{0x102D002881A50060UL,0x8BCE60020A600088UL,0x600C863ACF043FBBUL});
		public static readonly BitSet _expr_in_expr3460 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primaryExpression_in_expr3471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression3497 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression3515 = new BitSet(new ulong[]{0x3000000000UL,0x8000000UL,0x21000000000UL});
		public static readonly BitSet _IDENT_in_primaryExpression3537 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THIS_in_primaryExpression3559 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_in_primaryExpression3581 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _innerNewExpression_in_primaryExpression3603 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_in_primaryExpression3625 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primitiveType_in_primaryExpression3661 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression3663 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_in_primaryExpression3681 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression3683 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parenthesizedExpression_in_primaryExpression3717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_primaryExpression3727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _METHOD_CALL_in_primaryExpression3738 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression3740 = new BitSet(new ulong[]{0x8000UL,0x40000UL});
		public static readonly BitSet _genericTypeArgumentList_in_primaryExpression3742 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_primaryExpression3745 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _explicitConstructorCall_in_primaryExpression3756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARRAY_ELEMENT_ACCESS_in_primaryExpression3767 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression3769 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _expression_in_primaryExpression3771 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _literal_in_primaryExpression3782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression3792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression3802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayTypeDeclarator_in_primaryExpression3812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression3822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_CONSTRUCTOR_CALL_in_explicitConstructorCall3846 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_explicitConstructorCall3848 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_explicitConstructorCall3851 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_CONSTRUCTOR_CALL_in_explicitConstructorCall3863 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_explicitConstructorCall3865 = new BitSet(new ulong[]{0x8000UL,0x40000UL});
		public static readonly BitSet _genericTypeArgumentList_in_explicitConstructorCall3868 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_explicitConstructorCall3871 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARRAY_DECLARATOR_in_arrayTypeDeclarator3892 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arrayTypeDeclarator_in_arrayTypeDeclarator3895 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _qualifiedIdentifier_in_arrayTypeDeclarator3899 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primitiveType_in_arrayTypeDeclarator3903 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STATIC_ARRAY_CREATOR_in_newExpression3927 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveType_in_newExpression3945 = new BitSet(new ulong[]{0x8000000000020000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression3947 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _genericTypeArgumentList_in_newExpression3965 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _qualifiedTypeIdent_in_newExpression3968 = new BitSet(new ulong[]{0x8000000000020000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression3970 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_CONSTRUCTOR_CALL_in_newExpression4005 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_newExpression4007 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _qualifiedTypeIdent_in_newExpression4010 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_newExpression4012 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_newExpression4014 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_CONSTRUCTOR_CALL_in_innerNewExpression4037 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_innerNewExpression4039 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _IDENT_in_innerNewExpression4042 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_innerNewExpression4044 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_innerNewExpression4046 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction4071 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _arrayInitializer_in_newArrayConstruction4073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_newArrayConstruction4083 = new BitSet(new ulong[]{0x8000000000020002UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction4086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARGUMENT_LIST_in_arguments4107 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_arguments4109 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _switchCaseLabel_in_synpred126_JavaTreeParser2577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred133_JavaTreeParser2678 = new BitSet(new ulong[]{0x8000000000000002UL});
	}
	#endregion Follow sets
}
}